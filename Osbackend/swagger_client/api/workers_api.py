# coding: utf-8

"""
    Hive OS API

    App API for Hive OS 2.0  # noqa: E501

    OpenAPI spec version: 2.1-beta
    Contact: brain@hiveos.farm
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class WorkersApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def farms_farm_id_workers_command_amd_upload_post(self, farm_id, **kwargs):  # noqa: E501
        """Extended version of \"amd_upload\" command  # noqa: E501

        Allows to flash different AMD GPUs of different workers in one request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.farms_farm_id_workers_command_amd_upload_post(farm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int farm_id: (required)
        :param Body body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.farms_farm_id_workers_command_amd_upload_post_with_http_info(farm_id, **kwargs)  # noqa: E501
        else:
            (data) = self.farms_farm_id_workers_command_amd_upload_post_with_http_info(farm_id, **kwargs)  # noqa: E501
            return data

    def farms_farm_id_workers_command_amd_upload_post_with_http_info(self, farm_id, **kwargs):  # noqa: E501
        """Extended version of \"amd_upload\" command  # noqa: E501

        Allows to flash different AMD GPUs of different workers in one request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.farms_farm_id_workers_command_amd_upload_post_with_http_info(farm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int farm_id: (required)
        :param Body body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['farm_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method farms_farm_id_workers_command_amd_upload_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'farm_id' is set
        if self.api_client.client_side_validation and ('farm_id' not in params or
                                                       params['farm_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `farm_id` when calling `farms_farm_id_workers_command_amd_upload_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'farm_id' in params:
            path_params['farmId'] = params['farm_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/farms/{farmId}/workers/command/amd_upload', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def farms_farm_id_workers_command_nvidia_upload_post(self, farm_id, **kwargs):  # noqa: E501
        """Extended version of \"nvidia_upload\" command  # noqa: E501

        Allows to flash different Nvidia GPUs of different workers in one request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.farms_farm_id_workers_command_nvidia_upload_post(farm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int farm_id: (required)
        :param Body body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.farms_farm_id_workers_command_nvidia_upload_post_with_http_info(farm_id, **kwargs)  # noqa: E501
        else:
            (data) = self.farms_farm_id_workers_command_nvidia_upload_post_with_http_info(farm_id, **kwargs)  # noqa: E501
            return data

    def farms_farm_id_workers_command_nvidia_upload_post_with_http_info(self, farm_id, **kwargs):  # noqa: E501
        """Extended version of \"nvidia_upload\" command  # noqa: E501

        Allows to flash different Nvidia GPUs of different workers in one request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.farms_farm_id_workers_command_nvidia_upload_post_with_http_info(farm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int farm_id: (required)
        :param Body body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['farm_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method farms_farm_id_workers_command_nvidia_upload_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'farm_id' is set
        if self.api_client.client_side_validation and ('farm_id' not in params or
                                                       params['farm_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `farm_id` when calling `farms_farm_id_workers_command_nvidia_upload_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'farm_id' in params:
            path_params['farmId'] = params['farm_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/farms/{farmId}/workers/command/nvidia_upload', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def farms_farm_id_workers_command_post(self, farm_id, **kwargs):  # noqa: E501
        """Execute command on multiple workers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.farms_farm_id_workers_command_post(farm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int farm_id: (required)
        :param object body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.farms_farm_id_workers_command_post_with_http_info(farm_id, **kwargs)  # noqa: E501
        else:
            (data) = self.farms_farm_id_workers_command_post_with_http_info(farm_id, **kwargs)  # noqa: E501
            return data

    def farms_farm_id_workers_command_post_with_http_info(self, farm_id, **kwargs):  # noqa: E501
        """Execute command on multiple workers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.farms_farm_id_workers_command_post_with_http_info(farm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int farm_id: (required)
        :param object body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['farm_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method farms_farm_id_workers_command_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'farm_id' is set
        if self.api_client.client_side_validation and ('farm_id' not in params or
                                                       params['farm_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `farm_id` when calling `farms_farm_id_workers_command_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'farm_id' in params:
            path_params['farmId'] = params['farm_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/farms/{farmId}/workers/command', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def farms_farm_id_workers_delete(self, farm_id, **kwargs):  # noqa: E501
        """Delete multiple workers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.farms_farm_id_workers_delete(farm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int farm_id: (required)
        :param object body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.farms_farm_id_workers_delete_with_http_info(farm_id, **kwargs)  # noqa: E501
        else:
            (data) = self.farms_farm_id_workers_delete_with_http_info(farm_id, **kwargs)  # noqa: E501
            return data

    def farms_farm_id_workers_delete_with_http_info(self, farm_id, **kwargs):  # noqa: E501
        """Delete multiple workers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.farms_farm_id_workers_delete_with_http_info(farm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int farm_id: (required)
        :param object body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['farm_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method farms_farm_id_workers_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'farm_id' is set
        if self.api_client.client_side_validation and ('farm_id' not in params or
                                                       params['farm_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `farm_id` when calling `farms_farm_id_workers_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'farm_id' in params:
            path_params['farmId'] = params['farm_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/farms/{farmId}/workers', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def farms_farm_id_workers_filters_get(self, farm_id, **kwargs):  # noqa: E501
        """Available values for filters that are used in worker and GPU lists  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.farms_farm_id_workers_filters_get(farm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int farm_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.farms_farm_id_workers_filters_get_with_http_info(farm_id, **kwargs)  # noqa: E501
        else:
            (data) = self.farms_farm_id_workers_filters_get_with_http_info(farm_id, **kwargs)  # noqa: E501
            return data

    def farms_farm_id_workers_filters_get_with_http_info(self, farm_id, **kwargs):  # noqa: E501
        """Available values for filters that are used in worker and GPU lists  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.farms_farm_id_workers_filters_get_with_http_info(farm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int farm_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['farm_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method farms_farm_id_workers_filters_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'farm_id' is set
        if self.api_client.client_side_validation and ('farm_id' not in params or
                                                       params['farm_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `farm_id` when calling `farms_farm_id_workers_filters_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'farm_id' in params:
            path_params['farmId'] = params['farm_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/farms/{farmId}/workers/filters', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def farms_farm_id_workers_fix_auto_tags_post(self, farm_id, **kwargs):  # noqa: E501
        """Synchronize auto-tags of all workers of the farm  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.farms_farm_id_workers_fix_auto_tags_post(farm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int farm_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.farms_farm_id_workers_fix_auto_tags_post_with_http_info(farm_id, **kwargs)  # noqa: E501
        else:
            (data) = self.farms_farm_id_workers_fix_auto_tags_post_with_http_info(farm_id, **kwargs)  # noqa: E501
            return data

    def farms_farm_id_workers_fix_auto_tags_post_with_http_info(self, farm_id, **kwargs):  # noqa: E501
        """Synchronize auto-tags of all workers of the farm  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.farms_farm_id_workers_fix_auto_tags_post_with_http_info(farm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int farm_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['farm_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method farms_farm_id_workers_fix_auto_tags_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'farm_id' is set
        if self.api_client.client_side_validation and ('farm_id' not in params or
                                                       params['farm_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `farm_id` when calling `farms_farm_id_workers_fix_auto_tags_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'farm_id' in params:
            path_params['farmId'] = params['farm_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/farms/{farmId}/workers/fix_auto_tags', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def farms_farm_id_workers_get(self, farm_id, **kwargs):  # noqa: E501
        """Farm workers list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.farms_farm_id_workers_get(farm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int farm_id: (required)
        :param str filter: Optional filter for workers
        :param str tags: Filter by tags. Comma-separated list of Tag IDs.
        :param int platform: Worker platform: * 1 - GPU * 2 - ASIC 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.farms_farm_id_workers_get_with_http_info(farm_id, **kwargs)  # noqa: E501
        else:
            (data) = self.farms_farm_id_workers_get_with_http_info(farm_id, **kwargs)  # noqa: E501
            return data

    def farms_farm_id_workers_get_with_http_info(self, farm_id, **kwargs):  # noqa: E501
        """Farm workers list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.farms_farm_id_workers_get_with_http_info(farm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int farm_id: (required)
        :param str filter: Optional filter for workers
        :param str tags: Filter by tags. Comma-separated list of Tag IDs.
        :param int platform: Worker platform: * 1 - GPU * 2 - ASIC 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['farm_id', 'filter', 'tags', 'platform']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method farms_farm_id_workers_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'farm_id' is set
        if self.api_client.client_side_validation and ('farm_id' not in params or
                                                       params['farm_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `farm_id` when calling `farms_farm_id_workers_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'farm_id' in params:
            path_params['farmId'] = params['farm_id']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'tags' in params:
            query_params.append(('tags', params['tags']))  # noqa: E501
        if 'platform' in params:
            query_params.append(('platform', params['platform']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/farms/{farmId}/workers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def farms_farm_id_workers_gpus_get(self, farm_id, **kwargs):  # noqa: E501
        """Farm workers GPUs list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.farms_farm_id_workers_gpus_get(farm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int farm_id: (required)
        :param str worker_ids: Return only records for these workers, comma-separated list of IDs
        :param str tags: Filter by tags. Comma-separated list of Tag IDs.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.farms_farm_id_workers_gpus_get_with_http_info(farm_id, **kwargs)  # noqa: E501
        else:
            (data) = self.farms_farm_id_workers_gpus_get_with_http_info(farm_id, **kwargs)  # noqa: E501
            return data

    def farms_farm_id_workers_gpus_get_with_http_info(self, farm_id, **kwargs):  # noqa: E501
        """Farm workers GPUs list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.farms_farm_id_workers_gpus_get_with_http_info(farm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int farm_id: (required)
        :param str worker_ids: Return only records for these workers, comma-separated list of IDs
        :param str tags: Filter by tags. Comma-separated list of Tag IDs.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['farm_id', 'worker_ids', 'tags']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method farms_farm_id_workers_gpus_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'farm_id' is set
        if self.api_client.client_side_validation and ('farm_id' not in params or
                                                       params['farm_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `farm_id` when calling `farms_farm_id_workers_gpus_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'farm_id' in params:
            path_params['farmId'] = params['farm_id']  # noqa: E501

        query_params = []
        if 'worker_ids' in params:
            query_params.append(('worker_ids', params['worker_ids']))  # noqa: E501
        if 'tags' in params:
            query_params.append(('tags', params['tags']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/farms/{farmId}/workers/gpus', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def farms_farm_id_workers_messages_delete(self, farm_id, **kwargs):  # noqa: E501
        """Delete all messages of all or provided workers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.farms_farm_id_workers_messages_delete(farm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int farm_id: (required)
        :param Body body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.farms_farm_id_workers_messages_delete_with_http_info(farm_id, **kwargs)  # noqa: E501
        else:
            (data) = self.farms_farm_id_workers_messages_delete_with_http_info(farm_id, **kwargs)  # noqa: E501
            return data

    def farms_farm_id_workers_messages_delete_with_http_info(self, farm_id, **kwargs):  # noqa: E501
        """Delete all messages of all or provided workers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.farms_farm_id_workers_messages_delete_with_http_info(farm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int farm_id: (required)
        :param Body body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['farm_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method farms_farm_id_workers_messages_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'farm_id' is set
        if self.api_client.client_side_validation and ('farm_id' not in params or
                                                       params['farm_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `farm_id` when calling `farms_farm_id_workers_messages_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'farm_id' in params:
            path_params['farmId'] = params['farm_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/farms/{farmId}/workers/messages', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def farms_farm_id_workers_messages_get(self, farm_id, **kwargs):  # noqa: E501
        """Farm workers messages list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.farms_farm_id_workers_messages_get(farm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int farm_id: (required)
        :param int page: Page number
        :param int per_page: Per-page count (default is 15)
        :param str worker_ids: Return only records for these workers, comma-separated list of IDs
        :param str message_ids: Return only these messages, comma-separated list of IDs
        :param int with_payload: Include message payload to ouput
        :param int start_time: Return only messages starting from given timestamp
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.farms_farm_id_workers_messages_get_with_http_info(farm_id, **kwargs)  # noqa: E501
        else:
            (data) = self.farms_farm_id_workers_messages_get_with_http_info(farm_id, **kwargs)  # noqa: E501
            return data

    def farms_farm_id_workers_messages_get_with_http_info(self, farm_id, **kwargs):  # noqa: E501
        """Farm workers messages list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.farms_farm_id_workers_messages_get_with_http_info(farm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int farm_id: (required)
        :param int page: Page number
        :param int per_page: Per-page count (default is 15)
        :param str worker_ids: Return only records for these workers, comma-separated list of IDs
        :param str message_ids: Return only these messages, comma-separated list of IDs
        :param int with_payload: Include message payload to ouput
        :param int start_time: Return only messages starting from given timestamp
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['farm_id', 'page', 'per_page', 'worker_ids', 'message_ids', 'with_payload', 'start_time']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method farms_farm_id_workers_messages_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'farm_id' is set
        if self.api_client.client_side_validation and ('farm_id' not in params or
                                                       params['farm_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `farm_id` when calling `farms_farm_id_workers_messages_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'farm_id' in params:
            path_params['farmId'] = params['farm_id']  # noqa: E501

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'per_page' in params:
            query_params.append(('per_page', params['per_page']))  # noqa: E501
        if 'worker_ids' in params:
            query_params.append(('worker_ids', params['worker_ids']))  # noqa: E501
        if 'message_ids' in params:
            query_params.append(('message_ids', params['message_ids']))  # noqa: E501
        if 'with_payload' in params:
            query_params.append(('with_payload', params['with_payload']))  # noqa: E501
        if 'start_time' in params:
            query_params.append(('start_time', params['start_time']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/farms/{farmId}/workers/messages', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def farms_farm_id_workers_multi_patch(self, farm_id, **kwargs):  # noqa: E501
        """Edit multiple workers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.farms_farm_id_workers_multi_patch(farm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int farm_id: (required)
        :param Body body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.farms_farm_id_workers_multi_patch_with_http_info(farm_id, **kwargs)  # noqa: E501
        else:
            (data) = self.farms_farm_id_workers_multi_patch_with_http_info(farm_id, **kwargs)  # noqa: E501
            return data

    def farms_farm_id_workers_multi_patch_with_http_info(self, farm_id, **kwargs):  # noqa: E501
        """Edit multiple workers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.farms_farm_id_workers_multi_patch_with_http_info(farm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int farm_id: (required)
        :param Body body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['farm_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method farms_farm_id_workers_multi_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'farm_id' is set
        if self.api_client.client_side_validation and ('farm_id' not in params or
                                                       params['farm_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `farm_id` when calling `farms_farm_id_workers_multi_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'farm_id' in params:
            path_params['farmId'] = params['farm_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/farms/{farmId}/workers/multi', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def farms_farm_id_workers_multi_post(self, farm_id, **kwargs):  # noqa: E501
        """Create multiple workers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.farms_farm_id_workers_multi_post(farm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int farm_id: (required)
        :param Body body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.farms_farm_id_workers_multi_post_with_http_info(farm_id, **kwargs)  # noqa: E501
        else:
            (data) = self.farms_farm_id_workers_multi_post_with_http_info(farm_id, **kwargs)  # noqa: E501
            return data

    def farms_farm_id_workers_multi_post_with_http_info(self, farm_id, **kwargs):  # noqa: E501
        """Create multiple workers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.farms_farm_id_workers_multi_post_with_http_info(farm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int farm_id: (required)
        :param Body body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['farm_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method farms_farm_id_workers_multi_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'farm_id' is set
        if self.api_client.client_side_validation and ('farm_id' not in params or
                                                       params['farm_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `farm_id` when calling `farms_farm_id_workers_multi_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'farm_id' in params:
            path_params['farmId'] = params['farm_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/farms/{farmId}/workers/multi', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def farms_farm_id_workers_overclock_post(self, farm_id, **kwargs):  # noqa: E501
        """Extended overclocking  # noqa: E501

        Allows to overlock individual GPUs of different workers in one request. Provided configurations will be merged into actual overclock of corresponding worker.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.farms_farm_id_workers_overclock_post(farm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int farm_id: (required)
        :param Body body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.farms_farm_id_workers_overclock_post_with_http_info(farm_id, **kwargs)  # noqa: E501
        else:
            (data) = self.farms_farm_id_workers_overclock_post_with_http_info(farm_id, **kwargs)  # noqa: E501
            return data

    def farms_farm_id_workers_overclock_post_with_http_info(self, farm_id, **kwargs):  # noqa: E501
        """Extended overclocking  # noqa: E501

        Allows to overlock individual GPUs of different workers in one request. Provided configurations will be merged into actual overclock of corresponding worker.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.farms_farm_id_workers_overclock_post_with_http_info(farm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int farm_id: (required)
        :param Body body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['farm_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method farms_farm_id_workers_overclock_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'farm_id' is set
        if self.api_client.client_side_validation and ('farm_id' not in params or
                                                       params['farm_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `farm_id` when calling `farms_farm_id_workers_overclock_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'farm_id' in params:
            path_params['farmId'] = params['farm_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/farms/{farmId}/workers/overclock', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def farms_farm_id_workers_patch(self, farm_id, **kwargs):  # noqa: E501
        """Edit multiple workers at once  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.farms_farm_id_workers_patch(farm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int farm_id: (required)
        :param bool merge: Merge some fields instead of replace them. These fields are: * miners_config * watchdog * autofan * octofan * coolbox * fanflap * powermeter 
        :param object body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.farms_farm_id_workers_patch_with_http_info(farm_id, **kwargs)  # noqa: E501
        else:
            (data) = self.farms_farm_id_workers_patch_with_http_info(farm_id, **kwargs)  # noqa: E501
            return data

    def farms_farm_id_workers_patch_with_http_info(self, farm_id, **kwargs):  # noqa: E501
        """Edit multiple workers at once  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.farms_farm_id_workers_patch_with_http_info(farm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int farm_id: (required)
        :param bool merge: Merge some fields instead of replace them. These fields are: * miners_config * watchdog * autofan * octofan * coolbox * fanflap * powermeter 
        :param object body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['farm_id', 'merge', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method farms_farm_id_workers_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'farm_id' is set
        if self.api_client.client_side_validation and ('farm_id' not in params or
                                                       params['farm_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `farm_id` when calling `farms_farm_id_workers_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'farm_id' in params:
            path_params['farmId'] = params['farm_id']  # noqa: E501

        query_params = []
        if 'merge' in params:
            query_params.append(('merge', params['merge']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/farms/{farmId}/workers', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def farms_farm_id_workers_post(self, farm_id, **kwargs):  # noqa: E501
        """Create new worker  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.farms_farm_id_workers_post(farm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int farm_id: (required)
        :param WorkerCreateRequest body:
        :return: Worker
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.farms_farm_id_workers_post_with_http_info(farm_id, **kwargs)  # noqa: E501
        else:
            (data) = self.farms_farm_id_workers_post_with_http_info(farm_id, **kwargs)  # noqa: E501
            return data

    def farms_farm_id_workers_post_with_http_info(self, farm_id, **kwargs):  # noqa: E501
        """Create new worker  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.farms_farm_id_workers_post_with_http_info(farm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int farm_id: (required)
        :param WorkerCreateRequest body:
        :return: Worker
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['farm_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method farms_farm_id_workers_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'farm_id' is set
        if self.api_client.client_side_validation and ('farm_id' not in params or
                                                       params['farm_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `farm_id` when calling `farms_farm_id_workers_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'farm_id' in params:
            path_params['farmId'] = params['farm_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/farms/{farmId}/workers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Worker',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def farms_farm_id_workers_preview_get(self, farm_id, **kwargs):  # noqa: E501
        """Preview all workers of the farm  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.farms_farm_id_workers_preview_get(farm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int farm_id: (required)
        :param str search_id: ID of cached workers selection
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.farms_farm_id_workers_preview_get_with_http_info(farm_id, **kwargs)  # noqa: E501
        else:
            (data) = self.farms_farm_id_workers_preview_get_with_http_info(farm_id, **kwargs)  # noqa: E501
            return data

    def farms_farm_id_workers_preview_get_with_http_info(self, farm_id, **kwargs):  # noqa: E501
        """Preview all workers of the farm  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.farms_farm_id_workers_preview_get_with_http_info(farm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int farm_id: (required)
        :param str search_id: ID of cached workers selection
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['farm_id', 'search_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method farms_farm_id_workers_preview_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'farm_id' is set
        if self.api_client.client_side_validation and ('farm_id' not in params or
                                                       params['farm_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `farm_id` when calling `farms_farm_id_workers_preview_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'farm_id' in params:
            path_params['farmId'] = params['farm_id']  # noqa: E501

        query_params = []
        if 'search_id' in params:
            query_params.append(('search_id', params['search_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/farms/{farmId}/workers/preview', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def farms_farm_id_workers_reload_post(self, farm_id, **kwargs):  # noqa: E501
        """Reload multiple workers  # noqa: E501

        Send configuration to workers, including flight sheet and overclock  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.farms_farm_id_workers_reload_post(farm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int farm_id: (required)
        :param object body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.farms_farm_id_workers_reload_post_with_http_info(farm_id, **kwargs)  # noqa: E501
        else:
            (data) = self.farms_farm_id_workers_reload_post_with_http_info(farm_id, **kwargs)  # noqa: E501
            return data

    def farms_farm_id_workers_reload_post_with_http_info(self, farm_id, **kwargs):  # noqa: E501
        """Reload multiple workers  # noqa: E501

        Send configuration to workers, including flight sheet and overclock  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.farms_farm_id_workers_reload_post_with_http_info(farm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int farm_id: (required)
        :param object body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['farm_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method farms_farm_id_workers_reload_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'farm_id' is set
        if self.api_client.client_side_validation and ('farm_id' not in params or
                                                       params['farm_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `farm_id` when calling `farms_farm_id_workers_reload_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'farm_id' in params:
            path_params['farmId'] = params['farm_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/farms/{farmId}/workers/reload', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def farms_farm_id_workers_transfer_post(self, farm_id, **kwargs):  # noqa: E501
        """Transfer multiple workers to another farm  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.farms_farm_id_workers_transfer_post(farm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int farm_id: (required)
        :param object body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.farms_farm_id_workers_transfer_post_with_http_info(farm_id, **kwargs)  # noqa: E501
        else:
            (data) = self.farms_farm_id_workers_transfer_post_with_http_info(farm_id, **kwargs)  # noqa: E501
            return data

    def farms_farm_id_workers_transfer_post_with_http_info(self, farm_id, **kwargs):  # noqa: E501
        """Transfer multiple workers to another farm  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.farms_farm_id_workers_transfer_post_with_http_info(farm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int farm_id: (required)
        :param object body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['farm_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method farms_farm_id_workers_transfer_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'farm_id' is set
        if self.api_client.client_side_validation and ('farm_id' not in params or
                                                       params['farm_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `farm_id` when calling `farms_farm_id_workers_transfer_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'farm_id' in params:
            path_params['farmId'] = params['farm_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/farms/{farmId}/workers/transfer', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def farms_farm_id_workers_worker_id_command_post(self, farm_id, worker_id, **kwargs):  # noqa: E501
        """Execute command  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.farms_farm_id_workers_worker_id_command_post(farm_id, worker_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int farm_id: (required)
        :param int worker_id: (required)
        :param CommandRequest body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.farms_farm_id_workers_worker_id_command_post_with_http_info(farm_id, worker_id, **kwargs)  # noqa: E501
        else:
            (data) = self.farms_farm_id_workers_worker_id_command_post_with_http_info(farm_id, worker_id, **kwargs)  # noqa: E501
            return data

    def farms_farm_id_workers_worker_id_command_post_with_http_info(self, farm_id, worker_id, **kwargs):  # noqa: E501
        """Execute command  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.farms_farm_id_workers_worker_id_command_post_with_http_info(farm_id, worker_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int farm_id: (required)
        :param int worker_id: (required)
        :param CommandRequest body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['farm_id', 'worker_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method farms_farm_id_workers_worker_id_command_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'farm_id' is set
        if self.api_client.client_side_validation and ('farm_id' not in params or
                                                       params['farm_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `farm_id` when calling `farms_farm_id_workers_worker_id_command_post`")  # noqa: E501
        # verify the required parameter 'worker_id' is set
        if self.api_client.client_side_validation and ('worker_id' not in params or
                                                       params['worker_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `worker_id` when calling `farms_farm_id_workers_worker_id_command_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'farm_id' in params:
            path_params['farmId'] = params['farm_id']  # noqa: E501
        if 'worker_id' in params:
            path_params['workerId'] = params['worker_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/farms/{farmId}/workers/{workerId}/command', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def farms_farm_id_workers_worker_id_configs_config_get(self, farm_id, worker_id, config, **kwargs):  # noqa: E501
        """Get configuration file for worker  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.farms_farm_id_workers_worker_id_configs_config_get(farm_id, worker_id, config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int farm_id: (required)
        :param int worker_id: (required)
        :param str config: (required)
        :return: WorkerConfigFiles
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.farms_farm_id_workers_worker_id_configs_config_get_with_http_info(farm_id, worker_id, config, **kwargs)  # noqa: E501
        else:
            (data) = self.farms_farm_id_workers_worker_id_configs_config_get_with_http_info(farm_id, worker_id, config, **kwargs)  # noqa: E501
            return data

    def farms_farm_id_workers_worker_id_configs_config_get_with_http_info(self, farm_id, worker_id, config, **kwargs):  # noqa: E501
        """Get configuration file for worker  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.farms_farm_id_workers_worker_id_configs_config_get_with_http_info(farm_id, worker_id, config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int farm_id: (required)
        :param int worker_id: (required)
        :param str config: (required)
        :return: WorkerConfigFiles
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['farm_id', 'worker_id', 'config']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method farms_farm_id_workers_worker_id_configs_config_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'farm_id' is set
        if self.api_client.client_side_validation and ('farm_id' not in params or
                                                       params['farm_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `farm_id` when calling `farms_farm_id_workers_worker_id_configs_config_get`")  # noqa: E501
        # verify the required parameter 'worker_id' is set
        if self.api_client.client_side_validation and ('worker_id' not in params or
                                                       params['worker_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `worker_id` when calling `farms_farm_id_workers_worker_id_configs_config_get`")  # noqa: E501
        # verify the required parameter 'config' is set
        if self.api_client.client_side_validation and ('config' not in params or
                                                       params['config'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `config` when calling `farms_farm_id_workers_worker_id_configs_config_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'farm_id' in params:
            path_params['farmId'] = params['farm_id']  # noqa: E501
        if 'worker_id' in params:
            path_params['workerId'] = params['worker_id']  # noqa: E501
        if 'config' in params:
            path_params['config'] = params['config']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/farms/{farmId}/workers/{workerId}/configs/{config}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkerConfigFiles',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def farms_farm_id_workers_worker_id_configs_get(self, farm_id, worker_id, **kwargs):  # noqa: E501
        """Get configuration files for worker  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.farms_farm_id_workers_worker_id_configs_get(farm_id, worker_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int farm_id: (required)
        :param int worker_id: (required)
        :return: WorkerConfigFiles
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.farms_farm_id_workers_worker_id_configs_get_with_http_info(farm_id, worker_id, **kwargs)  # noqa: E501
        else:
            (data) = self.farms_farm_id_workers_worker_id_configs_get_with_http_info(farm_id, worker_id, **kwargs)  # noqa: E501
            return data

    def farms_farm_id_workers_worker_id_configs_get_with_http_info(self, farm_id, worker_id, **kwargs):  # noqa: E501
        """Get configuration files for worker  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.farms_farm_id_workers_worker_id_configs_get_with_http_info(farm_id, worker_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int farm_id: (required)
        :param int worker_id: (required)
        :return: WorkerConfigFiles
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['farm_id', 'worker_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method farms_farm_id_workers_worker_id_configs_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'farm_id' is set
        if self.api_client.client_side_validation and ('farm_id' not in params or
                                                       params['farm_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `farm_id` when calling `farms_farm_id_workers_worker_id_configs_get`")  # noqa: E501
        # verify the required parameter 'worker_id' is set
        if self.api_client.client_side_validation and ('worker_id' not in params or
                                                       params['worker_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `worker_id` when calling `farms_farm_id_workers_worker_id_configs_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'farm_id' in params:
            path_params['farmId'] = params['farm_id']  # noqa: E501
        if 'worker_id' in params:
            path_params['workerId'] = params['worker_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/farms/{farmId}/workers/{workerId}/configs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkerConfigFiles',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def farms_farm_id_workers_worker_id_delete(self, farm_id, worker_id, **kwargs):  # noqa: E501
        """Delete worker  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.farms_farm_id_workers_worker_id_delete(farm_id, worker_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int farm_id: (required)
        :param int worker_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.farms_farm_id_workers_worker_id_delete_with_http_info(farm_id, worker_id, **kwargs)  # noqa: E501
        else:
            (data) = self.farms_farm_id_workers_worker_id_delete_with_http_info(farm_id, worker_id, **kwargs)  # noqa: E501
            return data

    def farms_farm_id_workers_worker_id_delete_with_http_info(self, farm_id, worker_id, **kwargs):  # noqa: E501
        """Delete worker  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.farms_farm_id_workers_worker_id_delete_with_http_info(farm_id, worker_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int farm_id: (required)
        :param int worker_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['farm_id', 'worker_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method farms_farm_id_workers_worker_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'farm_id' is set
        if self.api_client.client_side_validation and ('farm_id' not in params or
                                                       params['farm_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `farm_id` when calling `farms_farm_id_workers_worker_id_delete`")  # noqa: E501
        # verify the required parameter 'worker_id' is set
        if self.api_client.client_side_validation and ('worker_id' not in params or
                                                       params['worker_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `worker_id` when calling `farms_farm_id_workers_worker_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'farm_id' in params:
            path_params['farmId'] = params['farm_id']  # noqa: E501
        if 'worker_id' in params:
            path_params['workerId'] = params['worker_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/farms/{farmId}/workers/{workerId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def farms_farm_id_workers_worker_id_fix_auto_tags_post(self, farm_id, worker_id, **kwargs):  # noqa: E501
        """Synchronize auto-tags of the worker  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.farms_farm_id_workers_worker_id_fix_auto_tags_post(farm_id, worker_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int farm_id: (required)
        :param int worker_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.farms_farm_id_workers_worker_id_fix_auto_tags_post_with_http_info(farm_id, worker_id, **kwargs)  # noqa: E501
        else:
            (data) = self.farms_farm_id_workers_worker_id_fix_auto_tags_post_with_http_info(farm_id, worker_id, **kwargs)  # noqa: E501
            return data

    def farms_farm_id_workers_worker_id_fix_auto_tags_post_with_http_info(self, farm_id, worker_id, **kwargs):  # noqa: E501
        """Synchronize auto-tags of the worker  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.farms_farm_id_workers_worker_id_fix_auto_tags_post_with_http_info(farm_id, worker_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int farm_id: (required)
        :param int worker_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['farm_id', 'worker_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method farms_farm_id_workers_worker_id_fix_auto_tags_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'farm_id' is set
        if self.api_client.client_side_validation and ('farm_id' not in params or
                                                       params['farm_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `farm_id` when calling `farms_farm_id_workers_worker_id_fix_auto_tags_post`")  # noqa: E501
        # verify the required parameter 'worker_id' is set
        if self.api_client.client_side_validation and ('worker_id' not in params or
                                                       params['worker_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `worker_id` when calling `farms_farm_id_workers_worker_id_fix_auto_tags_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'farm_id' in params:
            path_params['farmId'] = params['farm_id']  # noqa: E501
        if 'worker_id' in params:
            path_params['workerId'] = params['worker_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/farms/{farmId}/workers/{workerId}/fix_auto_tags', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def farms_farm_id_workers_worker_id_get(self, farm_id, worker_id, **kwargs):  # noqa: E501
        """Worker info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.farms_farm_id_workers_worker_id_get(farm_id, worker_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int farm_id: (required)
        :param int worker_id: (required)
        :return: Worker
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.farms_farm_id_workers_worker_id_get_with_http_info(farm_id, worker_id, **kwargs)  # noqa: E501
        else:
            (data) = self.farms_farm_id_workers_worker_id_get_with_http_info(farm_id, worker_id, **kwargs)  # noqa: E501
            return data

    def farms_farm_id_workers_worker_id_get_with_http_info(self, farm_id, worker_id, **kwargs):  # noqa: E501
        """Worker info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.farms_farm_id_workers_worker_id_get_with_http_info(farm_id, worker_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int farm_id: (required)
        :param int worker_id: (required)
        :return: Worker
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['farm_id', 'worker_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method farms_farm_id_workers_worker_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'farm_id' is set
        if self.api_client.client_side_validation and ('farm_id' not in params or
                                                       params['farm_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `farm_id` when calling `farms_farm_id_workers_worker_id_get`")  # noqa: E501
        # verify the required parameter 'worker_id' is set
        if self.api_client.client_side_validation and ('worker_id' not in params or
                                                       params['worker_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `worker_id` when calling `farms_farm_id_workers_worker_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'farm_id' in params:
            path_params['farmId'] = params['farm_id']  # noqa: E501
        if 'worker_id' in params:
            path_params['workerId'] = params['worker_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/farms/{farmId}/workers/{workerId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Worker',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def farms_farm_id_workers_worker_id_messages_delete(self, farm_id, worker_id, **kwargs):  # noqa: E501
        """Delete all worker messages  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.farms_farm_id_workers_worker_id_messages_delete(farm_id, worker_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int farm_id: (required)
        :param int worker_id: (required)
        :param Body body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.farms_farm_id_workers_worker_id_messages_delete_with_http_info(farm_id, worker_id, **kwargs)  # noqa: E501
        else:
            (data) = self.farms_farm_id_workers_worker_id_messages_delete_with_http_info(farm_id, worker_id, **kwargs)  # noqa: E501
            return data

    def farms_farm_id_workers_worker_id_messages_delete_with_http_info(self, farm_id, worker_id, **kwargs):  # noqa: E501
        """Delete all worker messages  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.farms_farm_id_workers_worker_id_messages_delete_with_http_info(farm_id, worker_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int farm_id: (required)
        :param int worker_id: (required)
        :param Body body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['farm_id', 'worker_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method farms_farm_id_workers_worker_id_messages_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'farm_id' is set
        if self.api_client.client_side_validation and ('farm_id' not in params or
                                                       params['farm_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `farm_id` when calling `farms_farm_id_workers_worker_id_messages_delete`")  # noqa: E501
        # verify the required parameter 'worker_id' is set
        if self.api_client.client_side_validation and ('worker_id' not in params or
                                                       params['worker_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `worker_id` when calling `farms_farm_id_workers_worker_id_messages_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'farm_id' in params:
            path_params['farmId'] = params['farm_id']  # noqa: E501
        if 'worker_id' in params:
            path_params['workerId'] = params['worker_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/farms/{farmId}/workers/{workerId}/messages', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def farms_farm_id_workers_worker_id_messages_get(self, farm_id, worker_id, **kwargs):  # noqa: E501
        """Worker messages  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.farms_farm_id_workers_worker_id_messages_get(farm_id, worker_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int farm_id: (required)
        :param int worker_id: (required)
        :param int page: Page number
        :param int per_page: Per-page count (default is 15)
        :param str message_ids: Return only these messages, comma-separated list of IDs
        :param int with_payload: Include message payload to ouput
        :param int start_time: Return only messages starting from given timestamp
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.farms_farm_id_workers_worker_id_messages_get_with_http_info(farm_id, worker_id, **kwargs)  # noqa: E501
        else:
            (data) = self.farms_farm_id_workers_worker_id_messages_get_with_http_info(farm_id, worker_id, **kwargs)  # noqa: E501
            return data

    def farms_farm_id_workers_worker_id_messages_get_with_http_info(self, farm_id, worker_id, **kwargs):  # noqa: E501
        """Worker messages  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.farms_farm_id_workers_worker_id_messages_get_with_http_info(farm_id, worker_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int farm_id: (required)
        :param int worker_id: (required)
        :param int page: Page number
        :param int per_page: Per-page count (default is 15)
        :param str message_ids: Return only these messages, comma-separated list of IDs
        :param int with_payload: Include message payload to ouput
        :param int start_time: Return only messages starting from given timestamp
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['farm_id', 'worker_id', 'page', 'per_page', 'message_ids', 'with_payload', 'start_time']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method farms_farm_id_workers_worker_id_messages_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'farm_id' is set
        if self.api_client.client_side_validation and ('farm_id' not in params or
                                                       params['farm_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `farm_id` when calling `farms_farm_id_workers_worker_id_messages_get`")  # noqa: E501
        # verify the required parameter 'worker_id' is set
        if self.api_client.client_side_validation and ('worker_id' not in params or
                                                       params['worker_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `worker_id` when calling `farms_farm_id_workers_worker_id_messages_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'farm_id' in params:
            path_params['farmId'] = params['farm_id']  # noqa: E501
        if 'worker_id' in params:
            path_params['workerId'] = params['worker_id']  # noqa: E501

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'per_page' in params:
            query_params.append(('per_page', params['per_page']))  # noqa: E501
        if 'message_ids' in params:
            query_params.append(('message_ids', params['message_ids']))  # noqa: E501
        if 'with_payload' in params:
            query_params.append(('with_payload', params['with_payload']))  # noqa: E501
        if 'start_time' in params:
            query_params.append(('start_time', params['start_time']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/farms/{farmId}/workers/{workerId}/messages', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def farms_farm_id_workers_worker_id_messages_message_id_delete(self, farm_id, worker_id, message_id, **kwargs):  # noqa: E501
        """Delete message  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.farms_farm_id_workers_worker_id_messages_message_id_delete(farm_id, worker_id, message_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int farm_id: (required)
        :param int worker_id: (required)
        :param int message_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.farms_farm_id_workers_worker_id_messages_message_id_delete_with_http_info(farm_id, worker_id, message_id, **kwargs)  # noqa: E501
        else:
            (data) = self.farms_farm_id_workers_worker_id_messages_message_id_delete_with_http_info(farm_id, worker_id, message_id, **kwargs)  # noqa: E501
            return data

    def farms_farm_id_workers_worker_id_messages_message_id_delete_with_http_info(self, farm_id, worker_id, message_id, **kwargs):  # noqa: E501
        """Delete message  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.farms_farm_id_workers_worker_id_messages_message_id_delete_with_http_info(farm_id, worker_id, message_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int farm_id: (required)
        :param int worker_id: (required)
        :param int message_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['farm_id', 'worker_id', 'message_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method farms_farm_id_workers_worker_id_messages_message_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'farm_id' is set
        if self.api_client.client_side_validation and ('farm_id' not in params or
                                                       params['farm_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `farm_id` when calling `farms_farm_id_workers_worker_id_messages_message_id_delete`")  # noqa: E501
        # verify the required parameter 'worker_id' is set
        if self.api_client.client_side_validation and ('worker_id' not in params or
                                                       params['worker_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `worker_id` when calling `farms_farm_id_workers_worker_id_messages_message_id_delete`")  # noqa: E501
        # verify the required parameter 'message_id' is set
        if self.api_client.client_side_validation and ('message_id' not in params or
                                                       params['message_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `message_id` when calling `farms_farm_id_workers_worker_id_messages_message_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'farm_id' in params:
            path_params['farmId'] = params['farm_id']  # noqa: E501
        if 'worker_id' in params:
            path_params['workerId'] = params['worker_id']  # noqa: E501
        if 'message_id' in params:
            path_params['messageId'] = params['message_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/farms/{farmId}/workers/{workerId}/messages/{messageId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def farms_farm_id_workers_worker_id_messages_message_id_get(self, farm_id, worker_id, message_id, **kwargs):  # noqa: E501
        """Get worker message  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.farms_farm_id_workers_worker_id_messages_message_id_get(farm_id, worker_id, message_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int farm_id: (required)
        :param int worker_id: (required)
        :param int message_id: (required)
        :return: WorkerMessageFull
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.farms_farm_id_workers_worker_id_messages_message_id_get_with_http_info(farm_id, worker_id, message_id, **kwargs)  # noqa: E501
        else:
            (data) = self.farms_farm_id_workers_worker_id_messages_message_id_get_with_http_info(farm_id, worker_id, message_id, **kwargs)  # noqa: E501
            return data

    def farms_farm_id_workers_worker_id_messages_message_id_get_with_http_info(self, farm_id, worker_id, message_id, **kwargs):  # noqa: E501
        """Get worker message  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.farms_farm_id_workers_worker_id_messages_message_id_get_with_http_info(farm_id, worker_id, message_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int farm_id: (required)
        :param int worker_id: (required)
        :param int message_id: (required)
        :return: WorkerMessageFull
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['farm_id', 'worker_id', 'message_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method farms_farm_id_workers_worker_id_messages_message_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'farm_id' is set
        if self.api_client.client_side_validation and ('farm_id' not in params or
                                                       params['farm_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `farm_id` when calling `farms_farm_id_workers_worker_id_messages_message_id_get`")  # noqa: E501
        # verify the required parameter 'worker_id' is set
        if self.api_client.client_side_validation and ('worker_id' not in params or
                                                       params['worker_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `worker_id` when calling `farms_farm_id_workers_worker_id_messages_message_id_get`")  # noqa: E501
        # verify the required parameter 'message_id' is set
        if self.api_client.client_side_validation and ('message_id' not in params or
                                                       params['message_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `message_id` when calling `farms_farm_id_workers_worker_id_messages_message_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'farm_id' in params:
            path_params['farmId'] = params['farm_id']  # noqa: E501
        if 'worker_id' in params:
            path_params['workerId'] = params['worker_id']  # noqa: E501
        if 'message_id' in params:
            path_params['messageId'] = params['message_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/farms/{farmId}/workers/{workerId}/messages/{messageId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkerMessageFull',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def farms_farm_id_workers_worker_id_metrics_get(self, farm_id, worker_id, **kwargs):  # noqa: E501
        """Worker metrics  # noqa: E501

        Provides metrics for current worker. Data is refreshed every 5 minutes. For 1 week period - metrics are downsampled by 15 minutes. For 1 month period - metrics are downsampled by 1 hour.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.farms_farm_id_workers_worker_id_metrics_get(farm_id, worker_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int farm_id: (required)
        :param int worker_id: (required)
        :param str _date: Start date
        :param str period: Period (1 day, 1 week, 1 month)
        :param int fill_gaps: Fill gaps with empty points
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.farms_farm_id_workers_worker_id_metrics_get_with_http_info(farm_id, worker_id, **kwargs)  # noqa: E501
        else:
            (data) = self.farms_farm_id_workers_worker_id_metrics_get_with_http_info(farm_id, worker_id, **kwargs)  # noqa: E501
            return data

    def farms_farm_id_workers_worker_id_metrics_get_with_http_info(self, farm_id, worker_id, **kwargs):  # noqa: E501
        """Worker metrics  # noqa: E501

        Provides metrics for current worker. Data is refreshed every 5 minutes. For 1 week period - metrics are downsampled by 15 minutes. For 1 month period - metrics are downsampled by 1 hour.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.farms_farm_id_workers_worker_id_metrics_get_with_http_info(farm_id, worker_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int farm_id: (required)
        :param int worker_id: (required)
        :param str _date: Start date
        :param str period: Period (1 day, 1 week, 1 month)
        :param int fill_gaps: Fill gaps with empty points
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['farm_id', 'worker_id', '_date', 'period', 'fill_gaps']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method farms_farm_id_workers_worker_id_metrics_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'farm_id' is set
        if self.api_client.client_side_validation and ('farm_id' not in params or
                                                       params['farm_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `farm_id` when calling `farms_farm_id_workers_worker_id_metrics_get`")  # noqa: E501
        # verify the required parameter 'worker_id' is set
        if self.api_client.client_side_validation and ('worker_id' not in params or
                                                       params['worker_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `worker_id` when calling `farms_farm_id_workers_worker_id_metrics_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'farm_id' in params:
            path_params['farmId'] = params['farm_id']  # noqa: E501
        if 'worker_id' in params:
            path_params['workerId'] = params['worker_id']  # noqa: E501

        query_params = []
        if '_date' in params:
            query_params.append(('date', params['_date']))  # noqa: E501
        if 'period' in params:
            query_params.append(('period', params['period']))  # noqa: E501
        if 'fill_gaps' in params:
            query_params.append(('fill_gaps', params['fill_gaps']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/farms/{farmId}/workers/{workerId}/metrics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def farms_farm_id_workers_worker_id_password_put(self, farm_id, worker_id, **kwargs):  # noqa: E501
        """Update worker password  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.farms_farm_id_workers_worker_id_password_put(farm_id, worker_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int farm_id: (required)
        :param int worker_id: (required)
        :param WorkerEditPassword body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.farms_farm_id_workers_worker_id_password_put_with_http_info(farm_id, worker_id, **kwargs)  # noqa: E501
        else:
            (data) = self.farms_farm_id_workers_worker_id_password_put_with_http_info(farm_id, worker_id, **kwargs)  # noqa: E501
            return data

    def farms_farm_id_workers_worker_id_password_put_with_http_info(self, farm_id, worker_id, **kwargs):  # noqa: E501
        """Update worker password  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.farms_farm_id_workers_worker_id_password_put_with_http_info(farm_id, worker_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int farm_id: (required)
        :param int worker_id: (required)
        :param WorkerEditPassword body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['farm_id', 'worker_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method farms_farm_id_workers_worker_id_password_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'farm_id' is set
        if self.api_client.client_side_validation and ('farm_id' not in params or
                                                       params['farm_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `farm_id` when calling `farms_farm_id_workers_worker_id_password_put`")  # noqa: E501
        # verify the required parameter 'worker_id' is set
        if self.api_client.client_side_validation and ('worker_id' not in params or
                                                       params['worker_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `worker_id` when calling `farms_farm_id_workers_worker_id_password_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'farm_id' in params:
            path_params['farmId'] = params['farm_id']  # noqa: E501
        if 'worker_id' in params:
            path_params['workerId'] = params['worker_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/farms/{farmId}/workers/{workerId}/password', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def farms_farm_id_workers_worker_id_patch(self, farm_id, worker_id, **kwargs):  # noqa: E501
        """Edit worker  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.farms_farm_id_workers_worker_id_patch(farm_id, worker_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int farm_id: (required)
        :param int worker_id: (required)
        :param WorkerEditRequest body:
        :return: WorkerUpdatedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.farms_farm_id_workers_worker_id_patch_with_http_info(farm_id, worker_id, **kwargs)  # noqa: E501
        else:
            (data) = self.farms_farm_id_workers_worker_id_patch_with_http_info(farm_id, worker_id, **kwargs)  # noqa: E501
            return data

    def farms_farm_id_workers_worker_id_patch_with_http_info(self, farm_id, worker_id, **kwargs):  # noqa: E501
        """Edit worker  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.farms_farm_id_workers_worker_id_patch_with_http_info(farm_id, worker_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int farm_id: (required)
        :param int worker_id: (required)
        :param WorkerEditRequest body:
        :return: WorkerUpdatedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['farm_id', 'worker_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method farms_farm_id_workers_worker_id_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'farm_id' is set
        if self.api_client.client_side_validation and ('farm_id' not in params or
                                                       params['farm_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `farm_id` when calling `farms_farm_id_workers_worker_id_patch`")  # noqa: E501
        # verify the required parameter 'worker_id' is set
        if self.api_client.client_side_validation and ('worker_id' not in params or
                                                       params['worker_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `worker_id` when calling `farms_farm_id_workers_worker_id_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'farm_id' in params:
            path_params['farmId'] = params['farm_id']  # noqa: E501
        if 'worker_id' in params:
            path_params['workerId'] = params['worker_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/farms/{farmId}/workers/{workerId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkerUpdatedResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def farms_farm_id_workers_worker_id_personal_settings_patch(self, farm_id, worker_id, **kwargs):  # noqa: E501
        """Update personal settings for the worker  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.farms_farm_id_workers_worker_id_personal_settings_patch(farm_id, worker_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int farm_id: (required)
        :param int worker_id: (required)
        :param FarmPersonalSettings body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.farms_farm_id_workers_worker_id_personal_settings_patch_with_http_info(farm_id, worker_id, **kwargs)  # noqa: E501
        else:
            (data) = self.farms_farm_id_workers_worker_id_personal_settings_patch_with_http_info(farm_id, worker_id, **kwargs)  # noqa: E501
            return data

    def farms_farm_id_workers_worker_id_personal_settings_patch_with_http_info(self, farm_id, worker_id, **kwargs):  # noqa: E501
        """Update personal settings for the worker  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.farms_farm_id_workers_worker_id_personal_settings_patch_with_http_info(farm_id, worker_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int farm_id: (required)
        :param int worker_id: (required)
        :param FarmPersonalSettings body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['farm_id', 'worker_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method farms_farm_id_workers_worker_id_personal_settings_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'farm_id' is set
        if self.api_client.client_side_validation and ('farm_id' not in params or
                                                       params['farm_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `farm_id` when calling `farms_farm_id_workers_worker_id_personal_settings_patch`")  # noqa: E501
        # verify the required parameter 'worker_id' is set
        if self.api_client.client_side_validation and ('worker_id' not in params or
                                                       params['worker_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `worker_id` when calling `farms_farm_id_workers_worker_id_personal_settings_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'farm_id' in params:
            path_params['farmId'] = params['farm_id']  # noqa: E501
        if 'worker_id' in params:
            path_params['workerId'] = params['worker_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/farms/{farmId}/workers/{workerId}/personal_settings', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def farms_farm_id_workers_worker_id_reload_post(self, farm_id, worker_id, **kwargs):  # noqa: E501
        """Reload worker  # noqa: E501

        Send configuration to worker, including flight sheet and overclock  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.farms_farm_id_workers_worker_id_reload_post(farm_id, worker_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int farm_id: (required)
        :param int worker_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.farms_farm_id_workers_worker_id_reload_post_with_http_info(farm_id, worker_id, **kwargs)  # noqa: E501
        else:
            (data) = self.farms_farm_id_workers_worker_id_reload_post_with_http_info(farm_id, worker_id, **kwargs)  # noqa: E501
            return data

    def farms_farm_id_workers_worker_id_reload_post_with_http_info(self, farm_id, worker_id, **kwargs):  # noqa: E501
        """Reload worker  # noqa: E501

        Send configuration to worker, including flight sheet and overclock  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.farms_farm_id_workers_worker_id_reload_post_with_http_info(farm_id, worker_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int farm_id: (required)
        :param int worker_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['farm_id', 'worker_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method farms_farm_id_workers_worker_id_reload_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'farm_id' is set
        if self.api_client.client_side_validation and ('farm_id' not in params or
                                                       params['farm_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `farm_id` when calling `farms_farm_id_workers_worker_id_reload_post`")  # noqa: E501
        # verify the required parameter 'worker_id' is set
        if self.api_client.client_side_validation and ('worker_id' not in params or
                                                       params['worker_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `worker_id` when calling `farms_farm_id_workers_worker_id_reload_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'farm_id' in params:
            path_params['farmId'] = params['farm_id']  # noqa: E501
        if 'worker_id' in params:
            path_params['workerId'] = params['worker_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/farms/{farmId}/workers/{workerId}/reload', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def farms_farm_id_workers_worker_id_transfer_post(self, farm_id, worker_id, **kwargs):  # noqa: E501
        """Transfer worker to another farm  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.farms_farm_id_workers_worker_id_transfer_post(farm_id, worker_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int farm_id: (required)
        :param int worker_id: (required)
        :param WorkerTransferRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.farms_farm_id_workers_worker_id_transfer_post_with_http_info(farm_id, worker_id, **kwargs)  # noqa: E501
        else:
            (data) = self.farms_farm_id_workers_worker_id_transfer_post_with_http_info(farm_id, worker_id, **kwargs)  # noqa: E501
            return data

    def farms_farm_id_workers_worker_id_transfer_post_with_http_info(self, farm_id, worker_id, **kwargs):  # noqa: E501
        """Transfer worker to another farm  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.farms_farm_id_workers_worker_id_transfer_post_with_http_info(farm_id, worker_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int farm_id: (required)
        :param int worker_id: (required)
        :param WorkerTransferRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['farm_id', 'worker_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method farms_farm_id_workers_worker_id_transfer_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'farm_id' is set
        if self.api_client.client_side_validation and ('farm_id' not in params or
                                                       params['farm_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `farm_id` when calling `farms_farm_id_workers_worker_id_transfer_post`")  # noqa: E501
        # verify the required parameter 'worker_id' is set
        if self.api_client.client_side_validation and ('worker_id' not in params or
                                                       params['worker_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `worker_id` when calling `farms_farm_id_workers_worker_id_transfer_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'farm_id' in params:
            path_params['farmId'] = params['farm_id']  # noqa: E501
        if 'worker_id' in params:
            path_params['workerId'] = params['worker_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/farms/{farmId}/workers/{workerId}/transfer', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
