# coding: utf-8

"""
    Hive OS API

    App API for Hive OS 2.0  # noqa: E501

    OpenAPI spec version: 2.1-beta
    Contact: brain@hiveos.farm
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class PoolsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def pools_by_coin_coin_get(self, coin, **kwargs):  # noqa: E501
        """Pool templates which suit coin name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pools_by_coin_coin_get(coin, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str coin: Coin name like \"ETH\" (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pools_by_coin_coin_get_with_http_info(coin, **kwargs)  # noqa: E501
        else:
            (data) = self.pools_by_coin_coin_get_with_http_info(coin, **kwargs)  # noqa: E501
            return data

    def pools_by_coin_coin_get_with_http_info(self, coin, **kwargs):  # noqa: E501
        """Pool templates which suit coin name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pools_by_coin_coin_get_with_http_info(coin, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str coin: Coin name like \"ETH\" (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['coin']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pools_by_coin_coin_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'coin' is set
        if self.api_client.client_side_validation and ('coin' not in params or
                                                       params['coin'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `coin` when calling `pools_by_coin_coin_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'coin' in params:
            path_params['coin'] = params['coin']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/pools/by_coin/{coin}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pools_by_name_pool_get(self, pool, **kwargs):  # noqa: E501
        """Pool templates  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pools_by_name_pool_get(pool, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pool: Pool name like \"nanopool\" (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pools_by_name_pool_get_with_http_info(pool, **kwargs)  # noqa: E501
        else:
            (data) = self.pools_by_name_pool_get_with_http_info(pool, **kwargs)  # noqa: E501
            return data

    def pools_by_name_pool_get_with_http_info(self, pool, **kwargs):  # noqa: E501
        """Pool templates  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pools_by_name_pool_get_with_http_info(pool, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pool: Pool name like \"nanopool\" (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pool']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pools_by_name_pool_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pool' is set
        if self.api_client.client_side_validation and ('pool' not in params or
                                                       params['pool'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `pool` when calling `pools_by_name_pool_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pool' in params:
            path_params['pool'] = params['pool']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/pools/by_name/{pool}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pools_get(self, **kwargs):  # noqa: E501
        """Available pools list and coins that we have in pools  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pools_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pools_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.pools_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def pools_get_with_http_info(self, **kwargs):  # noqa: E501
        """Available pools list and coins that we have in pools  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pools_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pools_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/pools', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
