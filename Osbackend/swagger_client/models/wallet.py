# coding: utf-8

"""
    Hive OS API

    App API for Hive OS 2.0  # noqa: E501

    OpenAPI spec version: 2.1-beta
    Contact: brain@hiveos.farm
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Wallet(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'coin': 'str',
        'name': 'str',
        'wal': 'str',
        'source': 'str',
        'fetch_balance': 'bool',
        'api_key_id': 'int',
        'balance': 'object',
        'pool_balances': 'list[object]',
        'fs_count': 'int',
        'workers_count': 'int'
    }

    attribute_map = {
        'coin': 'coin',
        'name': 'name',
        'wal': 'wal',
        'source': 'source',
        'fetch_balance': 'fetch_balance',
        'api_key_id': 'api_key_id',
        'balance': 'balance',
        'pool_balances': 'pool_balances',
        'fs_count': 'fs_count',
        'workers_count': 'workers_count'
    }

    def __init__(self, coin=None, name=None, wal=None, source=None, fetch_balance=False, api_key_id=None, balance=None, pool_balances=None, fs_count=None, workers_count=None, _configuration=None):  # noqa: E501
        """Wallet - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._coin = None
        self._name = None
        self._wal = None
        self._source = None
        self._fetch_balance = None
        self._api_key_id = None
        self._balance = None
        self._pool_balances = None
        self._fs_count = None
        self._workers_count = None
        self.discriminator = None

        if coin is not None:
            self.coin = coin
        if name is not None:
            self.name = name
        if wal is not None:
            self.wal = wal
        if source is not None:
            self.source = source
        if fetch_balance is not None:
            self.fetch_balance = fetch_balance
        if api_key_id is not None:
            self.api_key_id = api_key_id
        if balance is not None:
            self.balance = balance
        if pool_balances is not None:
            self.pool_balances = pool_balances
        if fs_count is not None:
            self.fs_count = fs_count
        if workers_count is not None:
            self.workers_count = workers_count

    @property
    def coin(self):
        """Gets the coin of this Wallet.  # noqa: E501

        Coin name  # noqa: E501

        :return: The coin of this Wallet.  # noqa: E501
        :rtype: str
        """
        return self._coin

    @coin.setter
    def coin(self, coin):
        """Sets the coin of this Wallet.

        Coin name  # noqa: E501

        :param coin: The coin of this Wallet.  # noqa: E501
        :type: str
        """

        self._coin = coin

    @property
    def name(self):
        """Gets the name of this Wallet.  # noqa: E501

        Display name  # noqa: E501

        :return: The name of this Wallet.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Wallet.

        Display name  # noqa: E501

        :param name: The name of this Wallet.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 100):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")  # noqa: E501

        self._name = name

    @property
    def wal(self):
        """Gets the wal of this Wallet.  # noqa: E501

          # noqa: E501

        :return: The wal of this Wallet.  # noqa: E501
        :rtype: str
        """
        return self._wal

    @wal.setter
    def wal(self, wal):
        """Sets the wal of this Wallet.

          # noqa: E501

        :param wal: The wal of this Wallet.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                wal is not None and len(wal) > 255):
            raise ValueError("Invalid value for `wal`, length must be less than or equal to `255`")  # noqa: E501

        self._wal = wal

    @property
    def source(self):
        """Gets the source of this Wallet.  # noqa: E501

        Wallet source. Can be either exchange name or any string. For supported exchanges see /hive/wallet_sources endpoint.   # noqa: E501

        :return: The source of this Wallet.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Wallet.

        Wallet source. Can be either exchange name or any string. For supported exchanges see /hive/wallet_sources endpoint.   # noqa: E501

        :param source: The source of this Wallet.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                source is not None and len(source) > 100):
            raise ValueError("Invalid value for `source`, length must be less than or equal to `100`")  # noqa: E501

        self._source = source

    @property
    def fetch_balance(self):
        """Gets the fetch_balance of this Wallet.  # noqa: E501

        Try to retrieve wallet balance from blockchain or exchange  # noqa: E501

        :return: The fetch_balance of this Wallet.  # noqa: E501
        :rtype: bool
        """
        return self._fetch_balance

    @fetch_balance.setter
    def fetch_balance(self, fetch_balance):
        """Sets the fetch_balance of this Wallet.

        Try to retrieve wallet balance from blockchain or exchange  # noqa: E501

        :param fetch_balance: The fetch_balance of this Wallet.  # noqa: E501
        :type: bool
        """

        self._fetch_balance = fetch_balance

    @property
    def api_key_id(self):
        """Gets the api_key_id of this Wallet.  # noqa: E501

        ID of attached API key for balance fetching (if required)  # noqa: E501

        :return: The api_key_id of this Wallet.  # noqa: E501
        :rtype: int
        """
        return self._api_key_id

    @api_key_id.setter
    def api_key_id(self, api_key_id):
        """Sets the api_key_id of this Wallet.

        ID of attached API key for balance fetching (if required)  # noqa: E501

        :param api_key_id: The api_key_id of this Wallet.  # noqa: E501
        :type: int
        """

        self._api_key_id = api_key_id

    @property
    def balance(self):
        """Gets the balance of this Wallet.  # noqa: E501

        Wallet balance info. Either balance or status is present, not both. Pending status indicates that the balance is fetching at the moment and will be available soon. Other statuses indicate balance cannot be fetched. Balance info is cached by 30 minutes.   # noqa: E501

        :return: The balance of this Wallet.  # noqa: E501
        :rtype: object
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this Wallet.

        Wallet balance info. Either balance or status is present, not both. Pending status indicates that the balance is fetching at the moment and will be available soon. Other statuses indicate balance cannot be fetched. Balance info is cached by 30 minutes.   # noqa: E501

        :param balance: The balance of this Wallet.  # noqa: E501
        :type: object
        """

        self._balance = balance

    @property
    def pool_balances(self):
        """Gets the pool_balances of this Wallet.  # noqa: E501

        Balances from pools that this wallet uses  # noqa: E501

        :return: The pool_balances of this Wallet.  # noqa: E501
        :rtype: list[object]
        """
        return self._pool_balances

    @pool_balances.setter
    def pool_balances(self, pool_balances):
        """Sets the pool_balances of this Wallet.

        Balances from pools that this wallet uses  # noqa: E501

        :param pool_balances: The pool_balances of this Wallet.  # noqa: E501
        :type: list[object]
        """

        self._pool_balances = pool_balances

    @property
    def fs_count(self):
        """Gets the fs_count of this Wallet.  # noqa: E501

        Amount of flight sheets that use this wallet  # noqa: E501

        :return: The fs_count of this Wallet.  # noqa: E501
        :rtype: int
        """
        return self._fs_count

    @fs_count.setter
    def fs_count(self, fs_count):
        """Sets the fs_count of this Wallet.

        Amount of flight sheets that use this wallet  # noqa: E501

        :param fs_count: The fs_count of this Wallet.  # noqa: E501
        :type: int
        """

        self._fs_count = fs_count

    @property
    def workers_count(self):
        """Gets the workers_count of this Wallet.  # noqa: E501

        Amount of workers that use this wallet  # noqa: E501

        :return: The workers_count of this Wallet.  # noqa: E501
        :rtype: int
        """
        return self._workers_count

    @workers_count.setter
    def workers_count(self, workers_count):
        """Sets the workers_count of this Wallet.

        Amount of workers that use this wallet  # noqa: E501

        :param workers_count: The workers_count of this Wallet.  # noqa: E501
        :type: int
        """

        self._workers_count = workers_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Wallet, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Wallet):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Wallet):
            return True

        return self.to_dict() != other.to_dict()
