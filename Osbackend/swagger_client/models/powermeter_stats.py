# coding: utf-8

"""
    Hive OS API

    App API for Hive OS 2.0  # noqa: E501

    OpenAPI spec version: 2.1-beta
    Contact: brain@hiveos.farm
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class PowermeterStats(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'power': 'list[list[int]]',
        'power_total': 'list[int]',
        'energy_total': 'list[float]'
    }

    attribute_map = {
        'power': 'power',
        'power_total': 'power_total',
        'energy_total': 'energy_total'
    }

    def __init__(self, power=None, power_total=None, energy_total=None, _configuration=None):  # noqa: E501
        """PowermeterStats - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._power = None
        self._power_total = None
        self._energy_total = None
        self.discriminator = None

        if power is not None:
            self.power = power
        if power_total is not None:
            self.power_total = power_total
        if energy_total is not None:
            self.energy_total = energy_total

    @property
    def power(self):
        """Gets the power of this PowermeterStats.  # noqa: E501

        Current power draw, kilowatts (kW)  # noqa: E501

        :return: The power of this PowermeterStats.  # noqa: E501
        :rtype: list[list[int]]
        """
        return self._power

    @power.setter
    def power(self, power):
        """Sets the power of this PowermeterStats.

        Current power draw, kilowatts (kW)  # noqa: E501

        :param power: The power of this PowermeterStats.  # noqa: E501
        :type: list[list[int]]
        """

        self._power = power

    @property
    def power_total(self):
        """Gets the power_total of this PowermeterStats.  # noqa: E501

        Current total power draw, kilowatts (kW)  # noqa: E501

        :return: The power_total of this PowermeterStats.  # noqa: E501
        :rtype: list[int]
        """
        return self._power_total

    @power_total.setter
    def power_total(self, power_total):
        """Sets the power_total of this PowermeterStats.

        Current total power draw, kilowatts (kW)  # noqa: E501

        :param power_total: The power_total of this PowermeterStats.  # noqa: E501
        :type: list[int]
        """

        self._power_total = power_total

    @property
    def energy_total(self):
        """Gets the energy_total of this PowermeterStats.  # noqa: E501

        Power usage value, kilowatthours (kWh)  # noqa: E501

        :return: The energy_total of this PowermeterStats.  # noqa: E501
        :rtype: list[float]
        """
        return self._energy_total

    @energy_total.setter
    def energy_total(self, energy_total):
        """Sets the energy_total of this PowermeterStats.

        Power usage value, kilowatthours (kWh)  # noqa: E501

        :param energy_total: The energy_total of this PowermeterStats.  # noqa: E501
        :type: list[float]
        """

        self._energy_total = energy_total

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PowermeterStats, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PowermeterStats):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PowermeterStats):
            return True

        return self.to_dict() != other.to_dict()
