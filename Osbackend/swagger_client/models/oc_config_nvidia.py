# coding: utf-8

"""
    Hive OS API

    App API for Hive OS 2.0  # noqa: E501

    OpenAPI spec version: 2.1-beta
    Contact: brain@hiveos.farm
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class OCConfigNvidia(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'core_clock': 'str',
        'mem_clock': 'str',
        'fan_speed': 'str',
        'power_limit': 'str',
        'logo_off': 'bool',
        'ohgodapill': 'bool',
        'ohgodapill_start_timeout': 'int',
        'ohgodapill_args': 'str',
        'running_delay': 'int',
        'reduce_power': 'bool',
        'force_p0': 'bool'
    }

    attribute_map = {
        'core_clock': 'core_clock',
        'mem_clock': 'mem_clock',
        'fan_speed': 'fan_speed',
        'power_limit': 'power_limit',
        'logo_off': 'logo_off',
        'ohgodapill': 'ohgodapill',
        'ohgodapill_start_timeout': 'ohgodapill_start_timeout',
        'ohgodapill_args': 'ohgodapill_args',
        'running_delay': 'running_delay',
        'reduce_power': 'reduce_power',
        'force_p0': 'force_p0'
    }

    def __init__(self, core_clock=None, mem_clock=None, fan_speed=None, power_limit=None, logo_off=None, ohgodapill=None, ohgodapill_start_timeout=None, ohgodapill_args=None, running_delay=None, reduce_power=None, force_p0=None, _configuration=None):  # noqa: E501
        """OCConfigNvidia - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._core_clock = None
        self._mem_clock = None
        self._fan_speed = None
        self._power_limit = None
        self._logo_off = None
        self._ohgodapill = None
        self._ohgodapill_start_timeout = None
        self._ohgodapill_args = None
        self._running_delay = None
        self._reduce_power = None
        self._force_p0 = None
        self.discriminator = None

        if core_clock is not None:
            self.core_clock = core_clock
        if mem_clock is not None:
            self.mem_clock = mem_clock
        if fan_speed is not None:
            self.fan_speed = fan_speed
        if power_limit is not None:
            self.power_limit = power_limit
        if logo_off is not None:
            self.logo_off = logo_off
        if ohgodapill is not None:
            self.ohgodapill = ohgodapill
        if ohgodapill_start_timeout is not None:
            self.ohgodapill_start_timeout = ohgodapill_start_timeout
        if ohgodapill_args is not None:
            self.ohgodapill_args = ohgodapill_args
        if running_delay is not None:
            self.running_delay = running_delay
        if reduce_power is not None:
            self.reduce_power = reduce_power
        if force_p0 is not None:
            self.force_p0 = force_p0

    @property
    def core_clock(self):
        """Gets the core_clock of this OCConfigNvidia.  # noqa: E501

        +Core Clock (Mhz)  # noqa: E501

        :return: The core_clock of this OCConfigNvidia.  # noqa: E501
        :rtype: str
        """
        return self._core_clock

    @core_clock.setter
    def core_clock(self, core_clock):
        """Sets the core_clock of this OCConfigNvidia.

        +Core Clock (Mhz)  # noqa: E501

        :param core_clock: The core_clock of this OCConfigNvidia.  # noqa: E501
        :type: str
        """

        self._core_clock = core_clock

    @property
    def mem_clock(self):
        """Gets the mem_clock of this OCConfigNvidia.  # noqa: E501

        +Memory (Mhz)  # noqa: E501

        :return: The mem_clock of this OCConfigNvidia.  # noqa: E501
        :rtype: str
        """
        return self._mem_clock

    @mem_clock.setter
    def mem_clock(self, mem_clock):
        """Sets the mem_clock of this OCConfigNvidia.

        +Memory (Mhz)  # noqa: E501

        :param mem_clock: The mem_clock of this OCConfigNvidia.  # noqa: E501
        :type: str
        """

        self._mem_clock = mem_clock

    @property
    def fan_speed(self):
        """Gets the fan_speed of this OCConfigNvidia.  # noqa: E501

        Fan (%) (0 for auto)  # noqa: E501

        :return: The fan_speed of this OCConfigNvidia.  # noqa: E501
        :rtype: str
        """
        return self._fan_speed

    @fan_speed.setter
    def fan_speed(self, fan_speed):
        """Sets the fan_speed of this OCConfigNvidia.

        Fan (%) (0 for auto)  # noqa: E501

        :param fan_speed: The fan_speed of this OCConfigNvidia.  # noqa: E501
        :type: str
        """

        self._fan_speed = fan_speed

    @property
    def power_limit(self):
        """Gets the power_limit of this OCConfigNvidia.  # noqa: E501

        Power Limit (W) (0 for stock value)  # noqa: E501

        :return: The power_limit of this OCConfigNvidia.  # noqa: E501
        :rtype: str
        """
        return self._power_limit

    @power_limit.setter
    def power_limit(self, power_limit):
        """Sets the power_limit of this OCConfigNvidia.

        Power Limit (W) (0 for stock value)  # noqa: E501

        :param power_limit: The power_limit of this OCConfigNvidia.  # noqa: E501
        :type: str
        """

        self._power_limit = power_limit

    @property
    def logo_off(self):
        """Gets the logo_off of this OCConfigNvidia.  # noqa: E501

        Turn Off LEDs (may not work on some cards)  # noqa: E501

        :return: The logo_off of this OCConfigNvidia.  # noqa: E501
        :rtype: bool
        """
        return self._logo_off

    @logo_off.setter
    def logo_off(self, logo_off):
        """Sets the logo_off of this OCConfigNvidia.

        Turn Off LEDs (may not work on some cards)  # noqa: E501

        :param logo_off: The logo_off of this OCConfigNvidia.  # noqa: E501
        :type: bool
        """

        self._logo_off = logo_off

    @property
    def ohgodapill(self):
        """Gets the ohgodapill of this OCConfigNvidia.  # noqa: E501

        Enable OhGodAnETHlargementPill  # noqa: E501

        :return: The ohgodapill of this OCConfigNvidia.  # noqa: E501
        :rtype: bool
        """
        return self._ohgodapill

    @ohgodapill.setter
    def ohgodapill(self, ohgodapill):
        """Sets the ohgodapill of this OCConfigNvidia.

        Enable OhGodAnETHlargementPill  # noqa: E501

        :param ohgodapill: The ohgodapill of this OCConfigNvidia.  # noqa: E501
        :type: bool
        """

        self._ohgodapill = ohgodapill

    @property
    def ohgodapill_start_timeout(self):
        """Gets the ohgodapill_start_timeout of this OCConfigNvidia.  # noqa: E501

        Timeout to start OhGodAnETHlargementPill, seconds  # noqa: E501

        :return: The ohgodapill_start_timeout of this OCConfigNvidia.  # noqa: E501
        :rtype: int
        """
        return self._ohgodapill_start_timeout

    @ohgodapill_start_timeout.setter
    def ohgodapill_start_timeout(self, ohgodapill_start_timeout):
        """Sets the ohgodapill_start_timeout of this OCConfigNvidia.

        Timeout to start OhGodAnETHlargementPill, seconds  # noqa: E501

        :param ohgodapill_start_timeout: The ohgodapill_start_timeout of this OCConfigNvidia.  # noqa: E501
        :type: int
        """

        self._ohgodapill_start_timeout = ohgodapill_start_timeout

    @property
    def ohgodapill_args(self):
        """Gets the ohgodapill_args of this OCConfigNvidia.  # noqa: E501

        Arguments for OhGodAnETHlargementPill  # noqa: E501

        :return: The ohgodapill_args of this OCConfigNvidia.  # noqa: E501
        :rtype: str
        """
        return self._ohgodapill_args

    @ohgodapill_args.setter
    def ohgodapill_args(self, ohgodapill_args):
        """Sets the ohgodapill_args of this OCConfigNvidia.

        Arguments for OhGodAnETHlargementPill  # noqa: E501

        :param ohgodapill_args: The ohgodapill_args of this OCConfigNvidia.  # noqa: E501
        :type: str
        """

        self._ohgodapill_args = ohgodapill_args

    @property
    def running_delay(self):
        """Gets the running_delay of this OCConfigNvidia.  # noqa: E501

        Delay before applying overclock, seconds  # noqa: E501

        :return: The running_delay of this OCConfigNvidia.  # noqa: E501
        :rtype: int
        """
        return self._running_delay

    @running_delay.setter
    def running_delay(self, running_delay):
        """Sets the running_delay of this OCConfigNvidia.

        Delay before applying overclock, seconds  # noqa: E501

        :param running_delay: The running_delay of this OCConfigNvidia.  # noqa: E501
        :type: int
        """

        self._running_delay = running_delay

    @property
    def reduce_power(self):
        """Gets the reduce_power of this OCConfigNvidia.  # noqa: E501

        Reduce power usage in idle state (1000 series)  # noqa: E501

        :return: The reduce_power of this OCConfigNvidia.  # noqa: E501
        :rtype: bool
        """
        return self._reduce_power

    @reduce_power.setter
    def reduce_power(self, reduce_power):
        """Sets the reduce_power of this OCConfigNvidia.

        Reduce power usage in idle state (1000 series)  # noqa: E501

        :param reduce_power: The reduce_power of this OCConfigNvidia.  # noqa: E501
        :type: bool
        """

        self._reduce_power = reduce_power

    @property
    def force_p0(self):
        """Gets the force_p0 of this OCConfigNvidia.  # noqa: E501

        Force P0 power state  # noqa: E501

        :return: The force_p0 of this OCConfigNvidia.  # noqa: E501
        :rtype: bool
        """
        return self._force_p0

    @force_p0.setter
    def force_p0(self, force_p0):
        """Sets the force_p0 of this OCConfigNvidia.

        Force P0 power state  # noqa: E501

        :param force_p0: The force_p0 of this OCConfigNvidia.  # noqa: E501
        :type: bool
        """

        self._force_p0 = force_p0

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OCConfigNvidia, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OCConfigNvidia):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OCConfigNvidia):
            return True

        return self.to_dict() != other.to_dict()
