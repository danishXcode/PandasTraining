# coding: utf-8

"""
    Hive OS API

    App API for Hive OS 2.0  # noqa: E501

    OpenAPI spec version: 2.1-beta
    Contact: brain@hiveos.farm
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class FarmCreateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'nonfree': 'bool',
        'tag_ids': 'list[int]',
        'hardware_power_draw': 'int',
        'psu_efficiency': 'int',
        'octofan_correct_power': 'bool',
        'auto_tags': 'bool',
        'default_fs': 'dict(str, int)'
    }

    attribute_map = {
        'nonfree': 'nonfree',
        'tag_ids': 'tag_ids',
        'hardware_power_draw': 'hardware_power_draw',
        'psu_efficiency': 'psu_efficiency',
        'octofan_correct_power': 'octofan_correct_power',
        'auto_tags': 'auto_tags',
        'default_fs': 'default_fs'
    }

    def __init__(self, nonfree=None, tag_ids=None, hardware_power_draw=None, psu_efficiency=None, octofan_correct_power=None, auto_tags=None, default_fs=None, _configuration=None):  # noqa: E501
        """FarmCreateRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._nonfree = None
        self._tag_ids = None
        self._hardware_power_draw = None
        self._psu_efficiency = None
        self._octofan_correct_power = None
        self._auto_tags = None
        self._default_fs = None
        self.discriminator = None

        if nonfree is not None:
            self.nonfree = nonfree
        if tag_ids is not None:
            self.tag_ids = tag_ids
        if hardware_power_draw is not None:
            self.hardware_power_draw = hardware_power_draw
        if psu_efficiency is not None:
            self.psu_efficiency = psu_efficiency
        if octofan_correct_power is not None:
            self.octofan_correct_power = octofan_correct_power
        if auto_tags is not None:
            self.auto_tags = auto_tags
        if default_fs is not None:
            self.default_fs = default_fs

    @property
    def nonfree(self):
        """Gets the nonfree of this FarmCreateRequest.  # noqa: E501

        Paid features state  # noqa: E501

        :return: The nonfree of this FarmCreateRequest.  # noqa: E501
        :rtype: bool
        """
        return self._nonfree

    @nonfree.setter
    def nonfree(self, nonfree):
        """Sets the nonfree of this FarmCreateRequest.

        Paid features state  # noqa: E501

        :param nonfree: The nonfree of this FarmCreateRequest.  # noqa: E501
        :type: bool
        """

        self._nonfree = nonfree

    @property
    def tag_ids(self):
        """Gets the tag_ids of this FarmCreateRequest.  # noqa: E501


        :return: The tag_ids of this FarmCreateRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._tag_ids

    @tag_ids.setter
    def tag_ids(self, tag_ids):
        """Sets the tag_ids of this FarmCreateRequest.


        :param tag_ids: The tag_ids of this FarmCreateRequest.  # noqa: E501
        :type: list[int]
        """

        self._tag_ids = tag_ids

    @property
    def hardware_power_draw(self):
        """Gets the hardware_power_draw of this FarmCreateRequest.  # noqa: E501

        Power consumption of worker's hardware, watts  # noqa: E501

        :return: The hardware_power_draw of this FarmCreateRequest.  # noqa: E501
        :rtype: int
        """
        return self._hardware_power_draw

    @hardware_power_draw.setter
    def hardware_power_draw(self, hardware_power_draw):
        """Sets the hardware_power_draw of this FarmCreateRequest.

        Power consumption of worker's hardware, watts  # noqa: E501

        :param hardware_power_draw: The hardware_power_draw of this FarmCreateRequest.  # noqa: E501
        :type: int
        """

        self._hardware_power_draw = hardware_power_draw

    @property
    def psu_efficiency(self):
        """Gets the psu_efficiency of this FarmCreateRequest.  # noqa: E501

        Efficiency of power supply unit, %  # noqa: E501

        :return: The psu_efficiency of this FarmCreateRequest.  # noqa: E501
        :rtype: int
        """
        return self._psu_efficiency

    @psu_efficiency.setter
    def psu_efficiency(self, psu_efficiency):
        """Sets the psu_efficiency of this FarmCreateRequest.

        Efficiency of power supply unit, %  # noqa: E501

        :param psu_efficiency: The psu_efficiency of this FarmCreateRequest.  # noqa: E501
        :type: int
        """

        self._psu_efficiency = psu_efficiency

    @property
    def octofan_correct_power(self):
        """Gets the octofan_correct_power of this FarmCreateRequest.  # noqa: E501

        Apply power correction settings to power consumption value from Octominer fan controller. Default is false.  # noqa: E501

        :return: The octofan_correct_power of this FarmCreateRequest.  # noqa: E501
        :rtype: bool
        """
        return self._octofan_correct_power

    @octofan_correct_power.setter
    def octofan_correct_power(self, octofan_correct_power):
        """Sets the octofan_correct_power of this FarmCreateRequest.

        Apply power correction settings to power consumption value from Octominer fan controller. Default is false.  # noqa: E501

        :param octofan_correct_power: The octofan_correct_power of this FarmCreateRequest.  # noqa: E501
        :type: bool
        """

        self._octofan_correct_power = octofan_correct_power

    @property
    def auto_tags(self):
        """Gets the auto_tags of this FarmCreateRequest.  # noqa: E501

        Auto-tags feature. If enabled - all workers inside the farm are automatically tagged. Rigs are tagged by GPU information such as model name, memory size, OEM, etc. ASICs are tagged by model name.   # noqa: E501

        :return: The auto_tags of this FarmCreateRequest.  # noqa: E501
        :rtype: bool
        """
        return self._auto_tags

    @auto_tags.setter
    def auto_tags(self, auto_tags):
        """Sets the auto_tags of this FarmCreateRequest.

        Auto-tags feature. If enabled - all workers inside the farm are automatically tagged. Rigs are tagged by GPU information such as model name, memory size, OEM, etc. ASICs are tagged by model name.   # noqa: E501

        :param auto_tags: The auto_tags of this FarmCreateRequest.  # noqa: E501
        :type: bool
        """

        self._auto_tags = auto_tags

    @property
    def default_fs(self):
        """Gets the default_fs of this FarmCreateRequest.  # noqa: E501

        Default flight sheets keyed by platform (1 - rig, 2 - asic). These flight sheets will be automatically attached to newly created workers.   # noqa: E501

        :return: The default_fs of this FarmCreateRequest.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._default_fs

    @default_fs.setter
    def default_fs(self, default_fs):
        """Sets the default_fs of this FarmCreateRequest.

        Default flight sheets keyed by platform (1 - rig, 2 - asic). These flight sheets will be automatically attached to newly created workers.   # noqa: E501

        :param default_fs: The default_fs of this FarmCreateRequest.  # noqa: E501
        :type: dict(str, int)
        """

        self._default_fs = default_fs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FarmCreateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FarmCreateRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FarmCreateRequest):
            return True

        return self.to_dict() != other.to_dict()
