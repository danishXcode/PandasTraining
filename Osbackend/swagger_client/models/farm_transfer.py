# coding: utf-8

"""
    Hive OS API

    App API for Hive OS 2.0  # noqa: E501

    OpenAPI spec version: 2.1-beta
    Contact: brain@hiveos.farm
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class FarmTransfer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user': 'object',
        'target_user': 'object',
        'type': 'FarmTransferType',
        'created_at': 'int',
        'expires_at': 'int'
    }

    attribute_map = {
        'user': 'user',
        'target_user': 'target_user',
        'type': 'type',
        'created_at': 'created_at',
        'expires_at': 'expires_at'
    }

    def __init__(self, user=None, target_user=None, type=None, created_at=None, expires_at=None, _configuration=None):  # noqa: E501
        """FarmTransfer - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._user = None
        self._target_user = None
        self._type = None
        self._created_at = None
        self._expires_at = None
        self.discriminator = None

        if user is not None:
            self.user = user
        if target_user is not None:
            self.target_user = target_user
        if type is not None:
            self.type = type
        if created_at is not None:
            self.created_at = created_at
        if expires_at is not None:
            self.expires_at = expires_at

    @property
    def user(self):
        """Gets the user of this FarmTransfer.  # noqa: E501

        Who initiated the request  # noqa: E501

        :return: The user of this FarmTransfer.  # noqa: E501
        :rtype: object
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this FarmTransfer.

        Who initiated the request  # noqa: E501

        :param user: The user of this FarmTransfer.  # noqa: E501
        :type: object
        """

        self._user = user

    @property
    def target_user(self):
        """Gets the target_user of this FarmTransfer.  # noqa: E501

        Who will be new farm's owner  # noqa: E501

        :return: The target_user of this FarmTransfer.  # noqa: E501
        :rtype: object
        """
        return self._target_user

    @target_user.setter
    def target_user(self, target_user):
        """Sets the target_user of this FarmTransfer.

        Who will be new farm's owner  # noqa: E501

        :param target_user: The target_user of this FarmTransfer.  # noqa: E501
        :type: object
        """

        self._target_user = target_user

    @property
    def type(self):
        """Gets the type of this FarmTransfer.  # noqa: E501


        :return: The type of this FarmTransfer.  # noqa: E501
        :rtype: FarmTransferType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FarmTransfer.


        :param type: The type of this FarmTransfer.  # noqa: E501
        :type: FarmTransferType
        """

        self._type = type

    @property
    def created_at(self):
        """Gets the created_at of this FarmTransfer.  # noqa: E501

        When the request was created  # noqa: E501

        :return: The created_at of this FarmTransfer.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this FarmTransfer.

        When the request was created  # noqa: E501

        :param created_at: The created_at of this FarmTransfer.  # noqa: E501
        :type: int
        """

        self._created_at = created_at

    @property
    def expires_at(self):
        """Gets the expires_at of this FarmTransfer.  # noqa: E501

        When the request will expire  # noqa: E501

        :return: The expires_at of this FarmTransfer.  # noqa: E501
        :rtype: int
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this FarmTransfer.

        When the request will expire  # noqa: E501

        :param expires_at: The expires_at of this FarmTransfer.  # noqa: E501
        :type: int
        """

        self._expires_at = expires_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FarmTransfer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FarmTransfer):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FarmTransfer):
            return True

        return self.to_dict() != other.to_dict()
