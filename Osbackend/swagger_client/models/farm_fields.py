# coding: utf-8

"""
    Hive OS API

    App API for Hive OS 2.0  # noqa: E501

    OpenAPI spec version: 2.1-beta
    Contact: brain@hiveos.farm
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class FarmFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'timezone': 'str',
        'gpu_red_temp': 'int',
        'asic_red_temp': 'int',
        'asic_red_board_temp': 'float',
        'gpu_red_mem_temp': 'float',
        'gpu_red_cpu_temp': 'float',
        'gpu_red_fan': 'int',
        'asic_red_fan': 'int',
        'gpu_red_asr': 'int',
        'asic_red_asr': 'int',
        'gpu_red_la': 'float',
        'asic_red_la': 'float',
        'repo_urls': 'list[str]',
        'power_price': 'float',
        'power_price_currency': 'str',
        'charge_on_pool': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'timezone': 'timezone',
        'gpu_red_temp': 'gpu_red_temp',
        'asic_red_temp': 'asic_red_temp',
        'asic_red_board_temp': 'asic_red_board_temp',
        'gpu_red_mem_temp': 'gpu_red_mem_temp',
        'gpu_red_cpu_temp': 'gpu_red_cpu_temp',
        'gpu_red_fan': 'gpu_red_fan',
        'asic_red_fan': 'asic_red_fan',
        'gpu_red_asr': 'gpu_red_asr',
        'asic_red_asr': 'asic_red_asr',
        'gpu_red_la': 'gpu_red_la',
        'asic_red_la': 'asic_red_la',
        'repo_urls': 'repo_urls',
        'power_price': 'power_price',
        'power_price_currency': 'power_price_currency',
        'charge_on_pool': 'charge_on_pool'
    }

    def __init__(self, name=None, timezone=None, gpu_red_temp=None, asic_red_temp=None, asic_red_board_temp=None, gpu_red_mem_temp=None, gpu_red_cpu_temp=None, gpu_red_fan=None, asic_red_fan=None, gpu_red_asr=None, asic_red_asr=None, gpu_red_la=None, asic_red_la=None, repo_urls=None, power_price=None, power_price_currency=None, charge_on_pool=None, _configuration=None):  # noqa: E501
        """FarmFields - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._timezone = None
        self._gpu_red_temp = None
        self._asic_red_temp = None
        self._asic_red_board_temp = None
        self._gpu_red_mem_temp = None
        self._gpu_red_cpu_temp = None
        self._gpu_red_fan = None
        self._asic_red_fan = None
        self._gpu_red_asr = None
        self._asic_red_asr = None
        self._gpu_red_la = None
        self._asic_red_la = None
        self._repo_urls = None
        self._power_price = None
        self._power_price_currency = None
        self._charge_on_pool = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if timezone is not None:
            self.timezone = timezone
        if gpu_red_temp is not None:
            self.gpu_red_temp = gpu_red_temp
        if asic_red_temp is not None:
            self.asic_red_temp = asic_red_temp
        if asic_red_board_temp is not None:
            self.asic_red_board_temp = asic_red_board_temp
        if gpu_red_mem_temp is not None:
            self.gpu_red_mem_temp = gpu_red_mem_temp
        if gpu_red_cpu_temp is not None:
            self.gpu_red_cpu_temp = gpu_red_cpu_temp
        if gpu_red_fan is not None:
            self.gpu_red_fan = gpu_red_fan
        if asic_red_fan is not None:
            self.asic_red_fan = asic_red_fan
        if gpu_red_asr is not None:
            self.gpu_red_asr = gpu_red_asr
        if asic_red_asr is not None:
            self.asic_red_asr = asic_red_asr
        if gpu_red_la is not None:
            self.gpu_red_la = gpu_red_la
        if asic_red_la is not None:
            self.asic_red_la = asic_red_la
        if repo_urls is not None:
            self.repo_urls = repo_urls
        if power_price is not None:
            self.power_price = power_price
        if power_price_currency is not None:
            self.power_price_currency = power_price_currency
        if charge_on_pool is not None:
            self.charge_on_pool = charge_on_pool

    @property
    def name(self):
        """Gets the name of this FarmFields.  # noqa: E501

        Display name  # noqa: E501

        :return: The name of this FarmFields.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FarmFields.

        Display name  # noqa: E501

        :param name: The name of this FarmFields.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 100):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")  # noqa: E501

        self._name = name

    @property
    def timezone(self):
        """Gets the timezone of this FarmFields.  # noqa: E501

        Time zone for all farm workers. Default is account's time zone.  # noqa: E501

        :return: The timezone of this FarmFields.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this FarmFields.

        Time zone for all farm workers. Default is account's time zone.  # noqa: E501

        :param timezone: The timezone of this FarmFields.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    @property
    def gpu_red_temp(self):
        """Gets the gpu_red_temp of this FarmFields.  # noqa: E501

        Red Temperature for GPU workers, °C  # noqa: E501

        :return: The gpu_red_temp of this FarmFields.  # noqa: E501
        :rtype: int
        """
        return self._gpu_red_temp

    @gpu_red_temp.setter
    def gpu_red_temp(self, gpu_red_temp):
        """Sets the gpu_red_temp of this FarmFields.

        Red Temperature for GPU workers, °C  # noqa: E501

        :param gpu_red_temp: The gpu_red_temp of this FarmFields.  # noqa: E501
        :type: int
        """

        self._gpu_red_temp = gpu_red_temp

    @property
    def asic_red_temp(self):
        """Gets the asic_red_temp of this FarmFields.  # noqa: E501

        Red Temperature for ASIC workers, °C  # noqa: E501

        :return: The asic_red_temp of this FarmFields.  # noqa: E501
        :rtype: int
        """
        return self._asic_red_temp

    @asic_red_temp.setter
    def asic_red_temp(self, asic_red_temp):
        """Sets the asic_red_temp of this FarmFields.

        Red Temperature for ASIC workers, °C  # noqa: E501

        :param asic_red_temp: The asic_red_temp of this FarmFields.  # noqa: E501
        :type: int
        """

        self._asic_red_temp = asic_red_temp

    @property
    def asic_red_board_temp(self):
        """Gets the asic_red_board_temp of this FarmFields.  # noqa: E501

        Red Board Temperature for ASIC workers, °C  # noqa: E501

        :return: The asic_red_board_temp of this FarmFields.  # noqa: E501
        :rtype: float
        """
        return self._asic_red_board_temp

    @asic_red_board_temp.setter
    def asic_red_board_temp(self, asic_red_board_temp):
        """Sets the asic_red_board_temp of this FarmFields.

        Red Board Temperature for ASIC workers, °C  # noqa: E501

        :param asic_red_board_temp: The asic_red_board_temp of this FarmFields.  # noqa: E501
        :type: float
        """

        self._asic_red_board_temp = asic_red_board_temp

    @property
    def gpu_red_mem_temp(self):
        """Gets the gpu_red_mem_temp of this FarmFields.  # noqa: E501

        Red memory temperature for GPU workers, °C  # noqa: E501

        :return: The gpu_red_mem_temp of this FarmFields.  # noqa: E501
        :rtype: float
        """
        return self._gpu_red_mem_temp

    @gpu_red_mem_temp.setter
    def gpu_red_mem_temp(self, gpu_red_mem_temp):
        """Sets the gpu_red_mem_temp of this FarmFields.

        Red memory temperature for GPU workers, °C  # noqa: E501

        :param gpu_red_mem_temp: The gpu_red_mem_temp of this FarmFields.  # noqa: E501
        :type: float
        """

        self._gpu_red_mem_temp = gpu_red_mem_temp

    @property
    def gpu_red_cpu_temp(self):
        """Gets the gpu_red_cpu_temp of this FarmFields.  # noqa: E501

        Red CPU temperature for GPU workers, °C  # noqa: E501

        :return: The gpu_red_cpu_temp of this FarmFields.  # noqa: E501
        :rtype: float
        """
        return self._gpu_red_cpu_temp

    @gpu_red_cpu_temp.setter
    def gpu_red_cpu_temp(self, gpu_red_cpu_temp):
        """Sets the gpu_red_cpu_temp of this FarmFields.

        Red CPU temperature for GPU workers, °C  # noqa: E501

        :param gpu_red_cpu_temp: The gpu_red_cpu_temp of this FarmFields.  # noqa: E501
        :type: float
        """

        self._gpu_red_cpu_temp = gpu_red_cpu_temp

    @property
    def gpu_red_fan(self):
        """Gets the gpu_red_fan of this FarmFields.  # noqa: E501

        Red Fan speed for GPU workers, %  # noqa: E501

        :return: The gpu_red_fan of this FarmFields.  # noqa: E501
        :rtype: int
        """
        return self._gpu_red_fan

    @gpu_red_fan.setter
    def gpu_red_fan(self, gpu_red_fan):
        """Sets the gpu_red_fan of this FarmFields.

        Red Fan speed for GPU workers, %  # noqa: E501

        :param gpu_red_fan: The gpu_red_fan of this FarmFields.  # noqa: E501
        :type: int
        """

        self._gpu_red_fan = gpu_red_fan

    @property
    def asic_red_fan(self):
        """Gets the asic_red_fan of this FarmFields.  # noqa: E501

        Red Fan speed for ASIC workers, %  # noqa: E501

        :return: The asic_red_fan of this FarmFields.  # noqa: E501
        :rtype: int
        """
        return self._asic_red_fan

    @asic_red_fan.setter
    def asic_red_fan(self, asic_red_fan):
        """Sets the asic_red_fan of this FarmFields.

        Red Fan speed for ASIC workers, %  # noqa: E501

        :param asic_red_fan: The asic_red_fan of this FarmFields.  # noqa: E501
        :type: int
        """

        self._asic_red_fan = asic_red_fan

    @property
    def gpu_red_asr(self):
        """Gets the gpu_red_asr of this FarmFields.  # noqa: E501

        Red Accepted Shares Ratio for GPU workers, %  # noqa: E501

        :return: The gpu_red_asr of this FarmFields.  # noqa: E501
        :rtype: int
        """
        return self._gpu_red_asr

    @gpu_red_asr.setter
    def gpu_red_asr(self, gpu_red_asr):
        """Sets the gpu_red_asr of this FarmFields.

        Red Accepted Shares Ratio for GPU workers, %  # noqa: E501

        :param gpu_red_asr: The gpu_red_asr of this FarmFields.  # noqa: E501
        :type: int
        """

        self._gpu_red_asr = gpu_red_asr

    @property
    def asic_red_asr(self):
        """Gets the asic_red_asr of this FarmFields.  # noqa: E501

        Red Accepted Shares Ratio for ASIC workers, %  # noqa: E501

        :return: The asic_red_asr of this FarmFields.  # noqa: E501
        :rtype: int
        """
        return self._asic_red_asr

    @asic_red_asr.setter
    def asic_red_asr(self, asic_red_asr):
        """Sets the asic_red_asr of this FarmFields.

        Red Accepted Shares Ratio for ASIC workers, %  # noqa: E501

        :param asic_red_asr: The asic_red_asr of this FarmFields.  # noqa: E501
        :type: int
        """

        self._asic_red_asr = asic_red_asr

    @property
    def gpu_red_la(self):
        """Gets the gpu_red_la of this FarmFields.  # noqa: E501

        Red Load Average per one CPU core for GPU workers  # noqa: E501

        :return: The gpu_red_la of this FarmFields.  # noqa: E501
        :rtype: float
        """
        return self._gpu_red_la

    @gpu_red_la.setter
    def gpu_red_la(self, gpu_red_la):
        """Sets the gpu_red_la of this FarmFields.

        Red Load Average per one CPU core for GPU workers  # noqa: E501

        :param gpu_red_la: The gpu_red_la of this FarmFields.  # noqa: E501
        :type: float
        """

        self._gpu_red_la = gpu_red_la

    @property
    def asic_red_la(self):
        """Gets the asic_red_la of this FarmFields.  # noqa: E501

        Red Load Average per one CPU core for ASIC workers  # noqa: E501

        :return: The asic_red_la of this FarmFields.  # noqa: E501
        :rtype: float
        """
        return self._asic_red_la

    @asic_red_la.setter
    def asic_red_la(self, asic_red_la):
        """Sets the asic_red_la of this FarmFields.

        Red Load Average per one CPU core for ASIC workers  # noqa: E501

        :param asic_red_la: The asic_red_la of this FarmFields.  # noqa: E501
        :type: float
        """

        self._asic_red_la = asic_red_la

    @property
    def repo_urls(self):
        """Gets the repo_urls of this FarmFields.  # noqa: E501

        Package repository URL list. Use this to override default list.  # noqa: E501

        :return: The repo_urls of this FarmFields.  # noqa: E501
        :rtype: list[str]
        """
        return self._repo_urls

    @repo_urls.setter
    def repo_urls(self, repo_urls):
        """Sets the repo_urls of this FarmFields.

        Package repository URL list. Use this to override default list.  # noqa: E501

        :param repo_urls: The repo_urls of this FarmFields.  # noqa: E501
        :type: list[str]
        """

        self._repo_urls = repo_urls

    @property
    def power_price(self):
        """Gets the power_price of this FarmFields.  # noqa: E501

        Electricity price per kilowatt hour  # noqa: E501

        :return: The power_price of this FarmFields.  # noqa: E501
        :rtype: float
        """
        return self._power_price

    @power_price.setter
    def power_price(self, power_price):
        """Sets the power_price of this FarmFields.

        Electricity price per kilowatt hour  # noqa: E501

        :param power_price: The power_price of this FarmFields.  # noqa: E501
        :type: float
        """

        self._power_price = power_price

    @property
    def power_price_currency(self):
        """Gets the power_price_currency of this FarmFields.  # noqa: E501

        Currency of electricity price  # noqa: E501

        :return: The power_price_currency of this FarmFields.  # noqa: E501
        :rtype: str
        """
        return self._power_price_currency

    @power_price_currency.setter
    def power_price_currency(self, power_price_currency):
        """Sets the power_price_currency of this FarmFields.

        Currency of electricity price  # noqa: E501

        :param power_price_currency: The power_price_currency of this FarmFields.  # noqa: E501
        :type: str
        """

        self._power_price_currency = power_price_currency

    @property
    def charge_on_pool(self):
        """Gets the charge_on_pool of this FarmFields.  # noqa: E501

        Enable charging on brand pool  # noqa: E501

        :return: The charge_on_pool of this FarmFields.  # noqa: E501
        :rtype: bool
        """
        return self._charge_on_pool

    @charge_on_pool.setter
    def charge_on_pool(self, charge_on_pool):
        """Sets the charge_on_pool of this FarmFields.

        Enable charging on brand pool  # noqa: E501

        :param charge_on_pool: The charge_on_pool of this FarmFields.  # noqa: E501
        :type: bool
        """

        self._charge_on_pool = charge_on_pool

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FarmFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FarmFields):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FarmFields):
            return True

        return self.to_dict() != other.to_dict()
