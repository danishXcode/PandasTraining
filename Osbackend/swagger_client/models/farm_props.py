# coding: utf-8

"""
    Hive OS API

    App API for Hive OS 2.0  # noqa: E501

    OpenAPI spec version: 2.1-beta
    Contact: brain@hiveos.farm
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class FarmProps(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'locked': 'bool',
        'twofa_required': 'bool',
        'trusted': 'bool',
        'owner': 'object',
        'payer': 'object',
        'personal_settings': 'object'
    }

    attribute_map = {
        'locked': 'locked',
        'twofa_required': 'twofa_required',
        'trusted': 'trusted',
        'owner': 'owner',
        'payer': 'payer',
        'personal_settings': 'personal_settings'
    }

    def __init__(self, locked=None, twofa_required=None, trusted=None, owner=None, payer=None, personal_settings=None, _configuration=None):  # noqa: E501
        """FarmProps - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._locked = None
        self._twofa_required = None
        self._trusted = None
        self._owner = None
        self._payer = None
        self._personal_settings = None
        self.discriminator = None

        if locked is not None:
            self.locked = locked
        if twofa_required is not None:
            self.twofa_required = twofa_required
        if trusted is not None:
            self.trusted = trusted
        if owner is not None:
            self.owner = owner
        if payer is not None:
            self.payer = payer
        if personal_settings is not None:
            self.personal_settings = personal_settings

    @property
    def locked(self):
        """Gets the locked of this FarmProps.  # noqa: E501

        Farm is locked due to exceeding overdraft limit  # noqa: E501

        :return: The locked of this FarmProps.  # noqa: E501
        :rtype: bool
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this FarmProps.

        Farm is locked due to exceeding overdraft limit  # noqa: E501

        :param locked: The locked of this FarmProps.  # noqa: E501
        :type: bool
        """

        self._locked = locked

    @property
    def twofa_required(self):
        """Gets the twofa_required of this FarmProps.  # noqa: E501

        2FA is required for update operations (if not owner)  # noqa: E501

        :return: The twofa_required of this FarmProps.  # noqa: E501
        :rtype: bool
        """
        return self._twofa_required

    @twofa_required.setter
    def twofa_required(self, twofa_required):
        """Sets the twofa_required of this FarmProps.

        2FA is required for update operations (if not owner)  # noqa: E501

        :param twofa_required: The twofa_required of this FarmProps.  # noqa: E501
        :type: bool
        """

        self._twofa_required = twofa_required

    @property
    def trusted(self):
        """Gets the trusted of this FarmProps.  # noqa: E501

        Farm is trusted (if not owner)  # noqa: E501

        :return: The trusted of this FarmProps.  # noqa: E501
        :rtype: bool
        """
        return self._trusted

    @trusted.setter
    def trusted(self, trusted):
        """Sets the trusted of this FarmProps.

        Farm is trusted (if not owner)  # noqa: E501

        :param trusted: The trusted of this FarmProps.  # noqa: E501
        :type: bool
        """

        self._trusted = trusted

    @property
    def owner(self):
        """Gets the owner of this FarmProps.  # noqa: E501

        Who owns the farm  # noqa: E501

        :return: The owner of this FarmProps.  # noqa: E501
        :rtype: object
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this FarmProps.

        Who owns the farm  # noqa: E501

        :param owner: The owner of this FarmProps.  # noqa: E501
        :type: object
        """

        self._owner = owner

    @property
    def payer(self):
        """Gets the payer of this FarmProps.  # noqa: E501

        Who pays for the farm. If not set - owner is the payer.  # noqa: E501

        :return: The payer of this FarmProps.  # noqa: E501
        :rtype: object
        """
        return self._payer

    @payer.setter
    def payer(self, payer):
        """Sets the payer of this FarmProps.

        Who pays for the farm. If not set - owner is the payer.  # noqa: E501

        :param payer: The payer of this FarmProps.  # noqa: E501
        :type: object
        """

        self._payer = payer

    @property
    def personal_settings(self):
        """Gets the personal_settings of this FarmProps.  # noqa: E501

        Personal settings for current user  # noqa: E501

        :return: The personal_settings of this FarmProps.  # noqa: E501
        :rtype: object
        """
        return self._personal_settings

    @personal_settings.setter
    def personal_settings(self, personal_settings):
        """Sets the personal_settings of this FarmProps.

        Personal settings for current user  # noqa: E501

        :param personal_settings: The personal_settings of this FarmProps.  # noqa: E501
        :type: object
        """

        self._personal_settings = personal_settings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FarmProps, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FarmProps):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FarmProps):
            return True

        return self.to_dict() != other.to_dict()
