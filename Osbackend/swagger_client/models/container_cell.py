# coding: utf-8

"""
    Hive OS API

    App API for Hive OS 2.0  # noqa: E501

    OpenAPI spec version: 2.1-beta
    Contact: brain@hiveos.farm
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ContainerCell(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'position': 'ContainerCellPosition',
        'worker_id': 'int',
        'container_id': 'int'
    }

    attribute_map = {
        'position': 'position',
        'worker_id': 'worker_id',
        'container_id': 'container_id'
    }

    def __init__(self, position=None, worker_id=None, container_id=None, _configuration=None):  # noqa: E501
        """ContainerCell - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._position = None
        self._worker_id = None
        self._container_id = None
        self.discriminator = None

        if position is not None:
            self.position = position
        if worker_id is not None:
            self.worker_id = worker_id
        if container_id is not None:
            self.container_id = container_id

    @property
    def position(self):
        """Gets the position of this ContainerCell.  # noqa: E501


        :return: The position of this ContainerCell.  # noqa: E501
        :rtype: ContainerCellPosition
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this ContainerCell.


        :param position: The position of this ContainerCell.  # noqa: E501
        :type: ContainerCellPosition
        """

        self._position = position

    @property
    def worker_id(self):
        """Gets the worker_id of this ContainerCell.  # noqa: E501

        Attached worker ID  # noqa: E501

        :return: The worker_id of this ContainerCell.  # noqa: E501
        :rtype: int
        """
        return self._worker_id

    @worker_id.setter
    def worker_id(self, worker_id):
        """Sets the worker_id of this ContainerCell.

        Attached worker ID  # noqa: E501

        :param worker_id: The worker_id of this ContainerCell.  # noqa: E501
        :type: int
        """

        self._worker_id = worker_id

    @property
    def container_id(self):
        """Gets the container_id of this ContainerCell.  # noqa: E501

        Attached nested container ID  # noqa: E501

        :return: The container_id of this ContainerCell.  # noqa: E501
        :rtype: int
        """
        return self._container_id

    @container_id.setter
    def container_id(self, container_id):
        """Sets the container_id of this ContainerCell.

        Attached nested container ID  # noqa: E501

        :param container_id: The container_id of this ContainerCell.  # noqa: E501
        :type: int
        """

        self._container_id = container_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContainerCell, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContainerCell):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ContainerCell):
            return True

        return self.to_dict() != other.to_dict()
