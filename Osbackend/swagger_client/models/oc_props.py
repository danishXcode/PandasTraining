# coding: utf-8

"""
    Hive OS API

    App API for Hive OS 2.0  # noqa: E501

    OpenAPI spec version: 2.1-beta
    Contact: brain@hiveos.farm
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class OCProps(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amd': 'OCConfigAmd',
        'nvidia': 'OCConfigNvidia',
        'asic': 'OCConfigAsic',
        'tweakers': 'OCConfigTweakers'
    }

    attribute_map = {
        'amd': 'amd',
        'nvidia': 'nvidia',
        'asic': 'asic',
        'tweakers': 'tweakers'
    }

    def __init__(self, amd=None, nvidia=None, asic=None, tweakers=None, _configuration=None):  # noqa: E501
        """OCProps - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._amd = None
        self._nvidia = None
        self._asic = None
        self._tweakers = None
        self.discriminator = None

        if amd is not None:
            self.amd = amd
        if nvidia is not None:
            self.nvidia = nvidia
        if asic is not None:
            self.asic = asic
        if tweakers is not None:
            self.tweakers = tweakers

    @property
    def amd(self):
        """Gets the amd of this OCProps.  # noqa: E501


        :return: The amd of this OCProps.  # noqa: E501
        :rtype: OCConfigAmd
        """
        return self._amd

    @amd.setter
    def amd(self, amd):
        """Sets the amd of this OCProps.


        :param amd: The amd of this OCProps.  # noqa: E501
        :type: OCConfigAmd
        """

        self._amd = amd

    @property
    def nvidia(self):
        """Gets the nvidia of this OCProps.  # noqa: E501


        :return: The nvidia of this OCProps.  # noqa: E501
        :rtype: OCConfigNvidia
        """
        return self._nvidia

    @nvidia.setter
    def nvidia(self, nvidia):
        """Sets the nvidia of this OCProps.


        :param nvidia: The nvidia of this OCProps.  # noqa: E501
        :type: OCConfigNvidia
        """

        self._nvidia = nvidia

    @property
    def asic(self):
        """Gets the asic of this OCProps.  # noqa: E501


        :return: The asic of this OCProps.  # noqa: E501
        :rtype: OCConfigAsic
        """
        return self._asic

    @asic.setter
    def asic(self, asic):
        """Sets the asic of this OCProps.


        :param asic: The asic of this OCProps.  # noqa: E501
        :type: OCConfigAsic
        """

        self._asic = asic

    @property
    def tweakers(self):
        """Gets the tweakers of this OCProps.  # noqa: E501


        :return: The tweakers of this OCProps.  # noqa: E501
        :rtype: OCConfigTweakers
        """
        return self._tweakers

    @tweakers.setter
    def tweakers(self, tweakers):
        """Sets the tweakers of this OCProps.


        :param tweakers: The tweakers of this OCProps.  # noqa: E501
        :type: OCConfigTweakers
        """

        self._tweakers = tweakers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OCProps, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OCProps):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OCProps):
            return True

        return self.to_dict() != other.to_dict()
