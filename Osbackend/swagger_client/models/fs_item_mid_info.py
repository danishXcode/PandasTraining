# coding: utf-8

"""
    Hive OS API

    App API for Hive OS 2.0  # noqa: E501

    OpenAPI spec version: 2.1-beta
    Contact: brain@hiveos.farm
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class FSItemMidInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'coin': 'str',
        'pool': 'str',
        'wal_id': 'int',
        'dcoin': 'str',
        'dpool': 'str',
        'dwal_id': 'int',
        'miner': 'MinerName',
        'miner_alt': 'str'
    }

    attribute_map = {
        'coin': 'coin',
        'pool': 'pool',
        'wal_id': 'wal_id',
        'dcoin': 'dcoin',
        'dpool': 'dpool',
        'dwal_id': 'dwal_id',
        'miner': 'miner',
        'miner_alt': 'miner_alt'
    }

    def __init__(self, coin=None, pool=None, wal_id=None, dcoin=None, dpool=None, dwal_id=None, miner=None, miner_alt=None, _configuration=None):  # noqa: E501
        """FSItemMidInfo - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._coin = None
        self._pool = None
        self._wal_id = None
        self._dcoin = None
        self._dpool = None
        self._dwal_id = None
        self._miner = None
        self._miner_alt = None
        self.discriminator = None

        if coin is not None:
            self.coin = coin
        if pool is not None:
            self.pool = pool
        if wal_id is not None:
            self.wal_id = wal_id
        if dcoin is not None:
            self.dcoin = dcoin
        if dpool is not None:
            self.dpool = dpool
        if dwal_id is not None:
            self.dwal_id = dwal_id
        if miner is not None:
            self.miner = miner
        if miner_alt is not None:
            self.miner_alt = miner_alt

    @property
    def coin(self):
        """Gets the coin of this FSItemMidInfo.  # noqa: E501

        Coin name  # noqa: E501

        :return: The coin of this FSItemMidInfo.  # noqa: E501
        :rtype: str
        """
        return self._coin

    @coin.setter
    def coin(self, coin):
        """Sets the coin of this FSItemMidInfo.

        Coin name  # noqa: E501

        :param coin: The coin of this FSItemMidInfo.  # noqa: E501
        :type: str
        """

        self._coin = coin

    @property
    def pool(self):
        """Gets the pool of this FSItemMidInfo.  # noqa: E501

        Pool name  # noqa: E501

        :return: The pool of this FSItemMidInfo.  # noqa: E501
        :rtype: str
        """
        return self._pool

    @pool.setter
    def pool(self, pool):
        """Sets the pool of this FSItemMidInfo.

        Pool name  # noqa: E501

        :param pool: The pool of this FSItemMidInfo.  # noqa: E501
        :type: str
        """

        self._pool = pool

    @property
    def wal_id(self):
        """Gets the wal_id of this FSItemMidInfo.  # noqa: E501

        Wallet ID  # noqa: E501

        :return: The wal_id of this FSItemMidInfo.  # noqa: E501
        :rtype: int
        """
        return self._wal_id

    @wal_id.setter
    def wal_id(self, wal_id):
        """Sets the wal_id of this FSItemMidInfo.

        Wallet ID  # noqa: E501

        :param wal_id: The wal_id of this FSItemMidInfo.  # noqa: E501
        :type: int
        """

        self._wal_id = wal_id

    @property
    def dcoin(self):
        """Gets the dcoin of this FSItemMidInfo.  # noqa: E501

        Second coin name for dual miner  # noqa: E501

        :return: The dcoin of this FSItemMidInfo.  # noqa: E501
        :rtype: str
        """
        return self._dcoin

    @dcoin.setter
    def dcoin(self, dcoin):
        """Sets the dcoin of this FSItemMidInfo.

        Second coin name for dual miner  # noqa: E501

        :param dcoin: The dcoin of this FSItemMidInfo.  # noqa: E501
        :type: str
        """

        self._dcoin = dcoin

    @property
    def dpool(self):
        """Gets the dpool of this FSItemMidInfo.  # noqa: E501

        Second pool name for dual miner  # noqa: E501

        :return: The dpool of this FSItemMidInfo.  # noqa: E501
        :rtype: str
        """
        return self._dpool

    @dpool.setter
    def dpool(self, dpool):
        """Sets the dpool of this FSItemMidInfo.

        Second pool name for dual miner  # noqa: E501

        :param dpool: The dpool of this FSItemMidInfo.  # noqa: E501
        :type: str
        """

        self._dpool = dpool

    @property
    def dwal_id(self):
        """Gets the dwal_id of this FSItemMidInfo.  # noqa: E501

        Second wallet ID  # noqa: E501

        :return: The dwal_id of this FSItemMidInfo.  # noqa: E501
        :rtype: int
        """
        return self._dwal_id

    @dwal_id.setter
    def dwal_id(self, dwal_id):
        """Sets the dwal_id of this FSItemMidInfo.

        Second wallet ID  # noqa: E501

        :param dwal_id: The dwal_id of this FSItemMidInfo.  # noqa: E501
        :type: int
        """

        self._dwal_id = dwal_id

    @property
    def miner(self):
        """Gets the miner of this FSItemMidInfo.  # noqa: E501


        :return: The miner of this FSItemMidInfo.  # noqa: E501
        :rtype: MinerName
        """
        return self._miner

    @miner.setter
    def miner(self, miner):
        """Sets the miner of this FSItemMidInfo.


        :param miner: The miner of this FSItemMidInfo.  # noqa: E501
        :type: MinerName
        """

        self._miner = miner

    @property
    def miner_alt(self):
        """Gets the miner_alt of this FSItemMidInfo.  # noqa: E501

        Additional text for miner name. For example fork name or veersion.  # noqa: E501

        :return: The miner_alt of this FSItemMidInfo.  # noqa: E501
        :rtype: str
        """
        return self._miner_alt

    @miner_alt.setter
    def miner_alt(self, miner_alt):
        """Sets the miner_alt of this FSItemMidInfo.

        Additional text for miner name. For example fork name or veersion.  # noqa: E501

        :param miner_alt: The miner_alt of this FSItemMidInfo.  # noqa: E501
        :type: str
        """

        self._miner_alt = miner_alt

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FSItemMidInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FSItemMidInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FSItemMidInfo):
            return True

        return self.to_dict() != other.to_dict()
