# coding: utf-8

"""
    Hive OS API

    App API for Hive OS 2.0  # noqa: E501

    OpenAPI spec version: 2.1-beta
    Contact: brain@hiveos.farm
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class WorkerMetric(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'time': 'int',
        'units': 'int',
        'temp': 'list[int]',
        'fan': 'list[int]',
        'power': 'float',
        'hashrates': 'list[object]',
        'fanflap': 'FanflapStats',
        'powermeter': 'PowermeterStats'
    }

    attribute_map = {
        'time': 'time',
        'units': 'units',
        'temp': 'temp',
        'fan': 'fan',
        'power': 'power',
        'hashrates': 'hashrates',
        'fanflap': 'fanflap',
        'powermeter': 'powermeter'
    }

    def __init__(self, time=None, units=None, temp=None, fan=None, power=None, hashrates=None, fanflap=None, powermeter=None, _configuration=None):  # noqa: E501
        """WorkerMetric - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._time = None
        self._units = None
        self._temp = None
        self._fan = None
        self._power = None
        self._hashrates = None
        self._fanflap = None
        self._powermeter = None
        self.discriminator = None

        if time is not None:
            self.time = time
        if units is not None:
            self.units = units
        if temp is not None:
            self.temp = temp
        if fan is not None:
            self.fan = fan
        if power is not None:
            self.power = power
        if hashrates is not None:
            self.hashrates = hashrates
        if fanflap is not None:
            self.fanflap = fanflap
        if powermeter is not None:
            self.powermeter = powermeter

    @property
    def time(self):
        """Gets the time of this WorkerMetric.  # noqa: E501


        :return: The time of this WorkerMetric.  # noqa: E501
        :rtype: int
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this WorkerMetric.


        :param time: The time of this WorkerMetric.  # noqa: E501
        :type: int
        """

        self._time = time

    @property
    def units(self):
        """Gets the units of this WorkerMetric.  # noqa: E501

        GPUs or ASIC boards count  # noqa: E501

        :return: The units of this WorkerMetric.  # noqa: E501
        :rtype: int
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this WorkerMetric.

        GPUs or ASIC boards count  # noqa: E501

        :param units: The units of this WorkerMetric.  # noqa: E501
        :type: int
        """

        self._units = units

    @property
    def temp(self):
        """Gets the temp of this WorkerMetric.  # noqa: E501

        Temperature, °C  # noqa: E501

        :return: The temp of this WorkerMetric.  # noqa: E501
        :rtype: list[int]
        """
        return self._temp

    @temp.setter
    def temp(self, temp):
        """Sets the temp of this WorkerMetric.

        Temperature, °C  # noqa: E501

        :param temp: The temp of this WorkerMetric.  # noqa: E501
        :type: list[int]
        """

        self._temp = temp

    @property
    def fan(self):
        """Gets the fan of this WorkerMetric.  # noqa: E501

        Fan speed  # noqa: E501

        :return: The fan of this WorkerMetric.  # noqa: E501
        :rtype: list[int]
        """
        return self._fan

    @fan.setter
    def fan(self, fan):
        """Sets the fan of this WorkerMetric.

        Fan speed  # noqa: E501

        :param fan: The fan of this WorkerMetric.  # noqa: E501
        :type: list[int]
        """

        self._fan = fan

    @property
    def power(self):
        """Gets the power of this WorkerMetric.  # noqa: E501

        Total power draw, watts  # noqa: E501

        :return: The power of this WorkerMetric.  # noqa: E501
        :rtype: float
        """
        return self._power

    @power.setter
    def power(self, power):
        """Sets the power of this WorkerMetric.

        Total power draw, watts  # noqa: E501

        :param power: The power of this WorkerMetric.  # noqa: E501
        :type: float
        """

        self._power = power

    @property
    def hashrates(self):
        """Gets the hashrates of this WorkerMetric.  # noqa: E501

        Hashrates by algorithm  # noqa: E501

        :return: The hashrates of this WorkerMetric.  # noqa: E501
        :rtype: list[object]
        """
        return self._hashrates

    @hashrates.setter
    def hashrates(self, hashrates):
        """Sets the hashrates of this WorkerMetric.

        Hashrates by algorithm  # noqa: E501

        :param hashrates: The hashrates of this WorkerMetric.  # noqa: E501
        :type: list[object]
        """

        self._hashrates = hashrates

    @property
    def fanflap(self):
        """Gets the fanflap of this WorkerMetric.  # noqa: E501


        :return: The fanflap of this WorkerMetric.  # noqa: E501
        :rtype: FanflapStats
        """
        return self._fanflap

    @fanflap.setter
    def fanflap(self, fanflap):
        """Sets the fanflap of this WorkerMetric.


        :param fanflap: The fanflap of this WorkerMetric.  # noqa: E501
        :type: FanflapStats
        """

        self._fanflap = fanflap

    @property
    def powermeter(self):
        """Gets the powermeter of this WorkerMetric.  # noqa: E501


        :return: The powermeter of this WorkerMetric.  # noqa: E501
        :rtype: PowermeterStats
        """
        return self._powermeter

    @powermeter.setter
    def powermeter(self, powermeter):
        """Sets the powermeter of this WorkerMetric.


        :param powermeter: The powermeter of this WorkerMetric.  # noqa: E501
        :type: PowermeterStats
        """

        self._powermeter = powermeter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WorkerMetric, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkerMetric):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WorkerMetric):
            return True

        return self.to_dict() != other.to_dict()
