# coding: utf-8

"""
    Hive OS API

    App API for Hive OS 2.0  # noqa: E501

    OpenAPI spec version: 2.1-beta
    Contact: brain@hiveos.farm
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class GpuStats(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'temp': 'int',
        'fan': 'int',
        'power': 'int',
        'coreclk': 'int',
        'memclk': 'int',
        'memtemp': 'int'
    }

    attribute_map = {
        'temp': 'temp',
        'fan': 'fan',
        'power': 'power',
        'coreclk': 'coreclk',
        'memclk': 'memclk',
        'memtemp': 'memtemp'
    }

    def __init__(self, temp=None, fan=None, power=None, coreclk=None, memclk=None, memtemp=None, _configuration=None):  # noqa: E501
        """GpuStats - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._temp = None
        self._fan = None
        self._power = None
        self._coreclk = None
        self._memclk = None
        self._memtemp = None
        self.discriminator = None

        if temp is not None:
            self.temp = temp
        if fan is not None:
            self.fan = fan
        if power is not None:
            self.power = power
        if coreclk is not None:
            self.coreclk = coreclk
        if memclk is not None:
            self.memclk = memclk
        if memtemp is not None:
            self.memtemp = memtemp

    @property
    def temp(self):
        """Gets the temp of this GpuStats.  # noqa: E501

        Temperature, 째C  # noqa: E501

        :return: The temp of this GpuStats.  # noqa: E501
        :rtype: int
        """
        return self._temp

    @temp.setter
    def temp(self, temp):
        """Sets the temp of this GpuStats.

        Temperature, 째C  # noqa: E501

        :param temp: The temp of this GpuStats.  # noqa: E501
        :type: int
        """

        self._temp = temp

    @property
    def fan(self):
        """Gets the fan of this GpuStats.  # noqa: E501

        Fan speed, %  # noqa: E501

        :return: The fan of this GpuStats.  # noqa: E501
        :rtype: int
        """
        return self._fan

    @fan.setter
    def fan(self, fan):
        """Sets the fan of this GpuStats.

        Fan speed, %  # noqa: E501

        :param fan: The fan of this GpuStats.  # noqa: E501
        :type: int
        """

        self._fan = fan

    @property
    def power(self):
        """Gets the power of this GpuStats.  # noqa: E501

        Power draw, watts  # noqa: E501

        :return: The power of this GpuStats.  # noqa: E501
        :rtype: int
        """
        return self._power

    @power.setter
    def power(self, power):
        """Sets the power of this GpuStats.

        Power draw, watts  # noqa: E501

        :param power: The power of this GpuStats.  # noqa: E501
        :type: int
        """

        self._power = power

    @property
    def coreclk(self):
        """Gets the coreclk of this GpuStats.  # noqa: E501

        Core clock, MHz  # noqa: E501

        :return: The coreclk of this GpuStats.  # noqa: E501
        :rtype: int
        """
        return self._coreclk

    @coreclk.setter
    def coreclk(self, coreclk):
        """Sets the coreclk of this GpuStats.

        Core clock, MHz  # noqa: E501

        :param coreclk: The coreclk of this GpuStats.  # noqa: E501
        :type: int
        """

        self._coreclk = coreclk

    @property
    def memclk(self):
        """Gets the memclk of this GpuStats.  # noqa: E501

        Memory clock, MHz  # noqa: E501

        :return: The memclk of this GpuStats.  # noqa: E501
        :rtype: int
        """
        return self._memclk

    @memclk.setter
    def memclk(self, memclk):
        """Sets the memclk of this GpuStats.

        Memory clock, MHz  # noqa: E501

        :param memclk: The memclk of this GpuStats.  # noqa: E501
        :type: int
        """

        self._memclk = memclk

    @property
    def memtemp(self):
        """Gets the memtemp of this GpuStats.  # noqa: E501

        Memory temperature, 째C  # noqa: E501

        :return: The memtemp of this GpuStats.  # noqa: E501
        :rtype: int
        """
        return self._memtemp

    @memtemp.setter
    def memtemp(self, memtemp):
        """Sets the memtemp of this GpuStats.

        Memory temperature, 째C  # noqa: E501

        :param memtemp: The memtemp of this GpuStats.  # noqa: E501
        :type: int
        """

        self._memtemp = memtemp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GpuStats, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GpuStats):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GpuStats):
            return True

        return self.to_dict() != other.to_dict()
