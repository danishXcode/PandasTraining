# coding: utf-8

"""
    Hive OS API

    App API for Hive OS 2.0  # noqa: E501

    OpenAPI spec version: 2.1-beta
    Contact: brain@hiveos.farm
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class FlightSheet(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'is_favorite': 'bool',
        'items': 'list[FSItemFullInfo]',
        'workers_count': 'int'
    }

    attribute_map = {
        'name': 'name',
        'is_favorite': 'is_favorite',
        'items': 'items',
        'workers_count': 'workers_count'
    }

    def __init__(self, name=None, is_favorite=None, items=None, workers_count=None, _configuration=None):  # noqa: E501
        """FlightSheet - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._is_favorite = None
        self._items = None
        self._workers_count = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if is_favorite is not None:
            self.is_favorite = is_favorite
        if items is not None:
            self.items = items
        if workers_count is not None:
            self.workers_count = workers_count

    @property
    def name(self):
        """Gets the name of this FlightSheet.  # noqa: E501

        Display name  # noqa: E501

        :return: The name of this FlightSheet.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FlightSheet.

        Display name  # noqa: E501

        :param name: The name of this FlightSheet.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 100):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")  # noqa: E501

        self._name = name

    @property
    def is_favorite(self):
        """Gets the is_favorite of this FlightSheet.  # noqa: E501

        Is favorite flag  # noqa: E501

        :return: The is_favorite of this FlightSheet.  # noqa: E501
        :rtype: bool
        """
        return self._is_favorite

    @is_favorite.setter
    def is_favorite(self, is_favorite):
        """Sets the is_favorite of this FlightSheet.

        Is favorite flag  # noqa: E501

        :param is_favorite: The is_favorite of this FlightSheet.  # noqa: E501
        :type: bool
        """

        self._is_favorite = is_favorite

    @property
    def items(self):
        """Gets the items of this FlightSheet.  # noqa: E501


        :return: The items of this FlightSheet.  # noqa: E501
        :rtype: list[FSItemFullInfo]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this FlightSheet.


        :param items: The items of this FlightSheet.  # noqa: E501
        :type: list[FSItemFullInfo]
        """

        self._items = items

    @property
    def workers_count(self):
        """Gets the workers_count of this FlightSheet.  # noqa: E501

        Amount of workers that use this flight sheet  # noqa: E501

        :return: The workers_count of this FlightSheet.  # noqa: E501
        :rtype: int
        """
        return self._workers_count

    @workers_count.setter
    def workers_count(self, workers_count):
        """Sets the workers_count of this FlightSheet.

        Amount of workers that use this flight sheet  # noqa: E501

        :param workers_count: The workers_count of this FlightSheet.  # noqa: E501
        :type: int
        """

        self._workers_count = workers_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FlightSheet, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FlightSheet):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FlightSheet):
            return True

        return self.to_dict() != other.to_dict()
