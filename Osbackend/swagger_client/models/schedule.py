# coding: utf-8

"""
    Hive OS API

    App API for Hive OS 2.0  # noqa: E501

    OpenAPI spec version: 2.1-beta
    Contact: brain@hiveos.farm
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Schedule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_at': 'int',
        'prev_launch_at': 'int',
        'next_launch_at': 'int'
    }

    attribute_map = {
        'created_at': 'created_at',
        'prev_launch_at': 'prev_launch_at',
        'next_launch_at': 'next_launch_at'
    }

    def __init__(self, created_at=None, prev_launch_at=None, next_launch_at=None, _configuration=None):  # noqa: E501
        """Schedule - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._created_at = None
        self._prev_launch_at = None
        self._next_launch_at = None
        self.discriminator = None

        if created_at is not None:
            self.created_at = created_at
        if prev_launch_at is not None:
            self.prev_launch_at = prev_launch_at
        if next_launch_at is not None:
            self.next_launch_at = next_launch_at

    @property
    def created_at(self):
        """Gets the created_at of this Schedule.  # noqa: E501

        When entity was created  # noqa: E501

        :return: The created_at of this Schedule.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Schedule.

        When entity was created  # noqa: E501

        :param created_at: The created_at of this Schedule.  # noqa: E501
        :type: int
        """

        self._created_at = created_at

    @property
    def prev_launch_at(self):
        """Gets the prev_launch_at of this Schedule.  # noqa: E501

        When the task was last executed  # noqa: E501

        :return: The prev_launch_at of this Schedule.  # noqa: E501
        :rtype: int
        """
        return self._prev_launch_at

    @prev_launch_at.setter
    def prev_launch_at(self, prev_launch_at):
        """Sets the prev_launch_at of this Schedule.

        When the task was last executed  # noqa: E501

        :param prev_launch_at: The prev_launch_at of this Schedule.  # noqa: E501
        :type: int
        """

        self._prev_launch_at = prev_launch_at

    @property
    def next_launch_at(self):
        """Gets the next_launch_at of this Schedule.  # noqa: E501

        When the task is scheduled for execution  # noqa: E501

        :return: The next_launch_at of this Schedule.  # noqa: E501
        :rtype: int
        """
        return self._next_launch_at

    @next_launch_at.setter
    def next_launch_at(self, next_launch_at):
        """Sets the next_launch_at of this Schedule.

        When the task is scheduled for execution  # noqa: E501

        :param next_launch_at: The next_launch_at of this Schedule.  # noqa: E501
        :type: int
        """

        self._next_launch_at = next_launch_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Schedule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Schedule):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Schedule):
            return True

        return self.to_dict() != other.to_dict()
