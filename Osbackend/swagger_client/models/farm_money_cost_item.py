# coding: utf-8

"""
    Hive OS API

    App API for Hive OS 2.0  # noqa: E501

    OpenAPI spec version: 2.1-beta
    Contact: brain@hiveos.farm
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class FarmMoneyCostItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'BillingType',
        'type_name': 'str',
        'amount': 'float',
        'monthly_price': 'float',
        'monthly_cost': 'float',
        'daily_cost': 'float'
    }

    attribute_map = {
        'type': 'type',
        'type_name': 'type_name',
        'amount': 'amount',
        'monthly_price': 'monthly_price',
        'monthly_cost': 'monthly_cost',
        'daily_cost': 'daily_cost'
    }

    def __init__(self, type=None, type_name=None, amount=None, monthly_price=None, monthly_cost=None, daily_cost=None, _configuration=None):  # noqa: E501
        """FarmMoneyCostItem - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._type = None
        self._type_name = None
        self._amount = None
        self._monthly_price = None
        self._monthly_cost = None
        self._daily_cost = None
        self.discriminator = None

        if type is not None:
            self.type = type
        if type_name is not None:
            self.type_name = type_name
        if amount is not None:
            self.amount = amount
        if monthly_price is not None:
            self.monthly_price = monthly_price
        if monthly_cost is not None:
            self.monthly_cost = monthly_cost
        if daily_cost is not None:
            self.daily_cost = daily_cost

    @property
    def type(self):
        """Gets the type of this FarmMoneyCostItem.  # noqa: E501


        :return: The type of this FarmMoneyCostItem.  # noqa: E501
        :rtype: BillingType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FarmMoneyCostItem.


        :param type: The type of this FarmMoneyCostItem.  # noqa: E501
        :type: BillingType
        """

        self._type = type

    @property
    def type_name(self):
        """Gets the type_name of this FarmMoneyCostItem.  # noqa: E501

        Display name of billing type  # noqa: E501

        :return: The type_name of this FarmMoneyCostItem.  # noqa: E501
        :rtype: str
        """
        return self._type_name

    @type_name.setter
    def type_name(self, type_name):
        """Sets the type_name of this FarmMoneyCostItem.

        Display name of billing type  # noqa: E501

        :param type_name: The type_name of this FarmMoneyCostItem.  # noqa: E501
        :type: str
        """

        self._type_name = type_name

    @property
    def amount(self):
        """Gets the amount of this FarmMoneyCostItem.  # noqa: E501

        Amount of used workers of this billing type per day  # noqa: E501

        :return: The amount of this FarmMoneyCostItem.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this FarmMoneyCostItem.

        Amount of used workers of this billing type per day  # noqa: E501

        :param amount: The amount of this FarmMoneyCostItem.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def monthly_price(self):
        """Gets the monthly_price of this FarmMoneyCostItem.  # noqa: E501

        Monthly price of this billing type  # noqa: E501

        :return: The monthly_price of this FarmMoneyCostItem.  # noqa: E501
        :rtype: float
        """
        return self._monthly_price

    @monthly_price.setter
    def monthly_price(self, monthly_price):
        """Sets the monthly_price of this FarmMoneyCostItem.

        Monthly price of this billing type  # noqa: E501

        :param monthly_price: The monthly_price of this FarmMoneyCostItem.  # noqa: E501
        :type: float
        """

        self._monthly_price = monthly_price

    @property
    def monthly_cost(self):
        """Gets the monthly_cost of this FarmMoneyCostItem.  # noqa: E501

        Monthly cost of this amount of workers  # noqa: E501

        :return: The monthly_cost of this FarmMoneyCostItem.  # noqa: E501
        :rtype: float
        """
        return self._monthly_cost

    @monthly_cost.setter
    def monthly_cost(self, monthly_cost):
        """Sets the monthly_cost of this FarmMoneyCostItem.

        Monthly cost of this amount of workers  # noqa: E501

        :param monthly_cost: The monthly_cost of this FarmMoneyCostItem.  # noqa: E501
        :type: float
        """

        self._monthly_cost = monthly_cost

    @property
    def daily_cost(self):
        """Gets the daily_cost of this FarmMoneyCostItem.  # noqa: E501

        Daily cost (monthly cost divided by days in month)  # noqa: E501

        :return: The daily_cost of this FarmMoneyCostItem.  # noqa: E501
        :rtype: float
        """
        return self._daily_cost

    @daily_cost.setter
    def daily_cost(self, daily_cost):
        """Sets the daily_cost of this FarmMoneyCostItem.

        Daily cost (monthly cost divided by days in month)  # noqa: E501

        :param daily_cost: The daily_cost of this FarmMoneyCostItem.  # noqa: E501
        :type: float
        """

        self._daily_cost = daily_cost

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FarmMoneyCostItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FarmMoneyCostItem):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FarmMoneyCostItem):
            return True

        return self.to_dict() != other.to_dict()
