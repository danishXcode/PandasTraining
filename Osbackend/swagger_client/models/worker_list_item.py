# coding: utf-8

"""
    Hive OS API

    App API for Hive OS 2.0  # noqa: E501

    OpenAPI spec version: 2.1-beta
    Contact: brain@hiveos.farm
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class WorkerListItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'platform': 'Platform',
        'name': 'str',
        'description': 'str',
        'units_count': 'int',
        'active': 'bool',
        'password': 'str',
        'tag_ids': 'list[int]',
        'mirror_url': 'MirrorUrl',
        'red_temp': 'int',
        'red_mem_temp': 'float',
        'red_cpu_temp': 'float',
        'red_board_temp': 'float',
        'red_fan': 'int',
        'red_asr': 'int',
        'red_la': 'float',
        'red_hashrates': 'list[object]',
        'ip_addresses': 'list[str]',
        'remote_address': 'object',
        'vpn': 'bool',
        'has_amd': 'bool',
        'has_nvidia': 'bool',
        'needs_upgrade': 'bool',
        'packages_hash': 'str',
        'lan_config': 'object',
        'system_type': 'str',
        'os_name': 'str',
        'has_octofan': 'bool',
        'has_coolbox': 'bool',
        'has_fanflap': 'bool',
        'has_powermeter': 'bool',
        'has_asichub': 'bool',
        'has_donnager_relay': 'bool',
        'personal_settings': 'object',
        'versions': 'object',
        'stats': 'object',
        'flight_sheet': 'FSMidInfo',
        'overclock': 'object',
        'tuned_miners': 'list[MinerName]',
        'miners_summary': 'object',
        'miners_stats': 'object',
        'hardware_info': 'object',
        'hardware_stats': 'object',
        'gpu_summary': 'object',
        'gpu_info': 'list[GpuInfo]',
        'gpu_stats': 'list[object]',
        'asic_info': 'object',
        'asichub_id': 'int',
        'asic_stats': 'object',
        'watchdog': 'object',
        'options': 'object',
        'hardware_power_draw': 'int',
        'psu_efficiency': 'int',
        'octofan_correct_power': 'bool',
        'autofan': 'object',
        'octofan': 'object',
        'octofan_stats': 'object',
        'coolbox': 'object',
        'coolbox_info': 'object',
        'coolbox_stats': 'object',
        'fanflap': 'object',
        'fanflap_stats': 'FanflapStats',
        'powermeter': 'object',
        'powermeter_stats': 'PowermeterStats',
        'donnager_relay': 'object',
        'donnager_relay_info': 'object',
        'donnager_relay_stats': 'object',
        'ykeda_autofan': 'object',
        'ykeda_autofan_stats': 'object',
        'commands': 'list[object]',
        'benchmark_id': 'int',
        'asic_config': 'dict(str, str)',
        'messages_counts': 'object'
    }

    attribute_map = {
        'platform': 'platform',
        'name': 'name',
        'description': 'description',
        'units_count': 'units_count',
        'active': 'active',
        'password': 'password',
        'tag_ids': 'tag_ids',
        'mirror_url': 'mirror_url',
        'red_temp': 'red_temp',
        'red_mem_temp': 'red_mem_temp',
        'red_cpu_temp': 'red_cpu_temp',
        'red_board_temp': 'red_board_temp',
        'red_fan': 'red_fan',
        'red_asr': 'red_asr',
        'red_la': 'red_la',
        'red_hashrates': 'red_hashrates',
        'ip_addresses': 'ip_addresses',
        'remote_address': 'remote_address',
        'vpn': 'vpn',
        'has_amd': 'has_amd',
        'has_nvidia': 'has_nvidia',
        'needs_upgrade': 'needs_upgrade',
        'packages_hash': 'packages_hash',
        'lan_config': 'lan_config',
        'system_type': 'system_type',
        'os_name': 'os_name',
        'has_octofan': 'has_octofan',
        'has_coolbox': 'has_coolbox',
        'has_fanflap': 'has_fanflap',
        'has_powermeter': 'has_powermeter',
        'has_asichub': 'has_asichub',
        'has_donnager_relay': 'has_donnager_relay',
        'personal_settings': 'personal_settings',
        'versions': 'versions',
        'stats': 'stats',
        'flight_sheet': 'flight_sheet',
        'overclock': 'overclock',
        'tuned_miners': 'tuned_miners',
        'miners_summary': 'miners_summary',
        'miners_stats': 'miners_stats',
        'hardware_info': 'hardware_info',
        'hardware_stats': 'hardware_stats',
        'gpu_summary': 'gpu_summary',
        'gpu_info': 'gpu_info',
        'gpu_stats': 'gpu_stats',
        'asic_info': 'asic_info',
        'asichub_id': 'asichub_id',
        'asic_stats': 'asic_stats',
        'watchdog': 'watchdog',
        'options': 'options',
        'hardware_power_draw': 'hardware_power_draw',
        'psu_efficiency': 'psu_efficiency',
        'octofan_correct_power': 'octofan_correct_power',
        'autofan': 'autofan',
        'octofan': 'octofan',
        'octofan_stats': 'octofan_stats',
        'coolbox': 'coolbox',
        'coolbox_info': 'coolbox_info',
        'coolbox_stats': 'coolbox_stats',
        'fanflap': 'fanflap',
        'fanflap_stats': 'fanflap_stats',
        'powermeter': 'powermeter',
        'powermeter_stats': 'powermeter_stats',
        'donnager_relay': 'donnager_relay',
        'donnager_relay_info': 'donnager_relay_info',
        'donnager_relay_stats': 'donnager_relay_stats',
        'ykeda_autofan': 'ykeda_autofan',
        'ykeda_autofan_stats': 'ykeda_autofan_stats',
        'commands': 'commands',
        'benchmark_id': 'benchmark_id',
        'asic_config': 'asic_config',
        'messages_counts': 'messages_counts'
    }

    def __init__(self, platform=None, name=None, description=None, units_count=None, active=True, password=None, tag_ids=None, mirror_url=None, red_temp=None, red_mem_temp=None, red_cpu_temp=None, red_board_temp=None, red_fan=None, red_asr=None, red_la=None, red_hashrates=None, ip_addresses=None, remote_address=None, vpn=None, has_amd=None, has_nvidia=None, needs_upgrade=None, packages_hash=None, lan_config=None, system_type=None, os_name=None, has_octofan=None, has_coolbox=None, has_fanflap=None, has_powermeter=None, has_asichub=None, has_donnager_relay=None, personal_settings=None, versions=None, stats=None, flight_sheet=None, overclock=None, tuned_miners=None, miners_summary=None, miners_stats=None, hardware_info=None, hardware_stats=None, gpu_summary=None, gpu_info=None, gpu_stats=None, asic_info=None, asichub_id=None, asic_stats=None, watchdog=None, options=None, hardware_power_draw=None, psu_efficiency=None, octofan_correct_power=None, autofan=None, octofan=None, octofan_stats=None, coolbox=None, coolbox_info=None, coolbox_stats=None, fanflap=None, fanflap_stats=None, powermeter=None, powermeter_stats=None, donnager_relay=None, donnager_relay_info=None, donnager_relay_stats=None, ykeda_autofan=None, ykeda_autofan_stats=None, commands=None, benchmark_id=None, asic_config=None, messages_counts=None, _configuration=None):  # noqa: E501
        """WorkerListItem - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._platform = None
        self._name = None
        self._description = None
        self._units_count = None
        self._active = None
        self._password = None
        self._tag_ids = None
        self._mirror_url = None
        self._red_temp = None
        self._red_mem_temp = None
        self._red_cpu_temp = None
        self._red_board_temp = None
        self._red_fan = None
        self._red_asr = None
        self._red_la = None
        self._red_hashrates = None
        self._ip_addresses = None
        self._remote_address = None
        self._vpn = None
        self._has_amd = None
        self._has_nvidia = None
        self._needs_upgrade = None
        self._packages_hash = None
        self._lan_config = None
        self._system_type = None
        self._os_name = None
        self._has_octofan = None
        self._has_coolbox = None
        self._has_fanflap = None
        self._has_powermeter = None
        self._has_asichub = None
        self._has_donnager_relay = None
        self._personal_settings = None
        self._versions = None
        self._stats = None
        self._flight_sheet = None
        self._overclock = None
        self._tuned_miners = None
        self._miners_summary = None
        self._miners_stats = None
        self._hardware_info = None
        self._hardware_stats = None
        self._gpu_summary = None
        self._gpu_info = None
        self._gpu_stats = None
        self._asic_info = None
        self._asichub_id = None
        self._asic_stats = None
        self._watchdog = None
        self._options = None
        self._hardware_power_draw = None
        self._psu_efficiency = None
        self._octofan_correct_power = None
        self._autofan = None
        self._octofan = None
        self._octofan_stats = None
        self._coolbox = None
        self._coolbox_info = None
        self._coolbox_stats = None
        self._fanflap = None
        self._fanflap_stats = None
        self._powermeter = None
        self._powermeter_stats = None
        self._donnager_relay = None
        self._donnager_relay_info = None
        self._donnager_relay_stats = None
        self._ykeda_autofan = None
        self._ykeda_autofan_stats = None
        self._commands = None
        self._benchmark_id = None
        self._asic_config = None
        self._messages_counts = None
        self.discriminator = None

        if platform is not None:
            self.platform = platform
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if units_count is not None:
            self.units_count = units_count
        if active is not None:
            self.active = active
        if password is not None:
            self.password = password
        if tag_ids is not None:
            self.tag_ids = tag_ids
        if mirror_url is not None:
            self.mirror_url = mirror_url
        if red_temp is not None:
            self.red_temp = red_temp
        if red_mem_temp is not None:
            self.red_mem_temp = red_mem_temp
        if red_cpu_temp is not None:
            self.red_cpu_temp = red_cpu_temp
        if red_board_temp is not None:
            self.red_board_temp = red_board_temp
        if red_fan is not None:
            self.red_fan = red_fan
        if red_asr is not None:
            self.red_asr = red_asr
        if red_la is not None:
            self.red_la = red_la
        if red_hashrates is not None:
            self.red_hashrates = red_hashrates
        if ip_addresses is not None:
            self.ip_addresses = ip_addresses
        if remote_address is not None:
            self.remote_address = remote_address
        if vpn is not None:
            self.vpn = vpn
        if has_amd is not None:
            self.has_amd = has_amd
        if has_nvidia is not None:
            self.has_nvidia = has_nvidia
        if needs_upgrade is not None:
            self.needs_upgrade = needs_upgrade
        if packages_hash is not None:
            self.packages_hash = packages_hash
        if lan_config is not None:
            self.lan_config = lan_config
        if system_type is not None:
            self.system_type = system_type
        if os_name is not None:
            self.os_name = os_name
        if has_octofan is not None:
            self.has_octofan = has_octofan
        if has_coolbox is not None:
            self.has_coolbox = has_coolbox
        if has_fanflap is not None:
            self.has_fanflap = has_fanflap
        if has_powermeter is not None:
            self.has_powermeter = has_powermeter
        if has_asichub is not None:
            self.has_asichub = has_asichub
        if has_donnager_relay is not None:
            self.has_donnager_relay = has_donnager_relay
        if personal_settings is not None:
            self.personal_settings = personal_settings
        if versions is not None:
            self.versions = versions
        if stats is not None:
            self.stats = stats
        if flight_sheet is not None:
            self.flight_sheet = flight_sheet
        if overclock is not None:
            self.overclock = overclock
        if tuned_miners is not None:
            self.tuned_miners = tuned_miners
        if miners_summary is not None:
            self.miners_summary = miners_summary
        if miners_stats is not None:
            self.miners_stats = miners_stats
        if hardware_info is not None:
            self.hardware_info = hardware_info
        if hardware_stats is not None:
            self.hardware_stats = hardware_stats
        if gpu_summary is not None:
            self.gpu_summary = gpu_summary
        if gpu_info is not None:
            self.gpu_info = gpu_info
        if gpu_stats is not None:
            self.gpu_stats = gpu_stats
        if asic_info is not None:
            self.asic_info = asic_info
        if asichub_id is not None:
            self.asichub_id = asichub_id
        if asic_stats is not None:
            self.asic_stats = asic_stats
        if watchdog is not None:
            self.watchdog = watchdog
        if options is not None:
            self.options = options
        if hardware_power_draw is not None:
            self.hardware_power_draw = hardware_power_draw
        if psu_efficiency is not None:
            self.psu_efficiency = psu_efficiency
        if octofan_correct_power is not None:
            self.octofan_correct_power = octofan_correct_power
        if autofan is not None:
            self.autofan = autofan
        if octofan is not None:
            self.octofan = octofan
        if octofan_stats is not None:
            self.octofan_stats = octofan_stats
        if coolbox is not None:
            self.coolbox = coolbox
        if coolbox_info is not None:
            self.coolbox_info = coolbox_info
        if coolbox_stats is not None:
            self.coolbox_stats = coolbox_stats
        if fanflap is not None:
            self.fanflap = fanflap
        if fanflap_stats is not None:
            self.fanflap_stats = fanflap_stats
        if powermeter is not None:
            self.powermeter = powermeter
        if powermeter_stats is not None:
            self.powermeter_stats = powermeter_stats
        if donnager_relay is not None:
            self.donnager_relay = donnager_relay
        if donnager_relay_info is not None:
            self.donnager_relay_info = donnager_relay_info
        if donnager_relay_stats is not None:
            self.donnager_relay_stats = donnager_relay_stats
        if ykeda_autofan is not None:
            self.ykeda_autofan = ykeda_autofan
        if ykeda_autofan_stats is not None:
            self.ykeda_autofan_stats = ykeda_autofan_stats
        if commands is not None:
            self.commands = commands
        if benchmark_id is not None:
            self.benchmark_id = benchmark_id
        if asic_config is not None:
            self.asic_config = asic_config
        if messages_counts is not None:
            self.messages_counts = messages_counts

    @property
    def platform(self):
        """Gets the platform of this WorkerListItem.  # noqa: E501


        :return: The platform of this WorkerListItem.  # noqa: E501
        :rtype: Platform
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this WorkerListItem.


        :param platform: The platform of this WorkerListItem.  # noqa: E501
        :type: Platform
        """

        self._platform = platform

    @property
    def name(self):
        """Gets the name of this WorkerListItem.  # noqa: E501

        Display name  # noqa: E501

        :return: The name of this WorkerListItem.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WorkerListItem.

        Display name  # noqa: E501

        :param name: The name of this WorkerListItem.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 50):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `50`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this WorkerListItem.  # noqa: E501


        :return: The description of this WorkerListItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WorkerListItem.


        :param description: The description of this WorkerListItem.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                description is not None and len(description) > 255):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `255`")  # noqa: E501

        self._description = description

    @property
    def units_count(self):
        """Gets the units_count of this WorkerListItem.  # noqa: E501


        :return: The units_count of this WorkerListItem.  # noqa: E501
        :rtype: int
        """
        return self._units_count

    @units_count.setter
    def units_count(self, units_count):
        """Sets the units_count of this WorkerListItem.


        :param units_count: The units_count of this WorkerListItem.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                units_count is not None and units_count < 1):  # noqa: E501
            raise ValueError("Invalid value for `units_count`, must be a value greater than or equal to `1`")  # noqa: E501

        self._units_count = units_count

    @property
    def active(self):
        """Gets the active of this WorkerListItem.  # noqa: E501


        :return: The active of this WorkerListItem.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this WorkerListItem.


        :param active: The active of this WorkerListItem.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def password(self):
        """Gets the password of this WorkerListItem.  # noqa: E501


        :return: The password of this WorkerListItem.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this WorkerListItem.


        :param password: The password of this WorkerListItem.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                password is not None and len(password) > 64):
            raise ValueError("Invalid value for `password`, length must be less than or equal to `64`")  # noqa: E501
        if (self._configuration.client_side_validation and
                password is not None and len(password) < 6):
            raise ValueError("Invalid value for `password`, length must be greater than or equal to `6`")  # noqa: E501

        self._password = password

    @property
    def tag_ids(self):
        """Gets the tag_ids of this WorkerListItem.  # noqa: E501


        :return: The tag_ids of this WorkerListItem.  # noqa: E501
        :rtype: list[int]
        """
        return self._tag_ids

    @tag_ids.setter
    def tag_ids(self, tag_ids):
        """Sets the tag_ids of this WorkerListItem.


        :param tag_ids: The tag_ids of this WorkerListItem.  # noqa: E501
        :type: list[int]
        """

        self._tag_ids = tag_ids

    @property
    def mirror_url(self):
        """Gets the mirror_url of this WorkerListItem.  # noqa: E501


        :return: The mirror_url of this WorkerListItem.  # noqa: E501
        :rtype: MirrorUrl
        """
        return self._mirror_url

    @mirror_url.setter
    def mirror_url(self, mirror_url):
        """Sets the mirror_url of this WorkerListItem.


        :param mirror_url: The mirror_url of this WorkerListItem.  # noqa: E501
        :type: MirrorUrl
        """

        self._mirror_url = mirror_url

    @property
    def red_temp(self):
        """Gets the red_temp of this WorkerListItem.  # noqa: E501

        Red Temperature, °C  # noqa: E501

        :return: The red_temp of this WorkerListItem.  # noqa: E501
        :rtype: int
        """
        return self._red_temp

    @red_temp.setter
    def red_temp(self, red_temp):
        """Sets the red_temp of this WorkerListItem.

        Red Temperature, °C  # noqa: E501

        :param red_temp: The red_temp of this WorkerListItem.  # noqa: E501
        :type: int
        """

        self._red_temp = red_temp

    @property
    def red_mem_temp(self):
        """Gets the red_mem_temp of this WorkerListItem.  # noqa: E501

        Red memory temperature (for rigs), °C  # noqa: E501

        :return: The red_mem_temp of this WorkerListItem.  # noqa: E501
        :rtype: float
        """
        return self._red_mem_temp

    @red_mem_temp.setter
    def red_mem_temp(self, red_mem_temp):
        """Sets the red_mem_temp of this WorkerListItem.

        Red memory temperature (for rigs), °C  # noqa: E501

        :param red_mem_temp: The red_mem_temp of this WorkerListItem.  # noqa: E501
        :type: float
        """

        self._red_mem_temp = red_mem_temp

    @property
    def red_cpu_temp(self):
        """Gets the red_cpu_temp of this WorkerListItem.  # noqa: E501

        Red CPU temperature (for rigs), °C  # noqa: E501

        :return: The red_cpu_temp of this WorkerListItem.  # noqa: E501
        :rtype: float
        """
        return self._red_cpu_temp

    @red_cpu_temp.setter
    def red_cpu_temp(self, red_cpu_temp):
        """Sets the red_cpu_temp of this WorkerListItem.

        Red CPU temperature (for rigs), °C  # noqa: E501

        :param red_cpu_temp: The red_cpu_temp of this WorkerListItem.  # noqa: E501
        :type: float
        """

        self._red_cpu_temp = red_cpu_temp

    @property
    def red_board_temp(self):
        """Gets the red_board_temp of this WorkerListItem.  # noqa: E501

        Red Board Temperature (for ASICs), °C  # noqa: E501

        :return: The red_board_temp of this WorkerListItem.  # noqa: E501
        :rtype: float
        """
        return self._red_board_temp

    @red_board_temp.setter
    def red_board_temp(self, red_board_temp):
        """Sets the red_board_temp of this WorkerListItem.

        Red Board Temperature (for ASICs), °C  # noqa: E501

        :param red_board_temp: The red_board_temp of this WorkerListItem.  # noqa: E501
        :type: float
        """

        self._red_board_temp = red_board_temp

    @property
    def red_fan(self):
        """Gets the red_fan of this WorkerListItem.  # noqa: E501

        Red Fan speed, %  # noqa: E501

        :return: The red_fan of this WorkerListItem.  # noqa: E501
        :rtype: int
        """
        return self._red_fan

    @red_fan.setter
    def red_fan(self, red_fan):
        """Sets the red_fan of this WorkerListItem.

        Red Fan speed, %  # noqa: E501

        :param red_fan: The red_fan of this WorkerListItem.  # noqa: E501
        :type: int
        """

        self._red_fan = red_fan

    @property
    def red_asr(self):
        """Gets the red_asr of this WorkerListItem.  # noqa: E501

        Red Accepted Shares Ratio, %  # noqa: E501

        :return: The red_asr of this WorkerListItem.  # noqa: E501
        :rtype: int
        """
        return self._red_asr

    @red_asr.setter
    def red_asr(self, red_asr):
        """Sets the red_asr of this WorkerListItem.

        Red Accepted Shares Ratio, %  # noqa: E501

        :param red_asr: The red_asr of this WorkerListItem.  # noqa: E501
        :type: int
        """

        self._red_asr = red_asr

    @property
    def red_la(self):
        """Gets the red_la of this WorkerListItem.  # noqa: E501

        Red Load Average per one CPU core  # noqa: E501

        :return: The red_la of this WorkerListItem.  # noqa: E501
        :rtype: float
        """
        return self._red_la

    @red_la.setter
    def red_la(self, red_la):
        """Sets the red_la of this WorkerListItem.

        Red Load Average per one CPU core  # noqa: E501

        :param red_la: The red_la of this WorkerListItem.  # noqa: E501
        :type: float
        """

        self._red_la = red_la

    @property
    def red_hashrates(self):
        """Gets the red_hashrates of this WorkerListItem.  # noqa: E501

        Red hashrates per algo  # noqa: E501

        :return: The red_hashrates of this WorkerListItem.  # noqa: E501
        :rtype: list[object]
        """
        return self._red_hashrates

    @red_hashrates.setter
    def red_hashrates(self, red_hashrates):
        """Sets the red_hashrates of this WorkerListItem.

        Red hashrates per algo  # noqa: E501

        :param red_hashrates: The red_hashrates of this WorkerListItem.  # noqa: E501
        :type: list[object]
        """

        self._red_hashrates = red_hashrates

    @property
    def ip_addresses(self):
        """Gets the ip_addresses of this WorkerListItem.  # noqa: E501

        List of assigned ip addresses  # noqa: E501

        :return: The ip_addresses of this WorkerListItem.  # noqa: E501
        :rtype: list[str]
        """
        return self._ip_addresses

    @ip_addresses.setter
    def ip_addresses(self, ip_addresses):
        """Sets the ip_addresses of this WorkerListItem.

        List of assigned ip addresses  # noqa: E501

        :param ip_addresses: The ip_addresses of this WorkerListItem.  # noqa: E501
        :type: list[str]
        """

        self._ip_addresses = ip_addresses

    @property
    def remote_address(self):
        """Gets the remote_address of this WorkerListItem.  # noqa: E501

        Remote address info  # noqa: E501

        :return: The remote_address of this WorkerListItem.  # noqa: E501
        :rtype: object
        """
        return self._remote_address

    @remote_address.setter
    def remote_address(self, remote_address):
        """Sets the remote_address of this WorkerListItem.

        Remote address info  # noqa: E501

        :param remote_address: The remote_address of this WorkerListItem.  # noqa: E501
        :type: object
        """

        self._remote_address = remote_address

    @property
    def vpn(self):
        """Gets the vpn of this WorkerListItem.  # noqa: E501

        VPN is configured  # noqa: E501

        :return: The vpn of this WorkerListItem.  # noqa: E501
        :rtype: bool
        """
        return self._vpn

    @vpn.setter
    def vpn(self, vpn):
        """Sets the vpn of this WorkerListItem.

        VPN is configured  # noqa: E501

        :param vpn: The vpn of this WorkerListItem.  # noqa: E501
        :type: bool
        """

        self._vpn = vpn

    @property
    def has_amd(self):
        """Gets the has_amd of this WorkerListItem.  # noqa: E501

        Worker has AMD GPUs  # noqa: E501

        :return: The has_amd of this WorkerListItem.  # noqa: E501
        :rtype: bool
        """
        return self._has_amd

    @has_amd.setter
    def has_amd(self, has_amd):
        """Sets the has_amd of this WorkerListItem.

        Worker has AMD GPUs  # noqa: E501

        :param has_amd: The has_amd of this WorkerListItem.  # noqa: E501
        :type: bool
        """

        self._has_amd = has_amd

    @property
    def has_nvidia(self):
        """Gets the has_nvidia of this WorkerListItem.  # noqa: E501

        Worker has Nvidia GPUs  # noqa: E501

        :return: The has_nvidia of this WorkerListItem.  # noqa: E501
        :rtype: bool
        """
        return self._has_nvidia

    @has_nvidia.setter
    def has_nvidia(self, has_nvidia):
        """Sets the has_nvidia of this WorkerListItem.

        Worker has Nvidia GPUs  # noqa: E501

        :param has_nvidia: The has_nvidia of this WorkerListItem.  # noqa: E501
        :type: bool
        """

        self._has_nvidia = has_nvidia

    @property
    def needs_upgrade(self):
        """Gets the needs_upgrade of this WorkerListItem.  # noqa: E501

        New OS version is available  # noqa: E501

        :return: The needs_upgrade of this WorkerListItem.  # noqa: E501
        :rtype: bool
        """
        return self._needs_upgrade

    @needs_upgrade.setter
    def needs_upgrade(self, needs_upgrade):
        """Sets the needs_upgrade of this WorkerListItem.

        New OS version is available  # noqa: E501

        :param needs_upgrade: The needs_upgrade of this WorkerListItem.  # noqa: E501
        :type: bool
        """

        self._needs_upgrade = needs_upgrade

    @property
    def packages_hash(self):
        """Gets the packages_hash of this WorkerListItem.  # noqa: E501

        packages_hash  # noqa: E501

        :return: The packages_hash of this WorkerListItem.  # noqa: E501
        :rtype: str
        """
        return self._packages_hash

    @packages_hash.setter
    def packages_hash(self, packages_hash):
        """Sets the packages_hash of this WorkerListItem.

        packages_hash  # noqa: E501

        :param packages_hash: The packages_hash of this WorkerListItem.  # noqa: E501
        :type: str
        """

        self._packages_hash = packages_hash

    @property
    def lan_config(self):
        """Gets the lan_config of this WorkerListItem.  # noqa: E501

        LAN configuration  # noqa: E501

        :return: The lan_config of this WorkerListItem.  # noqa: E501
        :rtype: object
        """
        return self._lan_config

    @lan_config.setter
    def lan_config(self, lan_config):
        """Sets the lan_config of this WorkerListItem.

        LAN configuration  # noqa: E501

        :param lan_config: The lan_config of this WorkerListItem.  # noqa: E501
        :type: object
        """

        self._lan_config = lan_config

    @property
    def system_type(self):
        """Gets the system_type of this WorkerListItem.  # noqa: E501

        Hive OS system type  # noqa: E501

        :return: The system_type of this WorkerListItem.  # noqa: E501
        :rtype: str
        """
        return self._system_type

    @system_type.setter
    def system_type(self, system_type):
        """Sets the system_type of this WorkerListItem.

        Hive OS system type  # noqa: E501

        :param system_type: The system_type of this WorkerListItem.  # noqa: E501
        :type: str
        """
        allowed_values = ["linux", "asic", "windows"]  # noqa: E501
        if (self._configuration.client_side_validation and
                system_type not in allowed_values):
            raise ValueError(
                "Invalid value for `system_type` ({0}), must be one of {1}"  # noqa: E501
                .format(system_type, allowed_values)
            )

        self._system_type = system_type

    @property
    def os_name(self):
        """Gets the os_name of this WorkerListItem.  # noqa: E501


        :return: The os_name of this WorkerListItem.  # noqa: E501
        :rtype: str
        """
        return self._os_name

    @os_name.setter
    def os_name(self, os_name):
        """Sets the os_name of this WorkerListItem.


        :param os_name: The os_name of this WorkerListItem.  # noqa: E501
        :type: str
        """

        self._os_name = os_name

    @property
    def has_octofan(self):
        """Gets the has_octofan of this WorkerListItem.  # noqa: E501

        Worker has Octominer fan controller  # noqa: E501

        :return: The has_octofan of this WorkerListItem.  # noqa: E501
        :rtype: bool
        """
        return self._has_octofan

    @has_octofan.setter
    def has_octofan(self, has_octofan):
        """Sets the has_octofan of this WorkerListItem.

        Worker has Octominer fan controller  # noqa: E501

        :param has_octofan: The has_octofan of this WorkerListItem.  # noqa: E501
        :type: bool
        """

        self._has_octofan = has_octofan

    @property
    def has_coolbox(self):
        """Gets the has_coolbox of this WorkerListItem.  # noqa: E501

        Worker has Coolbox fan controller  # noqa: E501

        :return: The has_coolbox of this WorkerListItem.  # noqa: E501
        :rtype: bool
        """
        return self._has_coolbox

    @has_coolbox.setter
    def has_coolbox(self, has_coolbox):
        """Sets the has_coolbox of this WorkerListItem.

        Worker has Coolbox fan controller  # noqa: E501

        :param has_coolbox: The has_coolbox of this WorkerListItem.  # noqa: E501
        :type: bool
        """

        self._has_coolbox = has_coolbox

    @property
    def has_fanflap(self):
        """Gets the has_fanflap of this WorkerListItem.  # noqa: E501

        Worker has FanFlap controller  # noqa: E501

        :return: The has_fanflap of this WorkerListItem.  # noqa: E501
        :rtype: bool
        """
        return self._has_fanflap

    @has_fanflap.setter
    def has_fanflap(self, has_fanflap):
        """Sets the has_fanflap of this WorkerListItem.

        Worker has FanFlap controller  # noqa: E501

        :param has_fanflap: The has_fanflap of this WorkerListItem.  # noqa: E501
        :type: bool
        """

        self._has_fanflap = has_fanflap

    @property
    def has_powermeter(self):
        """Gets the has_powermeter of this WorkerListItem.  # noqa: E501

        Worker has Powermeter controller  # noqa: E501

        :return: The has_powermeter of this WorkerListItem.  # noqa: E501
        :rtype: bool
        """
        return self._has_powermeter

    @has_powermeter.setter
    def has_powermeter(self, has_powermeter):
        """Sets the has_powermeter of this WorkerListItem.

        Worker has Powermeter controller  # noqa: E501

        :param has_powermeter: The has_powermeter of this WorkerListItem.  # noqa: E501
        :type: bool
        """

        self._has_powermeter = has_powermeter

    @property
    def has_asichub(self):
        """Gets the has_asichub of this WorkerListItem.  # noqa: E501

        Worker is an ASIC Hub  # noqa: E501

        :return: The has_asichub of this WorkerListItem.  # noqa: E501
        :rtype: bool
        """
        return self._has_asichub

    @has_asichub.setter
    def has_asichub(self, has_asichub):
        """Sets the has_asichub of this WorkerListItem.

        Worker is an ASIC Hub  # noqa: E501

        :param has_asichub: The has_asichub of this WorkerListItem.  # noqa: E501
        :type: bool
        """

        self._has_asichub = has_asichub

    @property
    def has_donnager_relay(self):
        """Gets the has_donnager_relay of this WorkerListItem.  # noqa: E501

        Worker is a Donnager Relay controller  # noqa: E501

        :return: The has_donnager_relay of this WorkerListItem.  # noqa: E501
        :rtype: bool
        """
        return self._has_donnager_relay

    @has_donnager_relay.setter
    def has_donnager_relay(self, has_donnager_relay):
        """Sets the has_donnager_relay of this WorkerListItem.

        Worker is a Donnager Relay controller  # noqa: E501

        :param has_donnager_relay: The has_donnager_relay of this WorkerListItem.  # noqa: E501
        :type: bool
        """

        self._has_donnager_relay = has_donnager_relay

    @property
    def personal_settings(self):
        """Gets the personal_settings of this WorkerListItem.  # noqa: E501

        Personal settings for current user  # noqa: E501

        :return: The personal_settings of this WorkerListItem.  # noqa: E501
        :rtype: object
        """
        return self._personal_settings

    @personal_settings.setter
    def personal_settings(self, personal_settings):
        """Sets the personal_settings of this WorkerListItem.

        Personal settings for current user  # noqa: E501

        :param personal_settings: The personal_settings of this WorkerListItem.  # noqa: E501
        :type: object
        """

        self._personal_settings = personal_settings

    @property
    def versions(self):
        """Gets the versions of this WorkerListItem.  # noqa: E501


        :return: The versions of this WorkerListItem.  # noqa: E501
        :rtype: object
        """
        return self._versions

    @versions.setter
    def versions(self, versions):
        """Sets the versions of this WorkerListItem.


        :param versions: The versions of this WorkerListItem.  # noqa: E501
        :type: object
        """

        self._versions = versions

    @property
    def stats(self):
        """Gets the stats of this WorkerListItem.  # noqa: E501

        Worker stats  # noqa: E501

        :return: The stats of this WorkerListItem.  # noqa: E501
        :rtype: object
        """
        return self._stats

    @stats.setter
    def stats(self, stats):
        """Sets the stats of this WorkerListItem.

        Worker stats  # noqa: E501

        :param stats: The stats of this WorkerListItem.  # noqa: E501
        :type: object
        """

        self._stats = stats

    @property
    def flight_sheet(self):
        """Gets the flight_sheet of this WorkerListItem.  # noqa: E501


        :return: The flight_sheet of this WorkerListItem.  # noqa: E501
        :rtype: FSMidInfo
        """
        return self._flight_sheet

    @flight_sheet.setter
    def flight_sheet(self, flight_sheet):
        """Sets the flight_sheet of this WorkerListItem.


        :param flight_sheet: The flight_sheet of this WorkerListItem.  # noqa: E501
        :type: FSMidInfo
        """

        self._flight_sheet = flight_sheet

    @property
    def overclock(self):
        """Gets the overclock of this WorkerListItem.  # noqa: E501

        Actually applied overclock  # noqa: E501

        :return: The overclock of this WorkerListItem.  # noqa: E501
        :rtype: object
        """
        return self._overclock

    @overclock.setter
    def overclock(self, overclock):
        """Sets the overclock of this WorkerListItem.

        Actually applied overclock  # noqa: E501

        :param overclock: The overclock of this WorkerListItem.  # noqa: E501
        :type: object
        """

        self._overclock = overclock

    @property
    def tuned_miners(self):
        """Gets the tuned_miners of this WorkerListItem.  # noqa: E501

        List of miner names from active flight sheet that are tuned in this worker.  # noqa: E501

        :return: The tuned_miners of this WorkerListItem.  # noqa: E501
        :rtype: list[MinerName]
        """
        return self._tuned_miners

    @tuned_miners.setter
    def tuned_miners(self, tuned_miners):
        """Sets the tuned_miners of this WorkerListItem.

        List of miner names from active flight sheet that are tuned in this worker.  # noqa: E501

        :param tuned_miners: The tuned_miners of this WorkerListItem.  # noqa: E501
        :type: list[MinerName]
        """

        self._tuned_miners = tuned_miners

    @property
    def miners_summary(self):
        """Gets the miners_summary of this WorkerListItem.  # noqa: E501


        :return: The miners_summary of this WorkerListItem.  # noqa: E501
        :rtype: object
        """
        return self._miners_summary

    @miners_summary.setter
    def miners_summary(self, miners_summary):
        """Sets the miners_summary of this WorkerListItem.


        :param miners_summary: The miners_summary of this WorkerListItem.  # noqa: E501
        :type: object
        """

        self._miners_summary = miners_summary

    @property
    def miners_stats(self):
        """Gets the miners_stats of this WorkerListItem.  # noqa: E501


        :return: The miners_stats of this WorkerListItem.  # noqa: E501
        :rtype: object
        """
        return self._miners_stats

    @miners_stats.setter
    def miners_stats(self, miners_stats):
        """Sets the miners_stats of this WorkerListItem.


        :param miners_stats: The miners_stats of this WorkerListItem.  # noqa: E501
        :type: object
        """

        self._miners_stats = miners_stats

    @property
    def hardware_info(self):
        """Gets the hardware_info of this WorkerListItem.  # noqa: E501

        Hardware information  # noqa: E501

        :return: The hardware_info of this WorkerListItem.  # noqa: E501
        :rtype: object
        """
        return self._hardware_info

    @hardware_info.setter
    def hardware_info(self, hardware_info):
        """Sets the hardware_info of this WorkerListItem.

        Hardware information  # noqa: E501

        :param hardware_info: The hardware_info of this WorkerListItem.  # noqa: E501
        :type: object
        """

        self._hardware_info = hardware_info

    @property
    def hardware_stats(self):
        """Gets the hardware_stats of this WorkerListItem.  # noqa: E501

        Hardware stats  # noqa: E501

        :return: The hardware_stats of this WorkerListItem.  # noqa: E501
        :rtype: object
        """
        return self._hardware_stats

    @hardware_stats.setter
    def hardware_stats(self, hardware_stats):
        """Sets the hardware_stats of this WorkerListItem.

        Hardware stats  # noqa: E501

        :param hardware_stats: The hardware_stats of this WorkerListItem.  # noqa: E501
        :type: object
        """

        self._hardware_stats = hardware_stats

    @property
    def gpu_summary(self):
        """Gets the gpu_summary of this WorkerListItem.  # noqa: E501

        GPU summary stats  # noqa: E501

        :return: The gpu_summary of this WorkerListItem.  # noqa: E501
        :rtype: object
        """
        return self._gpu_summary

    @gpu_summary.setter
    def gpu_summary(self, gpu_summary):
        """Sets the gpu_summary of this WorkerListItem.

        GPU summary stats  # noqa: E501

        :param gpu_summary: The gpu_summary of this WorkerListItem.  # noqa: E501
        :type: object
        """

        self._gpu_summary = gpu_summary

    @property
    def gpu_info(self):
        """Gets the gpu_info of this WorkerListItem.  # noqa: E501

        GPU information  # noqa: E501

        :return: The gpu_info of this WorkerListItem.  # noqa: E501
        :rtype: list[GpuInfo]
        """
        return self._gpu_info

    @gpu_info.setter
    def gpu_info(self, gpu_info):
        """Sets the gpu_info of this WorkerListItem.

        GPU information  # noqa: E501

        :param gpu_info: The gpu_info of this WorkerListItem.  # noqa: E501
        :type: list[GpuInfo]
        """

        self._gpu_info = gpu_info

    @property
    def gpu_stats(self):
        """Gets the gpu_stats of this WorkerListItem.  # noqa: E501

        GPU stats  # noqa: E501

        :return: The gpu_stats of this WorkerListItem.  # noqa: E501
        :rtype: list[object]
        """
        return self._gpu_stats

    @gpu_stats.setter
    def gpu_stats(self, gpu_stats):
        """Sets the gpu_stats of this WorkerListItem.

        GPU stats  # noqa: E501

        :param gpu_stats: The gpu_stats of this WorkerListItem.  # noqa: E501
        :type: list[object]
        """

        self._gpu_stats = gpu_stats

    @property
    def asic_info(self):
        """Gets the asic_info of this WorkerListItem.  # noqa: E501

        ASIC information  # noqa: E501

        :return: The asic_info of this WorkerListItem.  # noqa: E501
        :rtype: object
        """
        return self._asic_info

    @asic_info.setter
    def asic_info(self, asic_info):
        """Sets the asic_info of this WorkerListItem.

        ASIC information  # noqa: E501

        :param asic_info: The asic_info of this WorkerListItem.  # noqa: E501
        :type: object
        """

        self._asic_info = asic_info

    @property
    def asichub_id(self):
        """Gets the asichub_id of this WorkerListItem.  # noqa: E501

        ID of AsicHUB which manages this ASIC  # noqa: E501

        :return: The asichub_id of this WorkerListItem.  # noqa: E501
        :rtype: int
        """
        return self._asichub_id

    @asichub_id.setter
    def asichub_id(self, asichub_id):
        """Sets the asichub_id of this WorkerListItem.

        ID of AsicHUB which manages this ASIC  # noqa: E501

        :param asichub_id: The asichub_id of this WorkerListItem.  # noqa: E501
        :type: int
        """

        self._asichub_id = asichub_id

    @property
    def asic_stats(self):
        """Gets the asic_stats of this WorkerListItem.  # noqa: E501

        ASIC stats  # noqa: E501

        :return: The asic_stats of this WorkerListItem.  # noqa: E501
        :rtype: object
        """
        return self._asic_stats

    @asic_stats.setter
    def asic_stats(self, asic_stats):
        """Sets the asic_stats of this WorkerListItem.

        ASIC stats  # noqa: E501

        :param asic_stats: The asic_stats of this WorkerListItem.  # noqa: E501
        :type: object
        """

        self._asic_stats = asic_stats

    @property
    def watchdog(self):
        """Gets the watchdog of this WorkerListItem.  # noqa: E501

        Watchdog system  # noqa: E501

        :return: The watchdog of this WorkerListItem.  # noqa: E501
        :rtype: object
        """
        return self._watchdog

    @watchdog.setter
    def watchdog(self, watchdog):
        """Sets the watchdog of this WorkerListItem.

        Watchdog system  # noqa: E501

        :param watchdog: The watchdog of this WorkerListItem.  # noqa: E501
        :type: object
        """

        self._watchdog = watchdog

    @property
    def options(self):
        """Gets the options of this WorkerListItem.  # noqa: E501

        Worker options. This object will be merged with existing one on update.   # noqa: E501

        :return: The options of this WorkerListItem.  # noqa: E501
        :rtype: object
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this WorkerListItem.

        Worker options. This object will be merged with existing one on update.   # noqa: E501

        :param options: The options of this WorkerListItem.  # noqa: E501
        :type: object
        """

        self._options = options

    @property
    def hardware_power_draw(self):
        """Gets the hardware_power_draw of this WorkerListItem.  # noqa: E501

        Power consumption of worker's hardware, watts  # noqa: E501

        :return: The hardware_power_draw of this WorkerListItem.  # noqa: E501
        :rtype: int
        """
        return self._hardware_power_draw

    @hardware_power_draw.setter
    def hardware_power_draw(self, hardware_power_draw):
        """Sets the hardware_power_draw of this WorkerListItem.

        Power consumption of worker's hardware, watts  # noqa: E501

        :param hardware_power_draw: The hardware_power_draw of this WorkerListItem.  # noqa: E501
        :type: int
        """

        self._hardware_power_draw = hardware_power_draw

    @property
    def psu_efficiency(self):
        """Gets the psu_efficiency of this WorkerListItem.  # noqa: E501

        Efficiency of power supply unit, %  # noqa: E501

        :return: The psu_efficiency of this WorkerListItem.  # noqa: E501
        :rtype: int
        """
        return self._psu_efficiency

    @psu_efficiency.setter
    def psu_efficiency(self, psu_efficiency):
        """Sets the psu_efficiency of this WorkerListItem.

        Efficiency of power supply unit, %  # noqa: E501

        :param psu_efficiency: The psu_efficiency of this WorkerListItem.  # noqa: E501
        :type: int
        """

        self._psu_efficiency = psu_efficiency

    @property
    def octofan_correct_power(self):
        """Gets the octofan_correct_power of this WorkerListItem.  # noqa: E501

        Apply power correction settings to power consumption value from Octominer fan controller. Default is false.  # noqa: E501

        :return: The octofan_correct_power of this WorkerListItem.  # noqa: E501
        :rtype: bool
        """
        return self._octofan_correct_power

    @octofan_correct_power.setter
    def octofan_correct_power(self, octofan_correct_power):
        """Sets the octofan_correct_power of this WorkerListItem.

        Apply power correction settings to power consumption value from Octominer fan controller. Default is false.  # noqa: E501

        :param octofan_correct_power: The octofan_correct_power of this WorkerListItem.  # noqa: E501
        :type: bool
        """

        self._octofan_correct_power = octofan_correct_power

    @property
    def autofan(self):
        """Gets the autofan of this WorkerListItem.  # noqa: E501

        Autofan configuration  # noqa: E501

        :return: The autofan of this WorkerListItem.  # noqa: E501
        :rtype: object
        """
        return self._autofan

    @autofan.setter
    def autofan(self, autofan):
        """Sets the autofan of this WorkerListItem.

        Autofan configuration  # noqa: E501

        :param autofan: The autofan of this WorkerListItem.  # noqa: E501
        :type: object
        """

        self._autofan = autofan

    @property
    def octofan(self):
        """Gets the octofan of this WorkerListItem.  # noqa: E501

        Configuration for Octominer fan controller  # noqa: E501

        :return: The octofan of this WorkerListItem.  # noqa: E501
        :rtype: object
        """
        return self._octofan

    @octofan.setter
    def octofan(self, octofan):
        """Sets the octofan of this WorkerListItem.

        Configuration for Octominer fan controller  # noqa: E501

        :param octofan: The octofan of this WorkerListItem.  # noqa: E501
        :type: object
        """

        self._octofan = octofan

    @property
    def octofan_stats(self):
        """Gets the octofan_stats of this WorkerListItem.  # noqa: E501

        Octominer's fan controller stats  # noqa: E501

        :return: The octofan_stats of this WorkerListItem.  # noqa: E501
        :rtype: object
        """
        return self._octofan_stats

    @octofan_stats.setter
    def octofan_stats(self, octofan_stats):
        """Sets the octofan_stats of this WorkerListItem.

        Octominer's fan controller stats  # noqa: E501

        :param octofan_stats: The octofan_stats of this WorkerListItem.  # noqa: E501
        :type: object
        """

        self._octofan_stats = octofan_stats

    @property
    def coolbox(self):
        """Gets the coolbox of this WorkerListItem.  # noqa: E501

        Configuration for Coolbox fan controller  # noqa: E501

        :return: The coolbox of this WorkerListItem.  # noqa: E501
        :rtype: object
        """
        return self._coolbox

    @coolbox.setter
    def coolbox(self, coolbox):
        """Sets the coolbox of this WorkerListItem.

        Configuration for Coolbox fan controller  # noqa: E501

        :param coolbox: The coolbox of this WorkerListItem.  # noqa: E501
        :type: object
        """

        self._coolbox = coolbox

    @property
    def coolbox_info(self):
        """Gets the coolbox_info of this WorkerListItem.  # noqa: E501

        Information about installed Ykeda Autofan controller  # noqa: E501

        :return: The coolbox_info of this WorkerListItem.  # noqa: E501
        :rtype: object
        """
        return self._coolbox_info

    @coolbox_info.setter
    def coolbox_info(self, coolbox_info):
        """Sets the coolbox_info of this WorkerListItem.

        Information about installed Ykeda Autofan controller  # noqa: E501

        :param coolbox_info: The coolbox_info of this WorkerListItem.  # noqa: E501
        :type: object
        """

        self._coolbox_info = coolbox_info

    @property
    def coolbox_stats(self):
        """Gets the coolbox_stats of this WorkerListItem.  # noqa: E501

        Coolbox fan controller stats  # noqa: E501

        :return: The coolbox_stats of this WorkerListItem.  # noqa: E501
        :rtype: object
        """
        return self._coolbox_stats

    @coolbox_stats.setter
    def coolbox_stats(self, coolbox_stats):
        """Sets the coolbox_stats of this WorkerListItem.

        Coolbox fan controller stats  # noqa: E501

        :param coolbox_stats: The coolbox_stats of this WorkerListItem.  # noqa: E501
        :type: object
        """

        self._coolbox_stats = coolbox_stats

    @property
    def fanflap(self):
        """Gets the fanflap of this WorkerListItem.  # noqa: E501

        Configuration for FanFlap controller  # noqa: E501

        :return: The fanflap of this WorkerListItem.  # noqa: E501
        :rtype: object
        """
        return self._fanflap

    @fanflap.setter
    def fanflap(self, fanflap):
        """Sets the fanflap of this WorkerListItem.

        Configuration for FanFlap controller  # noqa: E501

        :param fanflap: The fanflap of this WorkerListItem.  # noqa: E501
        :type: object
        """

        self._fanflap = fanflap

    @property
    def fanflap_stats(self):
        """Gets the fanflap_stats of this WorkerListItem.  # noqa: E501


        :return: The fanflap_stats of this WorkerListItem.  # noqa: E501
        :rtype: FanflapStats
        """
        return self._fanflap_stats

    @fanflap_stats.setter
    def fanflap_stats(self, fanflap_stats):
        """Sets the fanflap_stats of this WorkerListItem.


        :param fanflap_stats: The fanflap_stats of this WorkerListItem.  # noqa: E501
        :type: FanflapStats
        """

        self._fanflap_stats = fanflap_stats

    @property
    def powermeter(self):
        """Gets the powermeter of this WorkerListItem.  # noqa: E501

        Configuration for Powermeter controller  # noqa: E501

        :return: The powermeter of this WorkerListItem.  # noqa: E501
        :rtype: object
        """
        return self._powermeter

    @powermeter.setter
    def powermeter(self, powermeter):
        """Sets the powermeter of this WorkerListItem.

        Configuration for Powermeter controller  # noqa: E501

        :param powermeter: The powermeter of this WorkerListItem.  # noqa: E501
        :type: object
        """

        self._powermeter = powermeter

    @property
    def powermeter_stats(self):
        """Gets the powermeter_stats of this WorkerListItem.  # noqa: E501


        :return: The powermeter_stats of this WorkerListItem.  # noqa: E501
        :rtype: PowermeterStats
        """
        return self._powermeter_stats

    @powermeter_stats.setter
    def powermeter_stats(self, powermeter_stats):
        """Sets the powermeter_stats of this WorkerListItem.


        :param powermeter_stats: The powermeter_stats of this WorkerListItem.  # noqa: E501
        :type: PowermeterStats
        """

        self._powermeter_stats = powermeter_stats

    @property
    def donnager_relay(self):
        """Gets the donnager_relay of this WorkerListItem.  # noqa: E501

        Donnager Relay configuration  # noqa: E501

        :return: The donnager_relay of this WorkerListItem.  # noqa: E501
        :rtype: object
        """
        return self._donnager_relay

    @donnager_relay.setter
    def donnager_relay(self, donnager_relay):
        """Sets the donnager_relay of this WorkerListItem.

        Donnager Relay configuration  # noqa: E501

        :param donnager_relay: The donnager_relay of this WorkerListItem.  # noqa: E501
        :type: object
        """

        self._donnager_relay = donnager_relay

    @property
    def donnager_relay_info(self):
        """Gets the donnager_relay_info of this WorkerListItem.  # noqa: E501

        Donnager Relay information  # noqa: E501

        :return: The donnager_relay_info of this WorkerListItem.  # noqa: E501
        :rtype: object
        """
        return self._donnager_relay_info

    @donnager_relay_info.setter
    def donnager_relay_info(self, donnager_relay_info):
        """Sets the donnager_relay_info of this WorkerListItem.

        Donnager Relay information  # noqa: E501

        :param donnager_relay_info: The donnager_relay_info of this WorkerListItem.  # noqa: E501
        :type: object
        """

        self._donnager_relay_info = donnager_relay_info

    @property
    def donnager_relay_stats(self):
        """Gets the donnager_relay_stats of this WorkerListItem.  # noqa: E501

        Donnager Relay stats  # noqa: E501

        :return: The donnager_relay_stats of this WorkerListItem.  # noqa: E501
        :rtype: object
        """
        return self._donnager_relay_stats

    @donnager_relay_stats.setter
    def donnager_relay_stats(self, donnager_relay_stats):
        """Sets the donnager_relay_stats of this WorkerListItem.

        Donnager Relay stats  # noqa: E501

        :param donnager_relay_stats: The donnager_relay_stats of this WorkerListItem.  # noqa: E501
        :type: object
        """

        self._donnager_relay_stats = donnager_relay_stats

    @property
    def ykeda_autofan(self):
        """Gets the ykeda_autofan of this WorkerListItem.  # noqa: E501

        Configuration for Ykeda Autofan controller  # noqa: E501

        :return: The ykeda_autofan of this WorkerListItem.  # noqa: E501
        :rtype: object
        """
        return self._ykeda_autofan

    @ykeda_autofan.setter
    def ykeda_autofan(self, ykeda_autofan):
        """Sets the ykeda_autofan of this WorkerListItem.

        Configuration for Ykeda Autofan controller  # noqa: E501

        :param ykeda_autofan: The ykeda_autofan of this WorkerListItem.  # noqa: E501
        :type: object
        """

        self._ykeda_autofan = ykeda_autofan

    @property
    def ykeda_autofan_stats(self):
        """Gets the ykeda_autofan_stats of this WorkerListItem.  # noqa: E501

        Ykeda Autofan controller stats  # noqa: E501

        :return: The ykeda_autofan_stats of this WorkerListItem.  # noqa: E501
        :rtype: object
        """
        return self._ykeda_autofan_stats

    @ykeda_autofan_stats.setter
    def ykeda_autofan_stats(self, ykeda_autofan_stats):
        """Sets the ykeda_autofan_stats of this WorkerListItem.

        Ykeda Autofan controller stats  # noqa: E501

        :param ykeda_autofan_stats: The ykeda_autofan_stats of this WorkerListItem.  # noqa: E501
        :type: object
        """

        self._ykeda_autofan_stats = ykeda_autofan_stats

    @property
    def commands(self):
        """Gets the commands of this WorkerListItem.  # noqa: E501

        Worker queue commands  # noqa: E501

        :return: The commands of this WorkerListItem.  # noqa: E501
        :rtype: list[object]
        """
        return self._commands

    @commands.setter
    def commands(self, commands):
        """Sets the commands of this WorkerListItem.

        Worker queue commands  # noqa: E501

        :param commands: The commands of this WorkerListItem.  # noqa: E501
        :type: list[object]
        """

        self._commands = commands

    @property
    def benchmark_id(self):
        """Gets the benchmark_id of this WorkerListItem.  # noqa: E501

        ID of currently running benchmark. This field is present until the benchmark is finished.  # noqa: E501

        :return: The benchmark_id of this WorkerListItem.  # noqa: E501
        :rtype: int
        """
        return self._benchmark_id

    @benchmark_id.setter
    def benchmark_id(self, benchmark_id):
        """Sets the benchmark_id of this WorkerListItem.

        ID of currently running benchmark. This field is present until the benchmark is finished.  # noqa: E501

        :param benchmark_id: The benchmark_id of this WorkerListItem.  # noqa: E501
        :type: int
        """

        self._benchmark_id = benchmark_id

    @property
    def asic_config(self):
        """Gets the asic_config of this WorkerListItem.  # noqa: E501

        Settings for ASICs with Hive firmware, depends on model and firmware version  # noqa: E501

        :return: The asic_config of this WorkerListItem.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._asic_config

    @asic_config.setter
    def asic_config(self, asic_config):
        """Sets the asic_config of this WorkerListItem.

        Settings for ASICs with Hive firmware, depends on model and firmware version  # noqa: E501

        :param asic_config: The asic_config of this WorkerListItem.  # noqa: E501
        :type: dict(str, str)
        """

        self._asic_config = asic_config

    @property
    def messages_counts(self):
        """Gets the messages_counts of this WorkerListItem.  # noqa: E501


        :return: The messages_counts of this WorkerListItem.  # noqa: E501
        :rtype: object
        """
        return self._messages_counts

    @messages_counts.setter
    def messages_counts(self, messages_counts):
        """Sets the messages_counts of this WorkerListItem.


        :param messages_counts: The messages_counts of this WorkerListItem.  # noqa: E501
        :type: object
        """

        self._messages_counts = messages_counts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WorkerListItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkerListItem):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WorkerListItem):
            return True

        return self.to_dict() != other.to_dict()
