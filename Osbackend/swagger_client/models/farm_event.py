# coding: utf-8

"""
    Hive OS API

    App API for Hive OS 2.0  # noqa: E501

    OpenAPI spec version: 2.1-beta
    Contact: brain@hiveos.farm
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class FarmEvent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'timestamp': 'int',
        'type_id': 'int',
        'type': 'str',
        'by_admin': 'bool',
        'is_group': 'bool',
        'group_size': 'int',
        'details': 'object',
        'user': 'object',
        'worker': 'object'
    }

    attribute_map = {
        'id': 'id',
        'timestamp': 'timestamp',
        'type_id': 'type_id',
        'type': 'type',
        'by_admin': 'by_admin',
        'is_group': 'is_group',
        'group_size': 'group_size',
        'details': 'details',
        'user': 'user',
        'worker': 'worker'
    }

    def __init__(self, id=None, timestamp=None, type_id=None, type=None, by_admin=None, is_group=None, group_size=None, details=None, user=None, worker=None, _configuration=None):  # noqa: E501
        """FarmEvent - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._timestamp = None
        self._type_id = None
        self._type = None
        self._by_admin = None
        self._is_group = None
        self._group_size = None
        self._details = None
        self._user = None
        self._worker = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if timestamp is not None:
            self.timestamp = timestamp
        if type_id is not None:
            self.type_id = type_id
        if type is not None:
            self.type = type
        if by_admin is not None:
            self.by_admin = by_admin
        if is_group is not None:
            self.is_group = is_group
        if group_size is not None:
            self.group_size = group_size
        if details is not None:
            self.details = details
        if user is not None:
            self.user = user
        if worker is not None:
            self.worker = worker

    @property
    def id(self):
        """Gets the id of this FarmEvent.  # noqa: E501


        :return: The id of this FarmEvent.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FarmEvent.


        :param id: The id of this FarmEvent.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def timestamp(self):
        """Gets the timestamp of this FarmEvent.  # noqa: E501


        :return: The timestamp of this FarmEvent.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this FarmEvent.


        :param timestamp: The timestamp of this FarmEvent.  # noqa: E501
        :type: int
        """

        self._timestamp = timestamp

    @property
    def type_id(self):
        """Gets the type_id of this FarmEvent.  # noqa: E501


        :return: The type_id of this FarmEvent.  # noqa: E501
        :rtype: int
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this FarmEvent.


        :param type_id: The type_id of this FarmEvent.  # noqa: E501
        :type: int
        """

        self._type_id = type_id

    @property
    def type(self):
        """Gets the type of this FarmEvent.  # noqa: E501


        :return: The type of this FarmEvent.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FarmEvent.


        :param type: The type of this FarmEvent.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def by_admin(self):
        """Gets the by_admin of this FarmEvent.  # noqa: E501

        Action was performed by Hive administrator  # noqa: E501

        :return: The by_admin of this FarmEvent.  # noqa: E501
        :rtype: bool
        """
        return self._by_admin

    @by_admin.setter
    def by_admin(self, by_admin):
        """Sets the by_admin of this FarmEvent.

        Action was performed by Hive administrator  # noqa: E501

        :param by_admin: The by_admin of this FarmEvent.  # noqa: E501
        :type: bool
        """

        self._by_admin = by_admin

    @property
    def is_group(self):
        """Gets the is_group of this FarmEvent.  # noqa: E501

        Indicates that this is a group of events  # noqa: E501

        :return: The is_group of this FarmEvent.  # noqa: E501
        :rtype: bool
        """
        return self._is_group

    @is_group.setter
    def is_group(self, is_group):
        """Sets the is_group of this FarmEvent.

        Indicates that this is a group of events  # noqa: E501

        :param is_group: The is_group of this FarmEvent.  # noqa: E501
        :type: bool
        """

        self._is_group = is_group

    @property
    def group_size(self):
        """Gets the group_size of this FarmEvent.  # noqa: E501

        How many events the group contains  # noqa: E501

        :return: The group_size of this FarmEvent.  # noqa: E501
        :rtype: int
        """
        return self._group_size

    @group_size.setter
    def group_size(self, group_size):
        """Sets the group_size of this FarmEvent.

        How many events the group contains  # noqa: E501

        :param group_size: The group_size of this FarmEvent.  # noqa: E501
        :type: int
        """

        self._group_size = group_size

    @property
    def details(self):
        """Gets the details of this FarmEvent.  # noqa: E501

        Details object is specific to event type  # noqa: E501

        :return: The details of this FarmEvent.  # noqa: E501
        :rtype: object
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this FarmEvent.

        Details object is specific to event type  # noqa: E501

        :param details: The details of this FarmEvent.  # noqa: E501
        :type: object
        """

        self._details = details

    @property
    def user(self):
        """Gets the user of this FarmEvent.  # noqa: E501

        User who performed the action  # noqa: E501

        :return: The user of this FarmEvent.  # noqa: E501
        :rtype: object
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this FarmEvent.

        User who performed the action  # noqa: E501

        :param user: The user of this FarmEvent.  # noqa: E501
        :type: object
        """

        self._user = user

    @property
    def worker(self):
        """Gets the worker of this FarmEvent.  # noqa: E501

        Related worker  # noqa: E501

        :return: The worker of this FarmEvent.  # noqa: E501
        :rtype: object
        """
        return self._worker

    @worker.setter
    def worker(self, worker):
        """Sets the worker of this FarmEvent.

        Related worker  # noqa: E501

        :param worker: The worker of this FarmEvent.  # noqa: E501
        :type: object
        """

        self._worker = worker

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FarmEvent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FarmEvent):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FarmEvent):
            return True

        return self.to_dict() != other.to_dict()
