# coding: utf-8

"""
    Hive OS API

    App API for Hive OS 2.0  # noqa: E501

    OpenAPI spec version: 2.1-beta
    Contact: brain@hiveos.farm
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class LoginRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'login': 'str',
        'password': 'str',
        'twofa_code': 'TwofaCode',
        'remember': 'bool'
    }

    attribute_map = {
        'login': 'login',
        'password': 'password',
        'twofa_code': 'twofa_code',
        'remember': 'remember'
    }

    def __init__(self, login=None, password=None, twofa_code=None, remember=None, _configuration=None):  # noqa: E501
        """LoginRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._login = None
        self._password = None
        self._twofa_code = None
        self._remember = None
        self.discriminator = None

        self.login = login
        self.password = password
        if twofa_code is not None:
            self.twofa_code = twofa_code
        if remember is not None:
            self.remember = remember

    @property
    def login(self):
        """Gets the login of this LoginRequest.  # noqa: E501

        User login or email  # noqa: E501

        :return: The login of this LoginRequest.  # noqa: E501
        :rtype: str
        """
        return self._login

    @login.setter
    def login(self, login):
        """Sets the login of this LoginRequest.

        User login or email  # noqa: E501

        :param login: The login of this LoginRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and login is None:
            raise ValueError("Invalid value for `login`, must not be `None`")  # noqa: E501

        self._login = login

    @property
    def password(self):
        """Gets the password of this LoginRequest.  # noqa: E501

        User password  # noqa: E501

        :return: The password of this LoginRequest.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this LoginRequest.

        User password  # noqa: E501

        :param password: The password of this LoginRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501

        self._password = password

    @property
    def twofa_code(self):
        """Gets the twofa_code of this LoginRequest.  # noqa: E501


        :return: The twofa_code of this LoginRequest.  # noqa: E501
        :rtype: TwofaCode
        """
        return self._twofa_code

    @twofa_code.setter
    def twofa_code(self, twofa_code):
        """Sets the twofa_code of this LoginRequest.


        :param twofa_code: The twofa_code of this LoginRequest.  # noqa: E501
        :type: TwofaCode
        """

        self._twofa_code = twofa_code

    @property
    def remember(self):
        """Gets the remember of this LoginRequest.  # noqa: E501


        :return: The remember of this LoginRequest.  # noqa: E501
        :rtype: bool
        """
        return self._remember

    @remember.setter
    def remember(self, remember):
        """Sets the remember of this LoginRequest.


        :param remember: The remember of this LoginRequest.  # noqa: E501
        :type: bool
        """

        self._remember = remember

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LoginRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LoginRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LoginRequest):
            return True

        return self.to_dict() != other.to_dict()
