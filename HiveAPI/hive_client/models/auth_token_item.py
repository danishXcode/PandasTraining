# coding: utf-8

"""
    Hive OS API

    App API for Hive OS 2.0  # noqa: E501

    OpenAPI spec version: 2.1-beta
    Contact: brain@hiveos.farm
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class AuthTokenItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'personal': 'bool',
        'active': 'bool',
        'current': 'bool',
        'created_at': 'int',
        'expires_at': 'int',
        'last_activity': 'int',
        'ip': 'str',
        'hostname': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'personal': 'personal',
        'active': 'active',
        'current': 'current',
        'created_at': 'created_at',
        'expires_at': 'expires_at',
        'last_activity': 'last_activity',
        'ip': 'ip',
        'hostname': 'hostname'
    }

    def __init__(self, id=None, name=None, personal=None, active=None, current=None, created_at=None, expires_at=None, last_activity=None, ip=None, hostname=None, _configuration=None):  # noqa: E501
        """AuthTokenItem - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._personal = None
        self._active = None
        self._current = None
        self._created_at = None
        self._expires_at = None
        self._last_activity = None
        self._ip = None
        self._hostname = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if personal is not None:
            self.personal = personal
        if active is not None:
            self.active = active
        if current is not None:
            self.current = current
        if created_at is not None:
            self.created_at = created_at
        if expires_at is not None:
            self.expires_at = expires_at
        if last_activity is not None:
            self.last_activity = last_activity
        if ip is not None:
            self.ip = ip
        if hostname is not None:
            self.hostname = hostname

    @property
    def id(self):
        """Gets the id of this AuthTokenItem.  # noqa: E501

        Token ID  # noqa: E501

        :return: The id of this AuthTokenItem.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AuthTokenItem.

        Token ID  # noqa: E501

        :param id: The id of this AuthTokenItem.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this AuthTokenItem.  # noqa: E501

        Display name  # noqa: E501

        :return: The name of this AuthTokenItem.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AuthTokenItem.

        Display name  # noqa: E501

        :param name: The name of this AuthTokenItem.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def personal(self):
        """Gets the personal of this AuthTokenItem.  # noqa: E501

        Is manually created personal token  # noqa: E501

        :return: The personal of this AuthTokenItem.  # noqa: E501
        :rtype: bool
        """
        return self._personal

    @personal.setter
    def personal(self, personal):
        """Sets the personal of this AuthTokenItem.

        Is manually created personal token  # noqa: E501

        :param personal: The personal of this AuthTokenItem.  # noqa: E501
        :type: bool
        """

        self._personal = personal

    @property
    def active(self):
        """Gets the active of this AuthTokenItem.  # noqa: E501

        Is active (for personal tokens)  # noqa: E501

        :return: The active of this AuthTokenItem.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this AuthTokenItem.

        Is active (for personal tokens)  # noqa: E501

        :param active: The active of this AuthTokenItem.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def current(self):
        """Gets the current of this AuthTokenItem.  # noqa: E501

        Is current session token  # noqa: E501

        :return: The current of this AuthTokenItem.  # noqa: E501
        :rtype: bool
        """
        return self._current

    @current.setter
    def current(self, current):
        """Sets the current of this AuthTokenItem.

        Is current session token  # noqa: E501

        :param current: The current of this AuthTokenItem.  # noqa: E501
        :type: bool
        """

        self._current = current

    @property
    def created_at(self):
        """Gets the created_at of this AuthTokenItem.  # noqa: E501

        When token was created  # noqa: E501

        :return: The created_at of this AuthTokenItem.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this AuthTokenItem.

        When token was created  # noqa: E501

        :param created_at: The created_at of this AuthTokenItem.  # noqa: E501
        :type: int
        """

        self._created_at = created_at

    @property
    def expires_at(self):
        """Gets the expires_at of this AuthTokenItem.  # noqa: E501

        When token expires  # noqa: E501

        :return: The expires_at of this AuthTokenItem.  # noqa: E501
        :rtype: int
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this AuthTokenItem.

        When token expires  # noqa: E501

        :param expires_at: The expires_at of this AuthTokenItem.  # noqa: E501
        :type: int
        """

        self._expires_at = expires_at

    @property
    def last_activity(self):
        """Gets the last_activity of this AuthTokenItem.  # noqa: E501

        When token was last used (5 minute precision)  # noqa: E501

        :return: The last_activity of this AuthTokenItem.  # noqa: E501
        :rtype: int
        """
        return self._last_activity

    @last_activity.setter
    def last_activity(self, last_activity):
        """Sets the last_activity of this AuthTokenItem.

        When token was last used (5 minute precision)  # noqa: E501

        :param last_activity: The last_activity of this AuthTokenItem.  # noqa: E501
        :type: int
        """

        self._last_activity = last_activity

    @property
    def ip(self):
        """Gets the ip of this AuthTokenItem.  # noqa: E501

        IP address of the client who created the token  # noqa: E501

        :return: The ip of this AuthTokenItem.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this AuthTokenItem.

        IP address of the client who created the token  # noqa: E501

        :param ip: The ip of this AuthTokenItem.  # noqa: E501
        :type: str
        """

        self._ip = ip

    @property
    def hostname(self):
        """Gets the hostname of this AuthTokenItem.  # noqa: E501

        Resolved hostname  # noqa: E501

        :return: The hostname of this AuthTokenItem.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this AuthTokenItem.

        Resolved hostname  # noqa: E501

        :param hostname: The hostname of this AuthTokenItem.  # noqa: E501
        :type: str
        """

        self._hostname = hostname

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AuthTokenItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuthTokenItem):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AuthTokenItem):
            return True

        return self.to_dict() != other.to_dict()
