# coding: utf-8

"""
    Hive OS API

    App API for Hive OS 2.0  # noqa: E501

    OpenAPI spec version: 2.1-beta
    Contact: brain@hiveos.farm
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class GpuInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bus_id': 'str',
        'bus_number': 'int',
        'brand': 'str',
        'model': 'str',
        'short_name': 'str',
        'details': 'object',
        'power_limit': 'object',
        'index': 'int'
    }

    attribute_map = {
        'bus_id': 'bus_id',
        'bus_number': 'bus_number',
        'brand': 'brand',
        'model': 'model',
        'short_name': 'short_name',
        'details': 'details',
        'power_limit': 'power_limit',
        'index': 'index'
    }

    def __init__(self, bus_id=None, bus_number=None, brand=None, model=None, short_name=None, details=None, power_limit=None, index=None, _configuration=None):  # noqa: E501
        """GpuInfo - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._bus_id = None
        self._bus_number = None
        self._brand = None
        self._model = None
        self._short_name = None
        self._details = None
        self._power_limit = None
        self._index = None
        self.discriminator = None

        if bus_id is not None:
            self.bus_id = bus_id
        if bus_number is not None:
            self.bus_number = bus_number
        if brand is not None:
            self.brand = brand
        if model is not None:
            self.model = model
        if short_name is not None:
            self.short_name = short_name
        if details is not None:
            self.details = details
        if power_limit is not None:
            self.power_limit = power_limit
        if index is not None:
            self.index = index

    @property
    def bus_id(self):
        """Gets the bus_id of this GpuInfo.  # noqa: E501

        GPU bus ID  # noqa: E501

        :return: The bus_id of this GpuInfo.  # noqa: E501
        :rtype: str
        """
        return self._bus_id

    @bus_id.setter
    def bus_id(self, bus_id):
        """Sets the bus_id of this GpuInfo.

        GPU bus ID  # noqa: E501

        :param bus_id: The bus_id of this GpuInfo.  # noqa: E501
        :type: str
        """

        self._bus_id = bus_id

    @property
    def bus_number(self):
        """Gets the bus_number of this GpuInfo.  # noqa: E501

        GPU bus number  # noqa: E501

        :return: The bus_number of this GpuInfo.  # noqa: E501
        :rtype: int
        """
        return self._bus_number

    @bus_number.setter
    def bus_number(self, bus_number):
        """Sets the bus_number of this GpuInfo.

        GPU bus number  # noqa: E501

        :param bus_number: The bus_number of this GpuInfo.  # noqa: E501
        :type: int
        """

        self._bus_number = bus_number

    @property
    def brand(self):
        """Gets the brand of this GpuInfo.  # noqa: E501

        Brand name: amd, nvidia, internal  # noqa: E501

        :return: The brand of this GpuInfo.  # noqa: E501
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this GpuInfo.

        Brand name: amd, nvidia, internal  # noqa: E501

        :param brand: The brand of this GpuInfo.  # noqa: E501
        :type: str
        """

        self._brand = brand

    @property
    def model(self):
        """Gets the model of this GpuInfo.  # noqa: E501

        Model name  # noqa: E501

        :return: The model of this GpuInfo.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this GpuInfo.

        Model name  # noqa: E501

        :param model: The model of this GpuInfo.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def short_name(self):
        """Gets the short_name of this GpuInfo.  # noqa: E501

        Model short name  # noqa: E501

        :return: The short_name of this GpuInfo.  # noqa: E501
        :rtype: str
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        """Sets the short_name of this GpuInfo.

        Model short name  # noqa: E501

        :param short_name: The short_name of this GpuInfo.  # noqa: E501
        :type: str
        """

        self._short_name = short_name

    @property
    def details(self):
        """Gets the details of this GpuInfo.  # noqa: E501


        :return: The details of this GpuInfo.  # noqa: E501
        :rtype: object
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this GpuInfo.


        :param details: The details of this GpuInfo.  # noqa: E501
        :type: object
        """

        self._details = details

    @property
    def power_limit(self):
        """Gets the power_limit of this GpuInfo.  # noqa: E501


        :return: The power_limit of this GpuInfo.  # noqa: E501
        :rtype: object
        """
        return self._power_limit

    @power_limit.setter
    def power_limit(self, power_limit):
        """Sets the power_limit of this GpuInfo.


        :param power_limit: The power_limit of this GpuInfo.  # noqa: E501
        :type: object
        """

        self._power_limit = power_limit

    @property
    def index(self):
        """Gets the index of this GpuInfo.  # noqa: E501

        Index on rig  # noqa: E501

        :return: The index of this GpuInfo.  # noqa: E501
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this GpuInfo.

        Index on rig  # noqa: E501

        :param index: The index of this GpuInfo.  # noqa: E501
        :type: int
        """

        self._index = index

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GpuInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GpuInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GpuInfo):
            return True

        return self.to_dict() != other.to_dict()
