# coding: utf-8

"""
    Hive OS API

    App API for Hive OS 2.0  # noqa: E501

    OpenAPI spec version: 2.1-beta
    Contact: brain@hiveos.farm
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class WorkerRedValues(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'red_temp': 'int',
        'red_mem_temp': 'float',
        'red_cpu_temp': 'float',
        'red_board_temp': 'float',
        'red_fan': 'int',
        'red_asr': 'int',
        'red_la': 'float',
        'red_hashrates': 'list[object]'
    }

    attribute_map = {
        'red_temp': 'red_temp',
        'red_mem_temp': 'red_mem_temp',
        'red_cpu_temp': 'red_cpu_temp',
        'red_board_temp': 'red_board_temp',
        'red_fan': 'red_fan',
        'red_asr': 'red_asr',
        'red_la': 'red_la',
        'red_hashrates': 'red_hashrates'
    }

    def __init__(self, red_temp=None, red_mem_temp=None, red_cpu_temp=None, red_board_temp=None, red_fan=None, red_asr=None, red_la=None, red_hashrates=None, _configuration=None):  # noqa: E501
        """WorkerRedValues - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._red_temp = None
        self._red_mem_temp = None
        self._red_cpu_temp = None
        self._red_board_temp = None
        self._red_fan = None
        self._red_asr = None
        self._red_la = None
        self._red_hashrates = None
        self.discriminator = None

        if red_temp is not None:
            self.red_temp = red_temp
        if red_mem_temp is not None:
            self.red_mem_temp = red_mem_temp
        if red_cpu_temp is not None:
            self.red_cpu_temp = red_cpu_temp
        if red_board_temp is not None:
            self.red_board_temp = red_board_temp
        if red_fan is not None:
            self.red_fan = red_fan
        if red_asr is not None:
            self.red_asr = red_asr
        if red_la is not None:
            self.red_la = red_la
        if red_hashrates is not None:
            self.red_hashrates = red_hashrates

    @property
    def red_temp(self):
        """Gets the red_temp of this WorkerRedValues.  # noqa: E501

        Red Temperature, °C  # noqa: E501

        :return: The red_temp of this WorkerRedValues.  # noqa: E501
        :rtype: int
        """
        return self._red_temp

    @red_temp.setter
    def red_temp(self, red_temp):
        """Sets the red_temp of this WorkerRedValues.

        Red Temperature, °C  # noqa: E501

        :param red_temp: The red_temp of this WorkerRedValues.  # noqa: E501
        :type: int
        """

        self._red_temp = red_temp

    @property
    def red_mem_temp(self):
        """Gets the red_mem_temp of this WorkerRedValues.  # noqa: E501

        Red memory temperature (for rigs), °C  # noqa: E501

        :return: The red_mem_temp of this WorkerRedValues.  # noqa: E501
        :rtype: float
        """
        return self._red_mem_temp

    @red_mem_temp.setter
    def red_mem_temp(self, red_mem_temp):
        """Sets the red_mem_temp of this WorkerRedValues.

        Red memory temperature (for rigs), °C  # noqa: E501

        :param red_mem_temp: The red_mem_temp of this WorkerRedValues.  # noqa: E501
        :type: float
        """

        self._red_mem_temp = red_mem_temp

    @property
    def red_cpu_temp(self):
        """Gets the red_cpu_temp of this WorkerRedValues.  # noqa: E501

        Red CPU temperature (for rigs), °C  # noqa: E501

        :return: The red_cpu_temp of this WorkerRedValues.  # noqa: E501
        :rtype: float
        """
        return self._red_cpu_temp

    @red_cpu_temp.setter
    def red_cpu_temp(self, red_cpu_temp):
        """Sets the red_cpu_temp of this WorkerRedValues.

        Red CPU temperature (for rigs), °C  # noqa: E501

        :param red_cpu_temp: The red_cpu_temp of this WorkerRedValues.  # noqa: E501
        :type: float
        """

        self._red_cpu_temp = red_cpu_temp

    @property
    def red_board_temp(self):
        """Gets the red_board_temp of this WorkerRedValues.  # noqa: E501

        Red Board Temperature (for ASICs), °C  # noqa: E501

        :return: The red_board_temp of this WorkerRedValues.  # noqa: E501
        :rtype: float
        """
        return self._red_board_temp

    @red_board_temp.setter
    def red_board_temp(self, red_board_temp):
        """Sets the red_board_temp of this WorkerRedValues.

        Red Board Temperature (for ASICs), °C  # noqa: E501

        :param red_board_temp: The red_board_temp of this WorkerRedValues.  # noqa: E501
        :type: float
        """

        self._red_board_temp = red_board_temp

    @property
    def red_fan(self):
        """Gets the red_fan of this WorkerRedValues.  # noqa: E501

        Red Fan speed, %  # noqa: E501

        :return: The red_fan of this WorkerRedValues.  # noqa: E501
        :rtype: int
        """
        return self._red_fan

    @red_fan.setter
    def red_fan(self, red_fan):
        """Sets the red_fan of this WorkerRedValues.

        Red Fan speed, %  # noqa: E501

        :param red_fan: The red_fan of this WorkerRedValues.  # noqa: E501
        :type: int
        """

        self._red_fan = red_fan

    @property
    def red_asr(self):
        """Gets the red_asr of this WorkerRedValues.  # noqa: E501

        Red Accepted Shares Ratio, %  # noqa: E501

        :return: The red_asr of this WorkerRedValues.  # noqa: E501
        :rtype: int
        """
        return self._red_asr

    @red_asr.setter
    def red_asr(self, red_asr):
        """Sets the red_asr of this WorkerRedValues.

        Red Accepted Shares Ratio, %  # noqa: E501

        :param red_asr: The red_asr of this WorkerRedValues.  # noqa: E501
        :type: int
        """

        self._red_asr = red_asr

    @property
    def red_la(self):
        """Gets the red_la of this WorkerRedValues.  # noqa: E501

        Red Load Average per one CPU core  # noqa: E501

        :return: The red_la of this WorkerRedValues.  # noqa: E501
        :rtype: float
        """
        return self._red_la

    @red_la.setter
    def red_la(self, red_la):
        """Sets the red_la of this WorkerRedValues.

        Red Load Average per one CPU core  # noqa: E501

        :param red_la: The red_la of this WorkerRedValues.  # noqa: E501
        :type: float
        """

        self._red_la = red_la

    @property
    def red_hashrates(self):
        """Gets the red_hashrates of this WorkerRedValues.  # noqa: E501

        Red hashrates per algo  # noqa: E501

        :return: The red_hashrates of this WorkerRedValues.  # noqa: E501
        :rtype: list[object]
        """
        return self._red_hashrates

    @red_hashrates.setter
    def red_hashrates(self, red_hashrates):
        """Sets the red_hashrates of this WorkerRedValues.

        Red hashrates per algo  # noqa: E501

        :param red_hashrates: The red_hashrates of this WorkerRedValues.  # noqa: E501
        :type: list[object]
        """

        self._red_hashrates = red_hashrates

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WorkerRedValues, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkerRedValues):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WorkerRedValues):
            return True

        return self.to_dict() != other.to_dict()
