# coding: utf-8

"""
    Hive OS API

    App API for Hive OS 2.0  # noqa: E501

    OpenAPI spec version: 2.1-beta
    Contact: brain@hiveos.farm
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class WalletFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'wal': 'str',
        'source': 'str',
        'fetch_balance': 'bool',
        'api_key_id': 'int'
    }

    attribute_map = {
        'name': 'name',
        'wal': 'wal',
        'source': 'source',
        'fetch_balance': 'fetch_balance',
        'api_key_id': 'api_key_id'
    }

    def __init__(self, name=None, wal=None, source=None, fetch_balance=False, api_key_id=None, _configuration=None):  # noqa: E501
        """WalletFields - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._wal = None
        self._source = None
        self._fetch_balance = None
        self._api_key_id = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if wal is not None:
            self.wal = wal
        if source is not None:
            self.source = source
        if fetch_balance is not None:
            self.fetch_balance = fetch_balance
        if api_key_id is not None:
            self.api_key_id = api_key_id

    @property
    def name(self):
        """Gets the name of this WalletFields.  # noqa: E501

        Display name  # noqa: E501

        :return: The name of this WalletFields.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WalletFields.

        Display name  # noqa: E501

        :param name: The name of this WalletFields.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 100):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")  # noqa: E501

        self._name = name

    @property
    def wal(self):
        """Gets the wal of this WalletFields.  # noqa: E501

          # noqa: E501

        :return: The wal of this WalletFields.  # noqa: E501
        :rtype: str
        """
        return self._wal

    @wal.setter
    def wal(self, wal):
        """Sets the wal of this WalletFields.

          # noqa: E501

        :param wal: The wal of this WalletFields.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                wal is not None and len(wal) > 255):
            raise ValueError("Invalid value for `wal`, length must be less than or equal to `255`")  # noqa: E501

        self._wal = wal

    @property
    def source(self):
        """Gets the source of this WalletFields.  # noqa: E501

        Wallet source. Can be either exchange name or any string. For supported exchanges see /hive/wallet_sources endpoint.   # noqa: E501

        :return: The source of this WalletFields.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this WalletFields.

        Wallet source. Can be either exchange name or any string. For supported exchanges see /hive/wallet_sources endpoint.   # noqa: E501

        :param source: The source of this WalletFields.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                source is not None and len(source) > 100):
            raise ValueError("Invalid value for `source`, length must be less than or equal to `100`")  # noqa: E501

        self._source = source

    @property
    def fetch_balance(self):
        """Gets the fetch_balance of this WalletFields.  # noqa: E501

        Try to retrieve wallet balance from blockchain or exchange  # noqa: E501

        :return: The fetch_balance of this WalletFields.  # noqa: E501
        :rtype: bool
        """
        return self._fetch_balance

    @fetch_balance.setter
    def fetch_balance(self, fetch_balance):
        """Sets the fetch_balance of this WalletFields.

        Try to retrieve wallet balance from blockchain or exchange  # noqa: E501

        :param fetch_balance: The fetch_balance of this WalletFields.  # noqa: E501
        :type: bool
        """

        self._fetch_balance = fetch_balance

    @property
    def api_key_id(self):
        """Gets the api_key_id of this WalletFields.  # noqa: E501

        ID of attached API key for balance fetching (if required)  # noqa: E501

        :return: The api_key_id of this WalletFields.  # noqa: E501
        :rtype: int
        """
        return self._api_key_id

    @api_key_id.setter
    def api_key_id(self, api_key_id):
        """Sets the api_key_id of this WalletFields.

        ID of attached API key for balance fetching (if required)  # noqa: E501

        :param api_key_id: The api_key_id of this WalletFields.  # noqa: E501
        :type: int
        """

        self._api_key_id = api_key_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WalletFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WalletFields):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WalletFields):
            return True

        return self.to_dict() != other.to_dict()
