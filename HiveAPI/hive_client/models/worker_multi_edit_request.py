# coding: utf-8

"""
    Hive OS API

    App API for Hive OS 2.0  # noqa: E501

    OpenAPI spec version: 2.1-beta
    Contact: brain@hiveos.farm
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class WorkerMultiEditRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fs_id': 'int',
        'oc_id': 'int',
        'oc_apply_mode': 'str',
        'oc_config': 'OCConfig',
        'oc_algo': 'OCAlgo',
        'tag_ids': 'list[int]',
        'tag_update_mode': 'str',
        'mirror_url': 'MirrorUrl',
        'miners_config': 'MinersConfig',
        'watchdog': 'object',
        'options': 'object',
        'hardware_power_draw': 'int',
        'psu_efficiency': 'int',
        'octofan_correct_power': 'bool',
        'autofan': 'object',
        'octofan': 'object',
        'coolbox': 'object',
        'fanflap': 'object',
        'powermeter': 'object',
        'ykeda_autofan': 'object',
        'asic_config': 'dict(str, str)'
    }

    attribute_map = {
        'fs_id': 'fs_id',
        'oc_id': 'oc_id',
        'oc_apply_mode': 'oc_apply_mode',
        'oc_config': 'oc_config',
        'oc_algo': 'oc_algo',
        'tag_ids': 'tag_ids',
        'tag_update_mode': 'tag_update_mode',
        'mirror_url': 'mirror_url',
        'miners_config': 'miners_config',
        'watchdog': 'watchdog',
        'options': 'options',
        'hardware_power_draw': 'hardware_power_draw',
        'psu_efficiency': 'psu_efficiency',
        'octofan_correct_power': 'octofan_correct_power',
        'autofan': 'autofan',
        'octofan': 'octofan',
        'coolbox': 'coolbox',
        'fanflap': 'fanflap',
        'powermeter': 'powermeter',
        'ykeda_autofan': 'ykeda_autofan',
        'asic_config': 'asic_config'
    }

    def __init__(self, fs_id=None, oc_id=None, oc_apply_mode='replace', oc_config=None, oc_algo=None, tag_ids=None, tag_update_mode='replace', mirror_url=None, miners_config=None, watchdog=None, options=None, hardware_power_draw=None, psu_efficiency=None, octofan_correct_power=None, autofan=None, octofan=None, coolbox=None, fanflap=None, powermeter=None, ykeda_autofan=None, asic_config=None, _configuration=None):  # noqa: E501
        """WorkerMultiEditRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._fs_id = None
        self._oc_id = None
        self._oc_apply_mode = None
        self._oc_config = None
        self._oc_algo = None
        self._tag_ids = None
        self._tag_update_mode = None
        self._mirror_url = None
        self._miners_config = None
        self._watchdog = None
        self._options = None
        self._hardware_power_draw = None
        self._psu_efficiency = None
        self._octofan_correct_power = None
        self._autofan = None
        self._octofan = None
        self._coolbox = None
        self._fanflap = None
        self._powermeter = None
        self._ykeda_autofan = None
        self._asic_config = None
        self.discriminator = None

        if fs_id is not None:
            self.fs_id = fs_id
        if oc_id is not None:
            self.oc_id = oc_id
        if oc_apply_mode is not None:
            self.oc_apply_mode = oc_apply_mode
        if oc_config is not None:
            self.oc_config = oc_config
        if oc_algo is not None:
            self.oc_algo = oc_algo
        if tag_ids is not None:
            self.tag_ids = tag_ids
        if tag_update_mode is not None:
            self.tag_update_mode = tag_update_mode
        if mirror_url is not None:
            self.mirror_url = mirror_url
        if miners_config is not None:
            self.miners_config = miners_config
        if watchdog is not None:
            self.watchdog = watchdog
        if options is not None:
            self.options = options
        if hardware_power_draw is not None:
            self.hardware_power_draw = hardware_power_draw
        if psu_efficiency is not None:
            self.psu_efficiency = psu_efficiency
        if octofan_correct_power is not None:
            self.octofan_correct_power = octofan_correct_power
        if autofan is not None:
            self.autofan = autofan
        if octofan is not None:
            self.octofan = octofan
        if coolbox is not None:
            self.coolbox = coolbox
        if fanflap is not None:
            self.fanflap = fanflap
        if powermeter is not None:
            self.powermeter = powermeter
        if ykeda_autofan is not None:
            self.ykeda_autofan = ykeda_autofan
        if asic_config is not None:
            self.asic_config = asic_config

    @property
    def fs_id(self):
        """Gets the fs_id of this WorkerMultiEditRequest.  # noqa: E501

        Flight sheet ID  # noqa: E501

        :return: The fs_id of this WorkerMultiEditRequest.  # noqa: E501
        :rtype: int
        """
        return self._fs_id

    @fs_id.setter
    def fs_id(self, fs_id):
        """Sets the fs_id of this WorkerMultiEditRequest.

        Flight sheet ID  # noqa: E501

        :param fs_id: The fs_id of this WorkerMultiEditRequest.  # noqa: E501
        :type: int
        """

        self._fs_id = fs_id

    @property
    def oc_id(self):
        """Gets the oc_id of this WorkerMultiEditRequest.  # noqa: E501

        Overclocking profile ID  # noqa: E501

        :return: The oc_id of this WorkerMultiEditRequest.  # noqa: E501
        :rtype: int
        """
        return self._oc_id

    @oc_id.setter
    def oc_id(self, oc_id):
        """Sets the oc_id of this WorkerMultiEditRequest.

        Overclocking profile ID  # noqa: E501

        :param oc_id: The oc_id of this WorkerMultiEditRequest.  # noqa: E501
        :type: int
        """

        self._oc_id = oc_id

    @property
    def oc_apply_mode(self):
        """Gets the oc_apply_mode of this WorkerMultiEditRequest.  # noqa: E501

        How to apply overclocking profile: - replace - means copy entire per-brand configurations of both default and per-algo sets; - merge - means copy only individual fields of per-brand configurations of both default and per-algo sets.   # noqa: E501

        :return: The oc_apply_mode of this WorkerMultiEditRequest.  # noqa: E501
        :rtype: str
        """
        return self._oc_apply_mode

    @oc_apply_mode.setter
    def oc_apply_mode(self, oc_apply_mode):
        """Sets the oc_apply_mode of this WorkerMultiEditRequest.

        How to apply overclocking profile: - replace - means copy entire per-brand configurations of both default and per-algo sets; - merge - means copy only individual fields of per-brand configurations of both default and per-algo sets.   # noqa: E501

        :param oc_apply_mode: The oc_apply_mode of this WorkerMultiEditRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["replace", "merge"]  # noqa: E501
        if (self._configuration.client_side_validation and
                oc_apply_mode not in allowed_values):
            raise ValueError(
                "Invalid value for `oc_apply_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(oc_apply_mode, allowed_values)
            )

        self._oc_apply_mode = oc_apply_mode

    @property
    def oc_config(self):
        """Gets the oc_config of this WorkerMultiEditRequest.  # noqa: E501


        :return: The oc_config of this WorkerMultiEditRequest.  # noqa: E501
        :rtype: OCConfig
        """
        return self._oc_config

    @oc_config.setter
    def oc_config(self, oc_config):
        """Sets the oc_config of this WorkerMultiEditRequest.


        :param oc_config: The oc_config of this WorkerMultiEditRequest.  # noqa: E501
        :type: OCConfig
        """

        self._oc_config = oc_config

    @property
    def oc_algo(self):
        """Gets the oc_algo of this WorkerMultiEditRequest.  # noqa: E501


        :return: The oc_algo of this WorkerMultiEditRequest.  # noqa: E501
        :rtype: OCAlgo
        """
        return self._oc_algo

    @oc_algo.setter
    def oc_algo(self, oc_algo):
        """Sets the oc_algo of this WorkerMultiEditRequest.


        :param oc_algo: The oc_algo of this WorkerMultiEditRequest.  # noqa: E501
        :type: OCAlgo
        """

        self._oc_algo = oc_algo

    @property
    def tag_ids(self):
        """Gets the tag_ids of this WorkerMultiEditRequest.  # noqa: E501


        :return: The tag_ids of this WorkerMultiEditRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._tag_ids

    @tag_ids.setter
    def tag_ids(self, tag_ids):
        """Sets the tag_ids of this WorkerMultiEditRequest.


        :param tag_ids: The tag_ids of this WorkerMultiEditRequest.  # noqa: E501
        :type: list[int]
        """

        self._tag_ids = tag_ids

    @property
    def tag_update_mode(self):
        """Gets the tag_update_mode of this WorkerMultiEditRequest.  # noqa: E501

        Update mode for tags * add - add spicified tags ignoring if already assigned; * remove - remove spicified tags if assigned; * replace - replace all assigned tags with specified ones;   # noqa: E501

        :return: The tag_update_mode of this WorkerMultiEditRequest.  # noqa: E501
        :rtype: str
        """
        return self._tag_update_mode

    @tag_update_mode.setter
    def tag_update_mode(self, tag_update_mode):
        """Sets the tag_update_mode of this WorkerMultiEditRequest.

        Update mode for tags * add - add spicified tags ignoring if already assigned; * remove - remove spicified tags if assigned; * replace - replace all assigned tags with specified ones;   # noqa: E501

        :param tag_update_mode: The tag_update_mode of this WorkerMultiEditRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["add", "remove", "replace"]  # noqa: E501
        if (self._configuration.client_side_validation and
                tag_update_mode not in allowed_values):
            raise ValueError(
                "Invalid value for `tag_update_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(tag_update_mode, allowed_values)
            )

        self._tag_update_mode = tag_update_mode

    @property
    def mirror_url(self):
        """Gets the mirror_url of this WorkerMultiEditRequest.  # noqa: E501


        :return: The mirror_url of this WorkerMultiEditRequest.  # noqa: E501
        :rtype: MirrorUrl
        """
        return self._mirror_url

    @mirror_url.setter
    def mirror_url(self, mirror_url):
        """Sets the mirror_url of this WorkerMultiEditRequest.


        :param mirror_url: The mirror_url of this WorkerMultiEditRequest.  # noqa: E501
        :type: MirrorUrl
        """

        self._mirror_url = mirror_url

    @property
    def miners_config(self):
        """Gets the miners_config of this WorkerMultiEditRequest.  # noqa: E501


        :return: The miners_config of this WorkerMultiEditRequest.  # noqa: E501
        :rtype: MinersConfig
        """
        return self._miners_config

    @miners_config.setter
    def miners_config(self, miners_config):
        """Sets the miners_config of this WorkerMultiEditRequest.


        :param miners_config: The miners_config of this WorkerMultiEditRequest.  # noqa: E501
        :type: MinersConfig
        """

        self._miners_config = miners_config

    @property
    def watchdog(self):
        """Gets the watchdog of this WorkerMultiEditRequest.  # noqa: E501

        Watchdog system  # noqa: E501

        :return: The watchdog of this WorkerMultiEditRequest.  # noqa: E501
        :rtype: object
        """
        return self._watchdog

    @watchdog.setter
    def watchdog(self, watchdog):
        """Sets the watchdog of this WorkerMultiEditRequest.

        Watchdog system  # noqa: E501

        :param watchdog: The watchdog of this WorkerMultiEditRequest.  # noqa: E501
        :type: object
        """

        self._watchdog = watchdog

    @property
    def options(self):
        """Gets the options of this WorkerMultiEditRequest.  # noqa: E501

        Worker options. This object will be merged with existing one on update.   # noqa: E501

        :return: The options of this WorkerMultiEditRequest.  # noqa: E501
        :rtype: object
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this WorkerMultiEditRequest.

        Worker options. This object will be merged with existing one on update.   # noqa: E501

        :param options: The options of this WorkerMultiEditRequest.  # noqa: E501
        :type: object
        """

        self._options = options

    @property
    def hardware_power_draw(self):
        """Gets the hardware_power_draw of this WorkerMultiEditRequest.  # noqa: E501

        Power consumption of worker's hardware, watts  # noqa: E501

        :return: The hardware_power_draw of this WorkerMultiEditRequest.  # noqa: E501
        :rtype: int
        """
        return self._hardware_power_draw

    @hardware_power_draw.setter
    def hardware_power_draw(self, hardware_power_draw):
        """Sets the hardware_power_draw of this WorkerMultiEditRequest.

        Power consumption of worker's hardware, watts  # noqa: E501

        :param hardware_power_draw: The hardware_power_draw of this WorkerMultiEditRequest.  # noqa: E501
        :type: int
        """

        self._hardware_power_draw = hardware_power_draw

    @property
    def psu_efficiency(self):
        """Gets the psu_efficiency of this WorkerMultiEditRequest.  # noqa: E501

        Efficiency of power supply unit, %  # noqa: E501

        :return: The psu_efficiency of this WorkerMultiEditRequest.  # noqa: E501
        :rtype: int
        """
        return self._psu_efficiency

    @psu_efficiency.setter
    def psu_efficiency(self, psu_efficiency):
        """Sets the psu_efficiency of this WorkerMultiEditRequest.

        Efficiency of power supply unit, %  # noqa: E501

        :param psu_efficiency: The psu_efficiency of this WorkerMultiEditRequest.  # noqa: E501
        :type: int
        """

        self._psu_efficiency = psu_efficiency

    @property
    def octofan_correct_power(self):
        """Gets the octofan_correct_power of this WorkerMultiEditRequest.  # noqa: E501

        Apply power correction settings to power consumption value from Octominer fan controller. Default is false.  # noqa: E501

        :return: The octofan_correct_power of this WorkerMultiEditRequest.  # noqa: E501
        :rtype: bool
        """
        return self._octofan_correct_power

    @octofan_correct_power.setter
    def octofan_correct_power(self, octofan_correct_power):
        """Sets the octofan_correct_power of this WorkerMultiEditRequest.

        Apply power correction settings to power consumption value from Octominer fan controller. Default is false.  # noqa: E501

        :param octofan_correct_power: The octofan_correct_power of this WorkerMultiEditRequest.  # noqa: E501
        :type: bool
        """

        self._octofan_correct_power = octofan_correct_power

    @property
    def autofan(self):
        """Gets the autofan of this WorkerMultiEditRequest.  # noqa: E501

        Autofan configuration  # noqa: E501

        :return: The autofan of this WorkerMultiEditRequest.  # noqa: E501
        :rtype: object
        """
        return self._autofan

    @autofan.setter
    def autofan(self, autofan):
        """Sets the autofan of this WorkerMultiEditRequest.

        Autofan configuration  # noqa: E501

        :param autofan: The autofan of this WorkerMultiEditRequest.  # noqa: E501
        :type: object
        """

        self._autofan = autofan

    @property
    def octofan(self):
        """Gets the octofan of this WorkerMultiEditRequest.  # noqa: E501

        Configuration for Octominer fan controller  # noqa: E501

        :return: The octofan of this WorkerMultiEditRequest.  # noqa: E501
        :rtype: object
        """
        return self._octofan

    @octofan.setter
    def octofan(self, octofan):
        """Sets the octofan of this WorkerMultiEditRequest.

        Configuration for Octominer fan controller  # noqa: E501

        :param octofan: The octofan of this WorkerMultiEditRequest.  # noqa: E501
        :type: object
        """

        self._octofan = octofan

    @property
    def coolbox(self):
        """Gets the coolbox of this WorkerMultiEditRequest.  # noqa: E501

        Configuration for Coolbox fan controller  # noqa: E501

        :return: The coolbox of this WorkerMultiEditRequest.  # noqa: E501
        :rtype: object
        """
        return self._coolbox

    @coolbox.setter
    def coolbox(self, coolbox):
        """Sets the coolbox of this WorkerMultiEditRequest.

        Configuration for Coolbox fan controller  # noqa: E501

        :param coolbox: The coolbox of this WorkerMultiEditRequest.  # noqa: E501
        :type: object
        """

        self._coolbox = coolbox

    @property
    def fanflap(self):
        """Gets the fanflap of this WorkerMultiEditRequest.  # noqa: E501

        Configuration for FanFlap controller  # noqa: E501

        :return: The fanflap of this WorkerMultiEditRequest.  # noqa: E501
        :rtype: object
        """
        return self._fanflap

    @fanflap.setter
    def fanflap(self, fanflap):
        """Sets the fanflap of this WorkerMultiEditRequest.

        Configuration for FanFlap controller  # noqa: E501

        :param fanflap: The fanflap of this WorkerMultiEditRequest.  # noqa: E501
        :type: object
        """

        self._fanflap = fanflap

    @property
    def powermeter(self):
        """Gets the powermeter of this WorkerMultiEditRequest.  # noqa: E501

        Configuration for Powermeter controller  # noqa: E501

        :return: The powermeter of this WorkerMultiEditRequest.  # noqa: E501
        :rtype: object
        """
        return self._powermeter

    @powermeter.setter
    def powermeter(self, powermeter):
        """Sets the powermeter of this WorkerMultiEditRequest.

        Configuration for Powermeter controller  # noqa: E501

        :param powermeter: The powermeter of this WorkerMultiEditRequest.  # noqa: E501
        :type: object
        """

        self._powermeter = powermeter

    @property
    def ykeda_autofan(self):
        """Gets the ykeda_autofan of this WorkerMultiEditRequest.  # noqa: E501

        Configuration for Ykeda Autofan controller  # noqa: E501

        :return: The ykeda_autofan of this WorkerMultiEditRequest.  # noqa: E501
        :rtype: object
        """
        return self._ykeda_autofan

    @ykeda_autofan.setter
    def ykeda_autofan(self, ykeda_autofan):
        """Sets the ykeda_autofan of this WorkerMultiEditRequest.

        Configuration for Ykeda Autofan controller  # noqa: E501

        :param ykeda_autofan: The ykeda_autofan of this WorkerMultiEditRequest.  # noqa: E501
        :type: object
        """

        self._ykeda_autofan = ykeda_autofan

    @property
    def asic_config(self):
        """Gets the asic_config of this WorkerMultiEditRequest.  # noqa: E501

        Settings for ASICs with Hive firmware, depends on model and firmware version  # noqa: E501

        :return: The asic_config of this WorkerMultiEditRequest.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._asic_config

    @asic_config.setter
    def asic_config(self, asic_config):
        """Sets the asic_config of this WorkerMultiEditRequest.

        Settings for ASICs with Hive firmware, depends on model and firmware version  # noqa: E501

        :param asic_config: The asic_config of this WorkerMultiEditRequest.  # noqa: E501
        :type: dict(str, str)
        """

        self._asic_config = asic_config

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WorkerMultiEditRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkerMultiEditRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WorkerMultiEditRequest):
            return True

        return self.to_dict() != other.to_dict()
