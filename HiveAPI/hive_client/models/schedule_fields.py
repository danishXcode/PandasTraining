# coding: utf-8

"""
    Hive OS API

    App API for Hive OS 2.0  # noqa: E501

    OpenAPI spec version: 2.1-beta
    Contact: brain@hiveos.farm
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ScheduleFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'launch_at': 'int',
        'rrule': 'str',
        'timezone': 'str',
        'active': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'launch_at': 'launch_at',
        'rrule': 'rrule',
        'timezone': 'timezone',
        'active': 'active'
    }

    def __init__(self, name=None, launch_at=None, rrule=None, timezone=None, active=None, _configuration=None):  # noqa: E501
        """ScheduleFields - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._launch_at = None
        self._rrule = None
        self._timezone = None
        self._active = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if launch_at is not None:
            self.launch_at = launch_at
        if rrule is not None:
            self.rrule = rrule
        if timezone is not None:
            self.timezone = timezone
        if active is not None:
            self.active = active

    @property
    def name(self):
        """Gets the name of this ScheduleFields.  # noqa: E501

        Display name  # noqa: E501

        :return: The name of this ScheduleFields.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ScheduleFields.

        Display name  # noqa: E501

        :param name: The name of this ScheduleFields.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def launch_at(self):
        """Gets the launch_at of this ScheduleFields.  # noqa: E501

        When to apply the flight sheet. If rrule is specified - this field defines when the first occurrence will happen.   # noqa: E501

        :return: The launch_at of this ScheduleFields.  # noqa: E501
        :rtype: int
        """
        return self._launch_at

    @launch_at.setter
    def launch_at(self, launch_at):
        """Sets the launch_at of this ScheduleFields.

        When to apply the flight sheet. If rrule is specified - this field defines when the first occurrence will happen.   # noqa: E501

        :param launch_at: The launch_at of this ScheduleFields.  # noqa: E501
        :type: int
        """

        self._launch_at = launch_at

    @property
    def rrule(self):
        """Gets the rrule of this ScheduleFields.  # noqa: E501

        How to repeat the task. This field accepts RRULE definition from RFC 5545.   # noqa: E501

        :return: The rrule of this ScheduleFields.  # noqa: E501
        :rtype: str
        """
        return self._rrule

    @rrule.setter
    def rrule(self, rrule):
        """Sets the rrule of this ScheduleFields.

        How to repeat the task. This field accepts RRULE definition from RFC 5545.   # noqa: E501

        :param rrule: The rrule of this ScheduleFields.  # noqa: E501
        :type: str
        """

        self._rrule = rrule

    @property
    def timezone(self):
        """Gets the timezone of this ScheduleFields.  # noqa: E501

        Time zone for RRule. By default farm's or user's time zone is used.  # noqa: E501

        :return: The timezone of this ScheduleFields.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this ScheduleFields.

        Time zone for RRule. By default farm's or user's time zone is used.  # noqa: E501

        :param timezone: The timezone of this ScheduleFields.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    @property
    def active(self):
        """Gets the active of this ScheduleFields.  # noqa: E501

        Is active  # noqa: E501

        :return: The active of this ScheduleFields.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this ScheduleFields.

        Is active  # noqa: E501

        :param active: The active of this ScheduleFields.  # noqa: E501
        :type: bool
        """

        self._active = active

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScheduleFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScheduleFields):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ScheduleFields):
            return True

        return self.to_dict() != other.to_dict()
