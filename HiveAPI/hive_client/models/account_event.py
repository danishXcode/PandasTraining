# coding: utf-8

"""
    Hive OS API

    App API for Hive OS 2.0  # noqa: E501

    OpenAPI spec version: 2.1-beta
    Contact: brain@hiveos.farm
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class AccountEvent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'timestamp': 'int',
        'type_id': 'int',
        'type': 'str',
        'ip': 'str',
        'hostname': 'str',
        'by_admin': 'bool',
        'details': 'object'
    }

    attribute_map = {
        'id': 'id',
        'timestamp': 'timestamp',
        'type_id': 'type_id',
        'type': 'type',
        'ip': 'ip',
        'hostname': 'hostname',
        'by_admin': 'by_admin',
        'details': 'details'
    }

    def __init__(self, id=None, timestamp=None, type_id=None, type=None, ip=None, hostname=None, by_admin=None, details=None, _configuration=None):  # noqa: E501
        """AccountEvent - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._timestamp = None
        self._type_id = None
        self._type = None
        self._ip = None
        self._hostname = None
        self._by_admin = None
        self._details = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if timestamp is not None:
            self.timestamp = timestamp
        if type_id is not None:
            self.type_id = type_id
        if type is not None:
            self.type = type
        if ip is not None:
            self.ip = ip
        if hostname is not None:
            self.hostname = hostname
        if by_admin is not None:
            self.by_admin = by_admin
        if details is not None:
            self.details = details

    @property
    def id(self):
        """Gets the id of this AccountEvent.  # noqa: E501


        :return: The id of this AccountEvent.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AccountEvent.


        :param id: The id of this AccountEvent.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def timestamp(self):
        """Gets the timestamp of this AccountEvent.  # noqa: E501


        :return: The timestamp of this AccountEvent.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this AccountEvent.


        :param timestamp: The timestamp of this AccountEvent.  # noqa: E501
        :type: int
        """

        self._timestamp = timestamp

    @property
    def type_id(self):
        """Gets the type_id of this AccountEvent.  # noqa: E501


        :return: The type_id of this AccountEvent.  # noqa: E501
        :rtype: int
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this AccountEvent.


        :param type_id: The type_id of this AccountEvent.  # noqa: E501
        :type: int
        """

        self._type_id = type_id

    @property
    def type(self):
        """Gets the type of this AccountEvent.  # noqa: E501


        :return: The type of this AccountEvent.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AccountEvent.


        :param type: The type of this AccountEvent.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def ip(self):
        """Gets the ip of this AccountEvent.  # noqa: E501


        :return: The ip of this AccountEvent.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this AccountEvent.


        :param ip: The ip of this AccountEvent.  # noqa: E501
        :type: str
        """

        self._ip = ip

    @property
    def hostname(self):
        """Gets the hostname of this AccountEvent.  # noqa: E501


        :return: The hostname of this AccountEvent.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this AccountEvent.


        :param hostname: The hostname of this AccountEvent.  # noqa: E501
        :type: str
        """

        self._hostname = hostname

    @property
    def by_admin(self):
        """Gets the by_admin of this AccountEvent.  # noqa: E501

        Action was performed by Hive administrator  # noqa: E501

        :return: The by_admin of this AccountEvent.  # noqa: E501
        :rtype: bool
        """
        return self._by_admin

    @by_admin.setter
    def by_admin(self, by_admin):
        """Sets the by_admin of this AccountEvent.

        Action was performed by Hive administrator  # noqa: E501

        :param by_admin: The by_admin of this AccountEvent.  # noqa: E501
        :type: bool
        """

        self._by_admin = by_admin

    @property
    def details(self):
        """Gets the details of this AccountEvent.  # noqa: E501

        Details object is specific to event type  # noqa: E501

        :return: The details of this AccountEvent.  # noqa: E501
        :rtype: object
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this AccountEvent.

        Details object is specific to event type  # noqa: E501

        :param details: The details of this AccountEvent.  # noqa: E501
        :type: object
        """

        self._details = details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountEvent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountEvent):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AccountEvent):
            return True

        return self.to_dict() != other.to_dict()
