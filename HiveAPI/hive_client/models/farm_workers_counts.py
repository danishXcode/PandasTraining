# coding: utf-8

"""
    Hive OS API

    App API for Hive OS 2.0  # noqa: E501

    OpenAPI spec version: 2.1-beta
    Contact: brain@hiveos.farm
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class FarmWorkersCounts(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'workers_count': 'int',
        'rigs_count': 'int',
        'asics_count': 'int',
        'disabled_rigs_count': 'int',
        'disabled_asics_count': 'int'
    }

    attribute_map = {
        'workers_count': 'workers_count',
        'rigs_count': 'rigs_count',
        'asics_count': 'asics_count',
        'disabled_rigs_count': 'disabled_rigs_count',
        'disabled_asics_count': 'disabled_asics_count'
    }

    def __init__(self, workers_count=None, rigs_count=None, asics_count=None, disabled_rigs_count=None, disabled_asics_count=None, _configuration=None):  # noqa: E501
        """FarmWorkersCounts - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._workers_count = None
        self._rigs_count = None
        self._asics_count = None
        self._disabled_rigs_count = None
        self._disabled_asics_count = None
        self.discriminator = None

        if workers_count is not None:
            self.workers_count = workers_count
        if rigs_count is not None:
            self.rigs_count = rigs_count
        if asics_count is not None:
            self.asics_count = asics_count
        if disabled_rigs_count is not None:
            self.disabled_rigs_count = disabled_rigs_count
        if disabled_asics_count is not None:
            self.disabled_asics_count = disabled_asics_count

    @property
    def workers_count(self):
        """Gets the workers_count of this FarmWorkersCounts.  # noqa: E501

        Total amount of workers in farm  # noqa: E501

        :return: The workers_count of this FarmWorkersCounts.  # noqa: E501
        :rtype: int
        """
        return self._workers_count

    @workers_count.setter
    def workers_count(self, workers_count):
        """Sets the workers_count of this FarmWorkersCounts.

        Total amount of workers in farm  # noqa: E501

        :param workers_count: The workers_count of this FarmWorkersCounts.  # noqa: E501
        :type: int
        """

        self._workers_count = workers_count

    @property
    def rigs_count(self):
        """Gets the rigs_count of this FarmWorkersCounts.  # noqa: E501

        Total amount of Rigs in farm  # noqa: E501

        :return: The rigs_count of this FarmWorkersCounts.  # noqa: E501
        :rtype: int
        """
        return self._rigs_count

    @rigs_count.setter
    def rigs_count(self, rigs_count):
        """Sets the rigs_count of this FarmWorkersCounts.

        Total amount of Rigs in farm  # noqa: E501

        :param rigs_count: The rigs_count of this FarmWorkersCounts.  # noqa: E501
        :type: int
        """

        self._rigs_count = rigs_count

    @property
    def asics_count(self):
        """Gets the asics_count of this FarmWorkersCounts.  # noqa: E501

        Total amount of ASICs in farm  # noqa: E501

        :return: The asics_count of this FarmWorkersCounts.  # noqa: E501
        :rtype: int
        """
        return self._asics_count

    @asics_count.setter
    def asics_count(self, asics_count):
        """Sets the asics_count of this FarmWorkersCounts.

        Total amount of ASICs in farm  # noqa: E501

        :param asics_count: The asics_count of this FarmWorkersCounts.  # noqa: E501
        :type: int
        """

        self._asics_count = asics_count

    @property
    def disabled_rigs_count(self):
        """Gets the disabled_rigs_count of this FarmWorkersCounts.  # noqa: E501

        Amount of disabled Rigs in farm  # noqa: E501

        :return: The disabled_rigs_count of this FarmWorkersCounts.  # noqa: E501
        :rtype: int
        """
        return self._disabled_rigs_count

    @disabled_rigs_count.setter
    def disabled_rigs_count(self, disabled_rigs_count):
        """Sets the disabled_rigs_count of this FarmWorkersCounts.

        Amount of disabled Rigs in farm  # noqa: E501

        :param disabled_rigs_count: The disabled_rigs_count of this FarmWorkersCounts.  # noqa: E501
        :type: int
        """

        self._disabled_rigs_count = disabled_rigs_count

    @property
    def disabled_asics_count(self):
        """Gets the disabled_asics_count of this FarmWorkersCounts.  # noqa: E501

        Amount of disabled ASICs in farm  # noqa: E501

        :return: The disabled_asics_count of this FarmWorkersCounts.  # noqa: E501
        :rtype: int
        """
        return self._disabled_asics_count

    @disabled_asics_count.setter
    def disabled_asics_count(self, disabled_asics_count):
        """Sets the disabled_asics_count of this FarmWorkersCounts.

        Amount of disabled ASICs in farm  # noqa: E501

        :param disabled_asics_count: The disabled_asics_count of this FarmWorkersCounts.  # noqa: E501
        :type: int
        """

        self._disabled_asics_count = disabled_asics_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FarmWorkersCounts, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FarmWorkersCounts):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FarmWorkersCounts):
            return True

        return self.to_dict() != other.to_dict()
