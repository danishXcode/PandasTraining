# coding: utf-8

"""
    Hive OS API

    App API for Hive OS 2.0  # noqa: E501

    OpenAPI spec version: 2.1-beta
    Contact: brain@hiveos.farm
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Payment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'timestamp': 'int',
        'currency': 'str',
        'amount': 'float',
        'amount_fiat': 'float',
        'status': 'int',
        'status_text': 'str',
        'txid': 'str'
    }

    attribute_map = {
        'id': 'id',
        'timestamp': 'timestamp',
        'currency': 'currency',
        'amount': 'amount',
        'amount_fiat': 'amount_fiat',
        'status': 'status',
        'status_text': 'status_text',
        'txid': 'txid'
    }

    def __init__(self, id=None, timestamp=None, currency=None, amount=None, amount_fiat=None, status=None, status_text=None, txid=None, _configuration=None):  # noqa: E501
        """Payment - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._timestamp = None
        self._currency = None
        self._amount = None
        self._amount_fiat = None
        self._status = None
        self._status_text = None
        self._txid = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if timestamp is not None:
            self.timestamp = timestamp
        if currency is not None:
            self.currency = currency
        if amount is not None:
            self.amount = amount
        if amount_fiat is not None:
            self.amount_fiat = amount_fiat
        if status is not None:
            self.status = status
        if status_text is not None:
            self.status_text = status_text
        if txid is not None:
            self.txid = txid

    @property
    def id(self):
        """Gets the id of this Payment.  # noqa: E501

        Payment ID  # noqa: E501

        :return: The id of this Payment.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Payment.

        Payment ID  # noqa: E501

        :param id: The id of this Payment.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def timestamp(self):
        """Gets the timestamp of this Payment.  # noqa: E501

        Payment timestamp  # noqa: E501

        :return: The timestamp of this Payment.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Payment.

        Payment timestamp  # noqa: E501

        :param timestamp: The timestamp of this Payment.  # noqa: E501
        :type: int
        """

        self._timestamp = timestamp

    @property
    def currency(self):
        """Gets the currency of this Payment.  # noqa: E501

        Payment currency  # noqa: E501

        :return: The currency of this Payment.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Payment.

        Payment currency  # noqa: E501

        :param currency: The currency of this Payment.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def amount(self):
        """Gets the amount of this Payment.  # noqa: E501

        Payment amount in currency  # noqa: E501

        :return: The amount of this Payment.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Payment.

        Payment amount in currency  # noqa: E501

        :param amount: The amount of this Payment.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def amount_fiat(self):
        """Gets the amount_fiat of this Payment.  # noqa: E501

        Payment amount in fiat currency  # noqa: E501

        :return: The amount_fiat of this Payment.  # noqa: E501
        :rtype: float
        """
        return self._amount_fiat

    @amount_fiat.setter
    def amount_fiat(self, amount_fiat):
        """Sets the amount_fiat of this Payment.

        Payment amount in fiat currency  # noqa: E501

        :param amount_fiat: The amount_fiat of this Payment.  # noqa: E501
        :type: float
        """

        self._amount_fiat = amount_fiat

    @property
    def status(self):
        """Gets the status of this Payment.  # noqa: E501

        Payment status  # noqa: E501

        :return: The status of this Payment.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Payment.

        Payment status  # noqa: E501

        :param status: The status of this Payment.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def status_text(self):
        """Gets the status_text of this Payment.  # noqa: E501

        Payment status text  # noqa: E501

        :return: The status_text of this Payment.  # noqa: E501
        :rtype: str
        """
        return self._status_text

    @status_text.setter
    def status_text(self, status_text):
        """Sets the status_text of this Payment.

        Payment status text  # noqa: E501

        :param status_text: The status_text of this Payment.  # noqa: E501
        :type: str
        """

        self._status_text = status_text

    @property
    def txid(self):
        """Gets the txid of this Payment.  # noqa: E501

        Transaction ID  # noqa: E501

        :return: The txid of this Payment.  # noqa: E501
        :rtype: str
        """
        return self._txid

    @txid.setter
    def txid(self, txid):
        """Sets the txid of this Payment.

        Transaction ID  # noqa: E501

        :param txid: The txid of this Payment.  # noqa: E501
        :type: str
        """

        self._txid = txid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Payment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Payment):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Payment):
            return True

        return self.to_dict() != other.to_dict()
