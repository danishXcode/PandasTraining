# coding: utf-8

"""
    Hive OS API

    App API for Hive OS 2.0  # noqa: E501

    OpenAPI spec version: 2.1-beta
    Contact: brain@hiveos.farm
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class DepositAddress(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'provider': 'DepositAddressProvider',
        'currency': 'DepositAddressCurrency',
        'address': 'str',
        'created_at': 'int'
    }

    attribute_map = {
        'provider': 'provider',
        'currency': 'currency',
        'address': 'address',
        'created_at': 'created_at'
    }

    def __init__(self, provider=None, currency=None, address=None, created_at=None, _configuration=None):  # noqa: E501
        """DepositAddress - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._provider = None
        self._currency = None
        self._address = None
        self._created_at = None
        self.discriminator = None

        if provider is not None:
            self.provider = provider
        if currency is not None:
            self.currency = currency
        if address is not None:
            self.address = address
        if created_at is not None:
            self.created_at = created_at

    @property
    def provider(self):
        """Gets the provider of this DepositAddress.  # noqa: E501


        :return: The provider of this DepositAddress.  # noqa: E501
        :rtype: DepositAddressProvider
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this DepositAddress.


        :param provider: The provider of this DepositAddress.  # noqa: E501
        :type: DepositAddressProvider
        """

        self._provider = provider

    @property
    def currency(self):
        """Gets the currency of this DepositAddress.  # noqa: E501


        :return: The currency of this DepositAddress.  # noqa: E501
        :rtype: DepositAddressCurrency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this DepositAddress.


        :param currency: The currency of this DepositAddress.  # noqa: E501
        :type: DepositAddressCurrency
        """

        self._currency = currency

    @property
    def address(self):
        """Gets the address of this DepositAddress.  # noqa: E501

        Deposit address  # noqa: E501

        :return: The address of this DepositAddress.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this DepositAddress.

        Deposit address  # noqa: E501

        :param address: The address of this DepositAddress.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def created_at(self):
        """Gets the created_at of this DepositAddress.  # noqa: E501

        When the address was generated  # noqa: E501

        :return: The created_at of this DepositAddress.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this DepositAddress.

        When the address was generated  # noqa: E501

        :param created_at: The created_at of this DepositAddress.  # noqa: E501
        :type: int
        """

        self._created_at = created_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DepositAddress, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DepositAddress):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DepositAddress):
            return True

        return self.to_dict() != other.to_dict()
