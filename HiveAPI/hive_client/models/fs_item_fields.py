# coding: utf-8

"""
    Hive OS API

    App API for Hive OS 2.0  # noqa: E501

    OpenAPI spec version: 2.1-beta
    Contact: brain@hiveos.farm
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class FSItemFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'coin': 'str',
        'pool': 'str',
        'pool_geo': 'list[str]',
        'pool_ssl': 'bool',
        'pool_urls': 'list[str]',
        'wal_id': 'int',
        'email': 'str',
        'dcoin': 'str',
        'dpool': 'str',
        'dpool_geo': 'list[str]',
        'dpool_ssl': 'bool',
        'dpool_urls': 'list[str]',
        'dwal_id': 'int',
        'demail': 'str',
        'miner': 'MinerName',
        'miner_config': 'MinerConfig'
    }

    attribute_map = {
        'coin': 'coin',
        'pool': 'pool',
        'pool_geo': 'pool_geo',
        'pool_ssl': 'pool_ssl',
        'pool_urls': 'pool_urls',
        'wal_id': 'wal_id',
        'email': 'email',
        'dcoin': 'dcoin',
        'dpool': 'dpool',
        'dpool_geo': 'dpool_geo',
        'dpool_ssl': 'dpool_ssl',
        'dpool_urls': 'dpool_urls',
        'dwal_id': 'dwal_id',
        'demail': 'demail',
        'miner': 'miner',
        'miner_config': 'miner_config'
    }

    def __init__(self, coin=None, pool=None, pool_geo=None, pool_ssl=None, pool_urls=None, wal_id=None, email=None, dcoin=None, dpool=None, dpool_geo=None, dpool_ssl=None, dpool_urls=None, dwal_id=None, demail=None, miner=None, miner_config=None, _configuration=None):  # noqa: E501
        """FSItemFields - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._coin = None
        self._pool = None
        self._pool_geo = None
        self._pool_ssl = None
        self._pool_urls = None
        self._wal_id = None
        self._email = None
        self._dcoin = None
        self._dpool = None
        self._dpool_geo = None
        self._dpool_ssl = None
        self._dpool_urls = None
        self._dwal_id = None
        self._demail = None
        self._miner = None
        self._miner_config = None
        self.discriminator = None

        self.coin = coin
        if pool is not None:
            self.pool = pool
        if pool_geo is not None:
            self.pool_geo = pool_geo
        if pool_ssl is not None:
            self.pool_ssl = pool_ssl
        if pool_urls is not None:
            self.pool_urls = pool_urls
        self.wal_id = wal_id
        if email is not None:
            self.email = email
        if dcoin is not None:
            self.dcoin = dcoin
        if dpool is not None:
            self.dpool = dpool
        if dpool_geo is not None:
            self.dpool_geo = dpool_geo
        if dpool_ssl is not None:
            self.dpool_ssl = dpool_ssl
        if dpool_urls is not None:
            self.dpool_urls = dpool_urls
        if dwal_id is not None:
            self.dwal_id = dwal_id
        if demail is not None:
            self.demail = demail
        self.miner = miner
        self.miner_config = miner_config

    @property
    def coin(self):
        """Gets the coin of this FSItemFields.  # noqa: E501

        Coin name  # noqa: E501

        :return: The coin of this FSItemFields.  # noqa: E501
        :rtype: str
        """
        return self._coin

    @coin.setter
    def coin(self, coin):
        """Sets the coin of this FSItemFields.

        Coin name  # noqa: E501

        :param coin: The coin of this FSItemFields.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and coin is None:
            raise ValueError("Invalid value for `coin`, must not be `None`")  # noqa: E501

        self._coin = coin

    @property
    def pool(self):
        """Gets the pool of this FSItemFields.  # noqa: E501

        Pool name  # noqa: E501

        :return: The pool of this FSItemFields.  # noqa: E501
        :rtype: str
        """
        return self._pool

    @pool.setter
    def pool(self, pool):
        """Sets the pool of this FSItemFields.

        Pool name  # noqa: E501

        :param pool: The pool of this FSItemFields.  # noqa: E501
        :type: str
        """

        self._pool = pool

    @property
    def pool_geo(self):
        """Gets the pool_geo of this FSItemFields.  # noqa: E501

        Pool geo  # noqa: E501

        :return: The pool_geo of this FSItemFields.  # noqa: E501
        :rtype: list[str]
        """
        return self._pool_geo

    @pool_geo.setter
    def pool_geo(self, pool_geo):
        """Sets the pool_geo of this FSItemFields.

        Pool geo  # noqa: E501

        :param pool_geo: The pool_geo of this FSItemFields.  # noqa: E501
        :type: list[str]
        """

        self._pool_geo = pool_geo

    @property
    def pool_ssl(self):
        """Gets the pool_ssl of this FSItemFields.  # noqa: E501

        Use SSL when connecting to pool  # noqa: E501

        :return: The pool_ssl of this FSItemFields.  # noqa: E501
        :rtype: bool
        """
        return self._pool_ssl

    @pool_ssl.setter
    def pool_ssl(self, pool_ssl):
        """Sets the pool_ssl of this FSItemFields.

        Use SSL when connecting to pool  # noqa: E501

        :param pool_ssl: The pool_ssl of this FSItemFields.  # noqa: E501
        :type: bool
        """

        self._pool_ssl = pool_ssl

    @property
    def pool_urls(self):
        """Gets the pool_urls of this FSItemFields.  # noqa: E501

        Pool urls  # noqa: E501

        :return: The pool_urls of this FSItemFields.  # noqa: E501
        :rtype: list[str]
        """
        return self._pool_urls

    @pool_urls.setter
    def pool_urls(self, pool_urls):
        """Sets the pool_urls of this FSItemFields.

        Pool urls  # noqa: E501

        :param pool_urls: The pool_urls of this FSItemFields.  # noqa: E501
        :type: list[str]
        """

        self._pool_urls = pool_urls

    @property
    def wal_id(self):
        """Gets the wal_id of this FSItemFields.  # noqa: E501

        Wallet ID  # noqa: E501

        :return: The wal_id of this FSItemFields.  # noqa: E501
        :rtype: int
        """
        return self._wal_id

    @wal_id.setter
    def wal_id(self, wal_id):
        """Sets the wal_id of this FSItemFields.

        Wallet ID  # noqa: E501

        :param wal_id: The wal_id of this FSItemFields.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and wal_id is None:
            raise ValueError("Invalid value for `wal_id`, must not be `None`")  # noqa: E501

        self._wal_id = wal_id

    @property
    def email(self):
        """Gets the email of this FSItemFields.  # noqa: E501

        Email for pool  # noqa: E501

        :return: The email of this FSItemFields.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this FSItemFields.

        Email for pool  # noqa: E501

        :param email: The email of this FSItemFields.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def dcoin(self):
        """Gets the dcoin of this FSItemFields.  # noqa: E501

        Second coin name for dual miner  # noqa: E501

        :return: The dcoin of this FSItemFields.  # noqa: E501
        :rtype: str
        """
        return self._dcoin

    @dcoin.setter
    def dcoin(self, dcoin):
        """Sets the dcoin of this FSItemFields.

        Second coin name for dual miner  # noqa: E501

        :param dcoin: The dcoin of this FSItemFields.  # noqa: E501
        :type: str
        """

        self._dcoin = dcoin

    @property
    def dpool(self):
        """Gets the dpool of this FSItemFields.  # noqa: E501

        Second pool name for dual miner  # noqa: E501

        :return: The dpool of this FSItemFields.  # noqa: E501
        :rtype: str
        """
        return self._dpool

    @dpool.setter
    def dpool(self, dpool):
        """Sets the dpool of this FSItemFields.

        Second pool name for dual miner  # noqa: E501

        :param dpool: The dpool of this FSItemFields.  # noqa: E501
        :type: str
        """

        self._dpool = dpool

    @property
    def dpool_geo(self):
        """Gets the dpool_geo of this FSItemFields.  # noqa: E501

        Second pool geo  # noqa: E501

        :return: The dpool_geo of this FSItemFields.  # noqa: E501
        :rtype: list[str]
        """
        return self._dpool_geo

    @dpool_geo.setter
    def dpool_geo(self, dpool_geo):
        """Sets the dpool_geo of this FSItemFields.

        Second pool geo  # noqa: E501

        :param dpool_geo: The dpool_geo of this FSItemFields.  # noqa: E501
        :type: list[str]
        """

        self._dpool_geo = dpool_geo

    @property
    def dpool_ssl(self):
        """Gets the dpool_ssl of this FSItemFields.  # noqa: E501

        Use SSL when connecting to second pool  # noqa: E501

        :return: The dpool_ssl of this FSItemFields.  # noqa: E501
        :rtype: bool
        """
        return self._dpool_ssl

    @dpool_ssl.setter
    def dpool_ssl(self, dpool_ssl):
        """Sets the dpool_ssl of this FSItemFields.

        Use SSL when connecting to second pool  # noqa: E501

        :param dpool_ssl: The dpool_ssl of this FSItemFields.  # noqa: E501
        :type: bool
        """

        self._dpool_ssl = dpool_ssl

    @property
    def dpool_urls(self):
        """Gets the dpool_urls of this FSItemFields.  # noqa: E501

        Second pool urls  # noqa: E501

        :return: The dpool_urls of this FSItemFields.  # noqa: E501
        :rtype: list[str]
        """
        return self._dpool_urls

    @dpool_urls.setter
    def dpool_urls(self, dpool_urls):
        """Sets the dpool_urls of this FSItemFields.

        Second pool urls  # noqa: E501

        :param dpool_urls: The dpool_urls of this FSItemFields.  # noqa: E501
        :type: list[str]
        """

        self._dpool_urls = dpool_urls

    @property
    def dwal_id(self):
        """Gets the dwal_id of this FSItemFields.  # noqa: E501

        Second wallet ID for dual miner  # noqa: E501

        :return: The dwal_id of this FSItemFields.  # noqa: E501
        :rtype: int
        """
        return self._dwal_id

    @dwal_id.setter
    def dwal_id(self, dwal_id):
        """Sets the dwal_id of this FSItemFields.

        Second wallet ID for dual miner  # noqa: E501

        :param dwal_id: The dwal_id of this FSItemFields.  # noqa: E501
        :type: int
        """

        self._dwal_id = dwal_id

    @property
    def demail(self):
        """Gets the demail of this FSItemFields.  # noqa: E501

        Second email for pool for dual miner  # noqa: E501

        :return: The demail of this FSItemFields.  # noqa: E501
        :rtype: str
        """
        return self._demail

    @demail.setter
    def demail(self, demail):
        """Sets the demail of this FSItemFields.

        Second email for pool for dual miner  # noqa: E501

        :param demail: The demail of this FSItemFields.  # noqa: E501
        :type: str
        """

        self._demail = demail

    @property
    def miner(self):
        """Gets the miner of this FSItemFields.  # noqa: E501


        :return: The miner of this FSItemFields.  # noqa: E501
        :rtype: MinerName
        """
        return self._miner

    @miner.setter
    def miner(self, miner):
        """Sets the miner of this FSItemFields.


        :param miner: The miner of this FSItemFields.  # noqa: E501
        :type: MinerName
        """
        if self._configuration.client_side_validation and miner is None:
            raise ValueError("Invalid value for `miner`, must not be `None`")  # noqa: E501

        self._miner = miner

    @property
    def miner_config(self):
        """Gets the miner_config of this FSItemFields.  # noqa: E501


        :return: The miner_config of this FSItemFields.  # noqa: E501
        :rtype: MinerConfig
        """
        return self._miner_config

    @miner_config.setter
    def miner_config(self, miner_config):
        """Sets the miner_config of this FSItemFields.


        :param miner_config: The miner_config of this FSItemFields.  # noqa: E501
        :type: MinerConfig
        """
        if self._configuration.client_side_validation and miner_config is None:
            raise ValueError("Invalid value for `miner_config`, must not be `None`")  # noqa: E501

        self._miner_config = miner_config

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FSItemFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FSItemFields):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FSItemFields):
            return True

        return self.to_dict() != other.to_dict()
