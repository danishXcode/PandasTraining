# coding: utf-8

"""
    Hive OS API

    App API for Hive OS 2.0  # noqa: E501

    OpenAPI spec version: 2.1-beta
    Contact: brain@hiveos.farm
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class WorkerProps(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'remote_address': 'object',
        'vpn': 'bool',
        'has_amd': 'bool',
        'has_nvidia': 'bool',
        'needs_upgrade': 'bool',
        'packages_hash': 'str',
        'lan_config': 'object',
        'system_type': 'str',
        'os_name': 'str',
        'has_octofan': 'bool',
        'has_coolbox': 'bool',
        'has_fanflap': 'bool',
        'has_powermeter': 'bool',
        'has_asichub': 'bool',
        'has_donnager_relay': 'bool',
        'personal_settings': 'object'
    }

    attribute_map = {
        'remote_address': 'remote_address',
        'vpn': 'vpn',
        'has_amd': 'has_amd',
        'has_nvidia': 'has_nvidia',
        'needs_upgrade': 'needs_upgrade',
        'packages_hash': 'packages_hash',
        'lan_config': 'lan_config',
        'system_type': 'system_type',
        'os_name': 'os_name',
        'has_octofan': 'has_octofan',
        'has_coolbox': 'has_coolbox',
        'has_fanflap': 'has_fanflap',
        'has_powermeter': 'has_powermeter',
        'has_asichub': 'has_asichub',
        'has_donnager_relay': 'has_donnager_relay',
        'personal_settings': 'personal_settings'
    }

    def __init__(self, remote_address=None, vpn=None, has_amd=None, has_nvidia=None, needs_upgrade=None, packages_hash=None, lan_config=None, system_type=None, os_name=None, has_octofan=None, has_coolbox=None, has_fanflap=None, has_powermeter=None, has_asichub=None, has_donnager_relay=None, personal_settings=None, _configuration=None):  # noqa: E501
        """WorkerProps - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._remote_address = None
        self._vpn = None
        self._has_amd = None
        self._has_nvidia = None
        self._needs_upgrade = None
        self._packages_hash = None
        self._lan_config = None
        self._system_type = None
        self._os_name = None
        self._has_octofan = None
        self._has_coolbox = None
        self._has_fanflap = None
        self._has_powermeter = None
        self._has_asichub = None
        self._has_donnager_relay = None
        self._personal_settings = None
        self.discriminator = None

        if remote_address is not None:
            self.remote_address = remote_address
        if vpn is not None:
            self.vpn = vpn
        if has_amd is not None:
            self.has_amd = has_amd
        if has_nvidia is not None:
            self.has_nvidia = has_nvidia
        if needs_upgrade is not None:
            self.needs_upgrade = needs_upgrade
        if packages_hash is not None:
            self.packages_hash = packages_hash
        if lan_config is not None:
            self.lan_config = lan_config
        if system_type is not None:
            self.system_type = system_type
        if os_name is not None:
            self.os_name = os_name
        if has_octofan is not None:
            self.has_octofan = has_octofan
        if has_coolbox is not None:
            self.has_coolbox = has_coolbox
        if has_fanflap is not None:
            self.has_fanflap = has_fanflap
        if has_powermeter is not None:
            self.has_powermeter = has_powermeter
        if has_asichub is not None:
            self.has_asichub = has_asichub
        if has_donnager_relay is not None:
            self.has_donnager_relay = has_donnager_relay
        if personal_settings is not None:
            self.personal_settings = personal_settings

    @property
    def remote_address(self):
        """Gets the remote_address of this WorkerProps.  # noqa: E501

        Remote address info  # noqa: E501

        :return: The remote_address of this WorkerProps.  # noqa: E501
        :rtype: object
        """
        return self._remote_address

    @remote_address.setter
    def remote_address(self, remote_address):
        """Sets the remote_address of this WorkerProps.

        Remote address info  # noqa: E501

        :param remote_address: The remote_address of this WorkerProps.  # noqa: E501
        :type: object
        """

        self._remote_address = remote_address

    @property
    def vpn(self):
        """Gets the vpn of this WorkerProps.  # noqa: E501

        VPN is configured  # noqa: E501

        :return: The vpn of this WorkerProps.  # noqa: E501
        :rtype: bool
        """
        return self._vpn

    @vpn.setter
    def vpn(self, vpn):
        """Sets the vpn of this WorkerProps.

        VPN is configured  # noqa: E501

        :param vpn: The vpn of this WorkerProps.  # noqa: E501
        :type: bool
        """

        self._vpn = vpn

    @property
    def has_amd(self):
        """Gets the has_amd of this WorkerProps.  # noqa: E501

        Worker has AMD GPUs  # noqa: E501

        :return: The has_amd of this WorkerProps.  # noqa: E501
        :rtype: bool
        """
        return self._has_amd

    @has_amd.setter
    def has_amd(self, has_amd):
        """Sets the has_amd of this WorkerProps.

        Worker has AMD GPUs  # noqa: E501

        :param has_amd: The has_amd of this WorkerProps.  # noqa: E501
        :type: bool
        """

        self._has_amd = has_amd

    @property
    def has_nvidia(self):
        """Gets the has_nvidia of this WorkerProps.  # noqa: E501

        Worker has Nvidia GPUs  # noqa: E501

        :return: The has_nvidia of this WorkerProps.  # noqa: E501
        :rtype: bool
        """
        return self._has_nvidia

    @has_nvidia.setter
    def has_nvidia(self, has_nvidia):
        """Sets the has_nvidia of this WorkerProps.

        Worker has Nvidia GPUs  # noqa: E501

        :param has_nvidia: The has_nvidia of this WorkerProps.  # noqa: E501
        :type: bool
        """

        self._has_nvidia = has_nvidia

    @property
    def needs_upgrade(self):
        """Gets the needs_upgrade of this WorkerProps.  # noqa: E501

        New OS version is available  # noqa: E501

        :return: The needs_upgrade of this WorkerProps.  # noqa: E501
        :rtype: bool
        """
        return self._needs_upgrade

    @needs_upgrade.setter
    def needs_upgrade(self, needs_upgrade):
        """Sets the needs_upgrade of this WorkerProps.

        New OS version is available  # noqa: E501

        :param needs_upgrade: The needs_upgrade of this WorkerProps.  # noqa: E501
        :type: bool
        """

        self._needs_upgrade = needs_upgrade

    @property
    def packages_hash(self):
        """Gets the packages_hash of this WorkerProps.  # noqa: E501

        packages_hash  # noqa: E501

        :return: The packages_hash of this WorkerProps.  # noqa: E501
        :rtype: str
        """
        return self._packages_hash

    @packages_hash.setter
    def packages_hash(self, packages_hash):
        """Sets the packages_hash of this WorkerProps.

        packages_hash  # noqa: E501

        :param packages_hash: The packages_hash of this WorkerProps.  # noqa: E501
        :type: str
        """

        self._packages_hash = packages_hash

    @property
    def lan_config(self):
        """Gets the lan_config of this WorkerProps.  # noqa: E501

        LAN configuration  # noqa: E501

        :return: The lan_config of this WorkerProps.  # noqa: E501
        :rtype: object
        """
        return self._lan_config

    @lan_config.setter
    def lan_config(self, lan_config):
        """Sets the lan_config of this WorkerProps.

        LAN configuration  # noqa: E501

        :param lan_config: The lan_config of this WorkerProps.  # noqa: E501
        :type: object
        """

        self._lan_config = lan_config

    @property
    def system_type(self):
        """Gets the system_type of this WorkerProps.  # noqa: E501

        Hive OS system type  # noqa: E501

        :return: The system_type of this WorkerProps.  # noqa: E501
        :rtype: str
        """
        return self._system_type

    @system_type.setter
    def system_type(self, system_type):
        """Sets the system_type of this WorkerProps.

        Hive OS system type  # noqa: E501

        :param system_type: The system_type of this WorkerProps.  # noqa: E501
        :type: str
        """
        allowed_values = ["linux", "asic", "windows"]  # noqa: E501
        if (self._configuration.client_side_validation and
                system_type not in allowed_values):
            raise ValueError(
                "Invalid value for `system_type` ({0}), must be one of {1}"  # noqa: E501
                .format(system_type, allowed_values)
            )

        self._system_type = system_type

    @property
    def os_name(self):
        """Gets the os_name of this WorkerProps.  # noqa: E501


        :return: The os_name of this WorkerProps.  # noqa: E501
        :rtype: str
        """
        return self._os_name

    @os_name.setter
    def os_name(self, os_name):
        """Sets the os_name of this WorkerProps.


        :param os_name: The os_name of this WorkerProps.  # noqa: E501
        :type: str
        """

        self._os_name = os_name

    @property
    def has_octofan(self):
        """Gets the has_octofan of this WorkerProps.  # noqa: E501

        Worker has Octominer fan controller  # noqa: E501

        :return: The has_octofan of this WorkerProps.  # noqa: E501
        :rtype: bool
        """
        return self._has_octofan

    @has_octofan.setter
    def has_octofan(self, has_octofan):
        """Sets the has_octofan of this WorkerProps.

        Worker has Octominer fan controller  # noqa: E501

        :param has_octofan: The has_octofan of this WorkerProps.  # noqa: E501
        :type: bool
        """

        self._has_octofan = has_octofan

    @property
    def has_coolbox(self):
        """Gets the has_coolbox of this WorkerProps.  # noqa: E501

        Worker has Coolbox fan controller  # noqa: E501

        :return: The has_coolbox of this WorkerProps.  # noqa: E501
        :rtype: bool
        """
        return self._has_coolbox

    @has_coolbox.setter
    def has_coolbox(self, has_coolbox):
        """Sets the has_coolbox of this WorkerProps.

        Worker has Coolbox fan controller  # noqa: E501

        :param has_coolbox: The has_coolbox of this WorkerProps.  # noqa: E501
        :type: bool
        """

        self._has_coolbox = has_coolbox

    @property
    def has_fanflap(self):
        """Gets the has_fanflap of this WorkerProps.  # noqa: E501

        Worker has FanFlap controller  # noqa: E501

        :return: The has_fanflap of this WorkerProps.  # noqa: E501
        :rtype: bool
        """
        return self._has_fanflap

    @has_fanflap.setter
    def has_fanflap(self, has_fanflap):
        """Sets the has_fanflap of this WorkerProps.

        Worker has FanFlap controller  # noqa: E501

        :param has_fanflap: The has_fanflap of this WorkerProps.  # noqa: E501
        :type: bool
        """

        self._has_fanflap = has_fanflap

    @property
    def has_powermeter(self):
        """Gets the has_powermeter of this WorkerProps.  # noqa: E501

        Worker has Powermeter controller  # noqa: E501

        :return: The has_powermeter of this WorkerProps.  # noqa: E501
        :rtype: bool
        """
        return self._has_powermeter

    @has_powermeter.setter
    def has_powermeter(self, has_powermeter):
        """Sets the has_powermeter of this WorkerProps.

        Worker has Powermeter controller  # noqa: E501

        :param has_powermeter: The has_powermeter of this WorkerProps.  # noqa: E501
        :type: bool
        """

        self._has_powermeter = has_powermeter

    @property
    def has_asichub(self):
        """Gets the has_asichub of this WorkerProps.  # noqa: E501

        Worker is an ASIC Hub  # noqa: E501

        :return: The has_asichub of this WorkerProps.  # noqa: E501
        :rtype: bool
        """
        return self._has_asichub

    @has_asichub.setter
    def has_asichub(self, has_asichub):
        """Sets the has_asichub of this WorkerProps.

        Worker is an ASIC Hub  # noqa: E501

        :param has_asichub: The has_asichub of this WorkerProps.  # noqa: E501
        :type: bool
        """

        self._has_asichub = has_asichub

    @property
    def has_donnager_relay(self):
        """Gets the has_donnager_relay of this WorkerProps.  # noqa: E501

        Worker is a Donnager Relay controller  # noqa: E501

        :return: The has_donnager_relay of this WorkerProps.  # noqa: E501
        :rtype: bool
        """
        return self._has_donnager_relay

    @has_donnager_relay.setter
    def has_donnager_relay(self, has_donnager_relay):
        """Sets the has_donnager_relay of this WorkerProps.

        Worker is a Donnager Relay controller  # noqa: E501

        :param has_donnager_relay: The has_donnager_relay of this WorkerProps.  # noqa: E501
        :type: bool
        """

        self._has_donnager_relay = has_donnager_relay

    @property
    def personal_settings(self):
        """Gets the personal_settings of this WorkerProps.  # noqa: E501

        Personal settings for current user  # noqa: E501

        :return: The personal_settings of this WorkerProps.  # noqa: E501
        :rtype: object
        """
        return self._personal_settings

    @personal_settings.setter
    def personal_settings(self, personal_settings):
        """Sets the personal_settings of this WorkerProps.

        Personal settings for current user  # noqa: E501

        :param personal_settings: The personal_settings of this WorkerProps.  # noqa: E501
        :type: object
        """

        self._personal_settings = personal_settings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WorkerProps, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkerProps):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WorkerProps):
            return True

        return self.to_dict() != other.to_dict()
