# coding: utf-8

"""
    Hive OS API

    App API for Hive OS 2.0  # noqa: E501

    OpenAPI spec version: 2.1-beta
    Contact: brain@hiveos.farm
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Farm(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'timezone': 'str',
        'gpu_red_temp': 'int',
        'asic_red_temp': 'int',
        'asic_red_board_temp': 'float',
        'gpu_red_mem_temp': 'float',
        'gpu_red_cpu_temp': 'float',
        'gpu_red_fan': 'int',
        'asic_red_fan': 'int',
        'gpu_red_asr': 'int',
        'asic_red_asr': 'int',
        'gpu_red_la': 'float',
        'asic_red_la': 'float',
        'repo_urls': 'list[str]',
        'power_price': 'float',
        'power_price_currency': 'str',
        'charge_on_pool': 'bool',
        'autocreate_hash': 'str',
        'nonfree': 'bool',
        'locked': 'bool',
        'twofa_required': 'bool',
        'trusted': 'bool',
        'owner': 'object',
        'payer': 'object',
        'personal_settings': 'object',
        'role': 'AccessRoleEnum',
        'workers_count': 'int',
        'rigs_count': 'int',
        'asics_count': 'int',
        'disabled_rigs_count': 'int',
        'disabled_asics_count': 'int',
        'money': 'object',
        'stats': 'FarmStats',
        'hashrates': 'list[object]',
        'hashrates_by_coin': 'list[object]',
        'tag_ids': 'list[int]',
        'hardware_power_draw': 'int',
        'psu_efficiency': 'int',
        'octofan_correct_power': 'bool',
        'auto_tags': 'bool',
        'default_fs': 'dict(str, int)'
    }

    attribute_map = {
        'name': 'name',
        'timezone': 'timezone',
        'gpu_red_temp': 'gpu_red_temp',
        'asic_red_temp': 'asic_red_temp',
        'asic_red_board_temp': 'asic_red_board_temp',
        'gpu_red_mem_temp': 'gpu_red_mem_temp',
        'gpu_red_cpu_temp': 'gpu_red_cpu_temp',
        'gpu_red_fan': 'gpu_red_fan',
        'asic_red_fan': 'asic_red_fan',
        'gpu_red_asr': 'gpu_red_asr',
        'asic_red_asr': 'asic_red_asr',
        'gpu_red_la': 'gpu_red_la',
        'asic_red_la': 'asic_red_la',
        'repo_urls': 'repo_urls',
        'power_price': 'power_price',
        'power_price_currency': 'power_price_currency',
        'charge_on_pool': 'charge_on_pool',
        'autocreate_hash': 'autocreate_hash',
        'nonfree': 'nonfree',
        'locked': 'locked',
        'twofa_required': 'twofa_required',
        'trusted': 'trusted',
        'owner': 'owner',
        'payer': 'payer',
        'personal_settings': 'personal_settings',
        'role': 'role',
        'workers_count': 'workers_count',
        'rigs_count': 'rigs_count',
        'asics_count': 'asics_count',
        'disabled_rigs_count': 'disabled_rigs_count',
        'disabled_asics_count': 'disabled_asics_count',
        'money': 'money',
        'stats': 'stats',
        'hashrates': 'hashrates',
        'hashrates_by_coin': 'hashrates_by_coin',
        'tag_ids': 'tag_ids',
        'hardware_power_draw': 'hardware_power_draw',
        'psu_efficiency': 'psu_efficiency',
        'octofan_correct_power': 'octofan_correct_power',
        'auto_tags': 'auto_tags',
        'default_fs': 'default_fs'
    }

    def __init__(self, name=None, timezone=None, gpu_red_temp=None, asic_red_temp=None, asic_red_board_temp=None, gpu_red_mem_temp=None, gpu_red_cpu_temp=None, gpu_red_fan=None, asic_red_fan=None, gpu_red_asr=None, asic_red_asr=None, gpu_red_la=None, asic_red_la=None, repo_urls=None, power_price=None, power_price_currency=None, charge_on_pool=None, autocreate_hash=None, nonfree=None, locked=None, twofa_required=None, trusted=None, owner=None, payer=None, personal_settings=None, role=None, workers_count=None, rigs_count=None, asics_count=None, disabled_rigs_count=None, disabled_asics_count=None, money=None, stats=None, hashrates=None, hashrates_by_coin=None, tag_ids=None, hardware_power_draw=None, psu_efficiency=None, octofan_correct_power=None, auto_tags=None, default_fs=None, _configuration=None):  # noqa: E501
        """Farm - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._timezone = None
        self._gpu_red_temp = None
        self._asic_red_temp = None
        self._asic_red_board_temp = None
        self._gpu_red_mem_temp = None
        self._gpu_red_cpu_temp = None
        self._gpu_red_fan = None
        self._asic_red_fan = None
        self._gpu_red_asr = None
        self._asic_red_asr = None
        self._gpu_red_la = None
        self._asic_red_la = None
        self._repo_urls = None
        self._power_price = None
        self._power_price_currency = None
        self._charge_on_pool = None
        self._autocreate_hash = None
        self._nonfree = None
        self._locked = None
        self._twofa_required = None
        self._trusted = None
        self._owner = None
        self._payer = None
        self._personal_settings = None
        self._role = None
        self._workers_count = None
        self._rigs_count = None
        self._asics_count = None
        self._disabled_rigs_count = None
        self._disabled_asics_count = None
        self._money = None
        self._stats = None
        self._hashrates = None
        self._hashrates_by_coin = None
        self._tag_ids = None
        self._hardware_power_draw = None
        self._psu_efficiency = None
        self._octofan_correct_power = None
        self._auto_tags = None
        self._default_fs = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if timezone is not None:
            self.timezone = timezone
        if gpu_red_temp is not None:
            self.gpu_red_temp = gpu_red_temp
        if asic_red_temp is not None:
            self.asic_red_temp = asic_red_temp
        if asic_red_board_temp is not None:
            self.asic_red_board_temp = asic_red_board_temp
        if gpu_red_mem_temp is not None:
            self.gpu_red_mem_temp = gpu_red_mem_temp
        if gpu_red_cpu_temp is not None:
            self.gpu_red_cpu_temp = gpu_red_cpu_temp
        if gpu_red_fan is not None:
            self.gpu_red_fan = gpu_red_fan
        if asic_red_fan is not None:
            self.asic_red_fan = asic_red_fan
        if gpu_red_asr is not None:
            self.gpu_red_asr = gpu_red_asr
        if asic_red_asr is not None:
            self.asic_red_asr = asic_red_asr
        if gpu_red_la is not None:
            self.gpu_red_la = gpu_red_la
        if asic_red_la is not None:
            self.asic_red_la = asic_red_la
        if repo_urls is not None:
            self.repo_urls = repo_urls
        if power_price is not None:
            self.power_price = power_price
        if power_price_currency is not None:
            self.power_price_currency = power_price_currency
        if charge_on_pool is not None:
            self.charge_on_pool = charge_on_pool
        if autocreate_hash is not None:
            self.autocreate_hash = autocreate_hash
        if nonfree is not None:
            self.nonfree = nonfree
        if locked is not None:
            self.locked = locked
        if twofa_required is not None:
            self.twofa_required = twofa_required
        if trusted is not None:
            self.trusted = trusted
        if owner is not None:
            self.owner = owner
        if payer is not None:
            self.payer = payer
        if personal_settings is not None:
            self.personal_settings = personal_settings
        if role is not None:
            self.role = role
        if workers_count is not None:
            self.workers_count = workers_count
        if rigs_count is not None:
            self.rigs_count = rigs_count
        if asics_count is not None:
            self.asics_count = asics_count
        if disabled_rigs_count is not None:
            self.disabled_rigs_count = disabled_rigs_count
        if disabled_asics_count is not None:
            self.disabled_asics_count = disabled_asics_count
        if money is not None:
            self.money = money
        if stats is not None:
            self.stats = stats
        if hashrates is not None:
            self.hashrates = hashrates
        if hashrates_by_coin is not None:
            self.hashrates_by_coin = hashrates_by_coin
        if tag_ids is not None:
            self.tag_ids = tag_ids
        if hardware_power_draw is not None:
            self.hardware_power_draw = hardware_power_draw
        if psu_efficiency is not None:
            self.psu_efficiency = psu_efficiency
        if octofan_correct_power is not None:
            self.octofan_correct_power = octofan_correct_power
        if auto_tags is not None:
            self.auto_tags = auto_tags
        if default_fs is not None:
            self.default_fs = default_fs

    @property
    def name(self):
        """Gets the name of this Farm.  # noqa: E501

        Display name  # noqa: E501

        :return: The name of this Farm.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Farm.

        Display name  # noqa: E501

        :param name: The name of this Farm.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 100):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")  # noqa: E501

        self._name = name

    @property
    def timezone(self):
        """Gets the timezone of this Farm.  # noqa: E501

        Time zone for all farm workers. Default is account's time zone.  # noqa: E501

        :return: The timezone of this Farm.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this Farm.

        Time zone for all farm workers. Default is account's time zone.  # noqa: E501

        :param timezone: The timezone of this Farm.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    @property
    def gpu_red_temp(self):
        """Gets the gpu_red_temp of this Farm.  # noqa: E501

        Red Temperature for GPU workers, °C  # noqa: E501

        :return: The gpu_red_temp of this Farm.  # noqa: E501
        :rtype: int
        """
        return self._gpu_red_temp

    @gpu_red_temp.setter
    def gpu_red_temp(self, gpu_red_temp):
        """Sets the gpu_red_temp of this Farm.

        Red Temperature for GPU workers, °C  # noqa: E501

        :param gpu_red_temp: The gpu_red_temp of this Farm.  # noqa: E501
        :type: int
        """

        self._gpu_red_temp = gpu_red_temp

    @property
    def asic_red_temp(self):
        """Gets the asic_red_temp of this Farm.  # noqa: E501

        Red Temperature for ASIC workers, °C  # noqa: E501

        :return: The asic_red_temp of this Farm.  # noqa: E501
        :rtype: int
        """
        return self._asic_red_temp

    @asic_red_temp.setter
    def asic_red_temp(self, asic_red_temp):
        """Sets the asic_red_temp of this Farm.

        Red Temperature for ASIC workers, °C  # noqa: E501

        :param asic_red_temp: The asic_red_temp of this Farm.  # noqa: E501
        :type: int
        """

        self._asic_red_temp = asic_red_temp

    @property
    def asic_red_board_temp(self):
        """Gets the asic_red_board_temp of this Farm.  # noqa: E501

        Red Board Temperature for ASIC workers, °C  # noqa: E501

        :return: The asic_red_board_temp of this Farm.  # noqa: E501
        :rtype: float
        """
        return self._asic_red_board_temp

    @asic_red_board_temp.setter
    def asic_red_board_temp(self, asic_red_board_temp):
        """Sets the asic_red_board_temp of this Farm.

        Red Board Temperature for ASIC workers, °C  # noqa: E501

        :param asic_red_board_temp: The asic_red_board_temp of this Farm.  # noqa: E501
        :type: float
        """

        self._asic_red_board_temp = asic_red_board_temp

    @property
    def gpu_red_mem_temp(self):
        """Gets the gpu_red_mem_temp of this Farm.  # noqa: E501

        Red memory temperature for GPU workers, °C  # noqa: E501

        :return: The gpu_red_mem_temp of this Farm.  # noqa: E501
        :rtype: float
        """
        return self._gpu_red_mem_temp

    @gpu_red_mem_temp.setter
    def gpu_red_mem_temp(self, gpu_red_mem_temp):
        """Sets the gpu_red_mem_temp of this Farm.

        Red memory temperature for GPU workers, °C  # noqa: E501

        :param gpu_red_mem_temp: The gpu_red_mem_temp of this Farm.  # noqa: E501
        :type: float
        """

        self._gpu_red_mem_temp = gpu_red_mem_temp

    @property
    def gpu_red_cpu_temp(self):
        """Gets the gpu_red_cpu_temp of this Farm.  # noqa: E501

        Red CPU temperature for GPU workers, °C  # noqa: E501

        :return: The gpu_red_cpu_temp of this Farm.  # noqa: E501
        :rtype: float
        """
        return self._gpu_red_cpu_temp

    @gpu_red_cpu_temp.setter
    def gpu_red_cpu_temp(self, gpu_red_cpu_temp):
        """Sets the gpu_red_cpu_temp of this Farm.

        Red CPU temperature for GPU workers, °C  # noqa: E501

        :param gpu_red_cpu_temp: The gpu_red_cpu_temp of this Farm.  # noqa: E501
        :type: float
        """

        self._gpu_red_cpu_temp = gpu_red_cpu_temp

    @property
    def gpu_red_fan(self):
        """Gets the gpu_red_fan of this Farm.  # noqa: E501

        Red Fan speed for GPU workers, %  # noqa: E501

        :return: The gpu_red_fan of this Farm.  # noqa: E501
        :rtype: int
        """
        return self._gpu_red_fan

    @gpu_red_fan.setter
    def gpu_red_fan(self, gpu_red_fan):
        """Sets the gpu_red_fan of this Farm.

        Red Fan speed for GPU workers, %  # noqa: E501

        :param gpu_red_fan: The gpu_red_fan of this Farm.  # noqa: E501
        :type: int
        """

        self._gpu_red_fan = gpu_red_fan

    @property
    def asic_red_fan(self):
        """Gets the asic_red_fan of this Farm.  # noqa: E501

        Red Fan speed for ASIC workers, %  # noqa: E501

        :return: The asic_red_fan of this Farm.  # noqa: E501
        :rtype: int
        """
        return self._asic_red_fan

    @asic_red_fan.setter
    def asic_red_fan(self, asic_red_fan):
        """Sets the asic_red_fan of this Farm.

        Red Fan speed for ASIC workers, %  # noqa: E501

        :param asic_red_fan: The asic_red_fan of this Farm.  # noqa: E501
        :type: int
        """

        self._asic_red_fan = asic_red_fan

    @property
    def gpu_red_asr(self):
        """Gets the gpu_red_asr of this Farm.  # noqa: E501

        Red Accepted Shares Ratio for GPU workers, %  # noqa: E501

        :return: The gpu_red_asr of this Farm.  # noqa: E501
        :rtype: int
        """
        return self._gpu_red_asr

    @gpu_red_asr.setter
    def gpu_red_asr(self, gpu_red_asr):
        """Sets the gpu_red_asr of this Farm.

        Red Accepted Shares Ratio for GPU workers, %  # noqa: E501

        :param gpu_red_asr: The gpu_red_asr of this Farm.  # noqa: E501
        :type: int
        """

        self._gpu_red_asr = gpu_red_asr

    @property
    def asic_red_asr(self):
        """Gets the asic_red_asr of this Farm.  # noqa: E501

        Red Accepted Shares Ratio for ASIC workers, %  # noqa: E501

        :return: The asic_red_asr of this Farm.  # noqa: E501
        :rtype: int
        """
        return self._asic_red_asr

    @asic_red_asr.setter
    def asic_red_asr(self, asic_red_asr):
        """Sets the asic_red_asr of this Farm.

        Red Accepted Shares Ratio for ASIC workers, %  # noqa: E501

        :param asic_red_asr: The asic_red_asr of this Farm.  # noqa: E501
        :type: int
        """

        self._asic_red_asr = asic_red_asr

    @property
    def gpu_red_la(self):
        """Gets the gpu_red_la of this Farm.  # noqa: E501

        Red Load Average per one CPU core for GPU workers  # noqa: E501

        :return: The gpu_red_la of this Farm.  # noqa: E501
        :rtype: float
        """
        return self._gpu_red_la

    @gpu_red_la.setter
    def gpu_red_la(self, gpu_red_la):
        """Sets the gpu_red_la of this Farm.

        Red Load Average per one CPU core for GPU workers  # noqa: E501

        :param gpu_red_la: The gpu_red_la of this Farm.  # noqa: E501
        :type: float
        """

        self._gpu_red_la = gpu_red_la

    @property
    def asic_red_la(self):
        """Gets the asic_red_la of this Farm.  # noqa: E501

        Red Load Average per one CPU core for ASIC workers  # noqa: E501

        :return: The asic_red_la of this Farm.  # noqa: E501
        :rtype: float
        """
        return self._asic_red_la

    @asic_red_la.setter
    def asic_red_la(self, asic_red_la):
        """Sets the asic_red_la of this Farm.

        Red Load Average per one CPU core for ASIC workers  # noqa: E501

        :param asic_red_la: The asic_red_la of this Farm.  # noqa: E501
        :type: float
        """

        self._asic_red_la = asic_red_la

    @property
    def repo_urls(self):
        """Gets the repo_urls of this Farm.  # noqa: E501

        Package repository URL list. Use this to override default list.  # noqa: E501

        :return: The repo_urls of this Farm.  # noqa: E501
        :rtype: list[str]
        """
        return self._repo_urls

    @repo_urls.setter
    def repo_urls(self, repo_urls):
        """Sets the repo_urls of this Farm.

        Package repository URL list. Use this to override default list.  # noqa: E501

        :param repo_urls: The repo_urls of this Farm.  # noqa: E501
        :type: list[str]
        """

        self._repo_urls = repo_urls

    @property
    def power_price(self):
        """Gets the power_price of this Farm.  # noqa: E501

        Electricity price per kilowatt hour  # noqa: E501

        :return: The power_price of this Farm.  # noqa: E501
        :rtype: float
        """
        return self._power_price

    @power_price.setter
    def power_price(self, power_price):
        """Sets the power_price of this Farm.

        Electricity price per kilowatt hour  # noqa: E501

        :param power_price: The power_price of this Farm.  # noqa: E501
        :type: float
        """

        self._power_price = power_price

    @property
    def power_price_currency(self):
        """Gets the power_price_currency of this Farm.  # noqa: E501

        Currency of electricity price  # noqa: E501

        :return: The power_price_currency of this Farm.  # noqa: E501
        :rtype: str
        """
        return self._power_price_currency

    @power_price_currency.setter
    def power_price_currency(self, power_price_currency):
        """Sets the power_price_currency of this Farm.

        Currency of electricity price  # noqa: E501

        :param power_price_currency: The power_price_currency of this Farm.  # noqa: E501
        :type: str
        """

        self._power_price_currency = power_price_currency

    @property
    def charge_on_pool(self):
        """Gets the charge_on_pool of this Farm.  # noqa: E501

        Enable charging on brand pool  # noqa: E501

        :return: The charge_on_pool of this Farm.  # noqa: E501
        :rtype: bool
        """
        return self._charge_on_pool

    @charge_on_pool.setter
    def charge_on_pool(self, charge_on_pool):
        """Sets the charge_on_pool of this Farm.

        Enable charging on brand pool  # noqa: E501

        :param charge_on_pool: The charge_on_pool of this Farm.  # noqa: E501
        :type: bool
        """

        self._charge_on_pool = charge_on_pool

    @property
    def autocreate_hash(self):
        """Gets the autocreate_hash of this Farm.  # noqa: E501

        Unique ID to be used for connecting new workers to the farm  # noqa: E501

        :return: The autocreate_hash of this Farm.  # noqa: E501
        :rtype: str
        """
        return self._autocreate_hash

    @autocreate_hash.setter
    def autocreate_hash(self, autocreate_hash):
        """Sets the autocreate_hash of this Farm.

        Unique ID to be used for connecting new workers to the farm  # noqa: E501

        :param autocreate_hash: The autocreate_hash of this Farm.  # noqa: E501
        :type: str
        """

        self._autocreate_hash = autocreate_hash

    @property
    def nonfree(self):
        """Gets the nonfree of this Farm.  # noqa: E501

        Paid features state  # noqa: E501

        :return: The nonfree of this Farm.  # noqa: E501
        :rtype: bool
        """
        return self._nonfree

    @nonfree.setter
    def nonfree(self, nonfree):
        """Sets the nonfree of this Farm.

        Paid features state  # noqa: E501

        :param nonfree: The nonfree of this Farm.  # noqa: E501
        :type: bool
        """

        self._nonfree = nonfree

    @property
    def locked(self):
        """Gets the locked of this Farm.  # noqa: E501

        Farm is locked due to exceeding overdraft limit  # noqa: E501

        :return: The locked of this Farm.  # noqa: E501
        :rtype: bool
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this Farm.

        Farm is locked due to exceeding overdraft limit  # noqa: E501

        :param locked: The locked of this Farm.  # noqa: E501
        :type: bool
        """

        self._locked = locked

    @property
    def twofa_required(self):
        """Gets the twofa_required of this Farm.  # noqa: E501

        2FA is required for update operations (if not owner)  # noqa: E501

        :return: The twofa_required of this Farm.  # noqa: E501
        :rtype: bool
        """
        return self._twofa_required

    @twofa_required.setter
    def twofa_required(self, twofa_required):
        """Sets the twofa_required of this Farm.

        2FA is required for update operations (if not owner)  # noqa: E501

        :param twofa_required: The twofa_required of this Farm.  # noqa: E501
        :type: bool
        """

        self._twofa_required = twofa_required

    @property
    def trusted(self):
        """Gets the trusted of this Farm.  # noqa: E501

        Farm is trusted (if not owner)  # noqa: E501

        :return: The trusted of this Farm.  # noqa: E501
        :rtype: bool
        """
        return self._trusted

    @trusted.setter
    def trusted(self, trusted):
        """Sets the trusted of this Farm.

        Farm is trusted (if not owner)  # noqa: E501

        :param trusted: The trusted of this Farm.  # noqa: E501
        :type: bool
        """

        self._trusted = trusted

    @property
    def owner(self):
        """Gets the owner of this Farm.  # noqa: E501

        Who owns the farm  # noqa: E501

        :return: The owner of this Farm.  # noqa: E501
        :rtype: object
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Farm.

        Who owns the farm  # noqa: E501

        :param owner: The owner of this Farm.  # noqa: E501
        :type: object
        """

        self._owner = owner

    @property
    def payer(self):
        """Gets the payer of this Farm.  # noqa: E501

        Who pays for the farm. If not set - owner is the payer.  # noqa: E501

        :return: The payer of this Farm.  # noqa: E501
        :rtype: object
        """
        return self._payer

    @payer.setter
    def payer(self, payer):
        """Sets the payer of this Farm.

        Who pays for the farm. If not set - owner is the payer.  # noqa: E501

        :param payer: The payer of this Farm.  # noqa: E501
        :type: object
        """

        self._payer = payer

    @property
    def personal_settings(self):
        """Gets the personal_settings of this Farm.  # noqa: E501

        Personal settings for current user  # noqa: E501

        :return: The personal_settings of this Farm.  # noqa: E501
        :rtype: object
        """
        return self._personal_settings

    @personal_settings.setter
    def personal_settings(self, personal_settings):
        """Sets the personal_settings of this Farm.

        Personal settings for current user  # noqa: E501

        :param personal_settings: The personal_settings of this Farm.  # noqa: E501
        :type: object
        """

        self._personal_settings = personal_settings

    @property
    def role(self):
        """Gets the role of this Farm.  # noqa: E501


        :return: The role of this Farm.  # noqa: E501
        :rtype: AccessRoleEnum
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this Farm.


        :param role: The role of this Farm.  # noqa: E501
        :type: AccessRoleEnum
        """

        self._role = role

    @property
    def workers_count(self):
        """Gets the workers_count of this Farm.  # noqa: E501

        Total amount of workers in farm  # noqa: E501

        :return: The workers_count of this Farm.  # noqa: E501
        :rtype: int
        """
        return self._workers_count

    @workers_count.setter
    def workers_count(self, workers_count):
        """Sets the workers_count of this Farm.

        Total amount of workers in farm  # noqa: E501

        :param workers_count: The workers_count of this Farm.  # noqa: E501
        :type: int
        """

        self._workers_count = workers_count

    @property
    def rigs_count(self):
        """Gets the rigs_count of this Farm.  # noqa: E501

        Total amount of Rigs in farm  # noqa: E501

        :return: The rigs_count of this Farm.  # noqa: E501
        :rtype: int
        """
        return self._rigs_count

    @rigs_count.setter
    def rigs_count(self, rigs_count):
        """Sets the rigs_count of this Farm.

        Total amount of Rigs in farm  # noqa: E501

        :param rigs_count: The rigs_count of this Farm.  # noqa: E501
        :type: int
        """

        self._rigs_count = rigs_count

    @property
    def asics_count(self):
        """Gets the asics_count of this Farm.  # noqa: E501

        Total amount of ASICs in farm  # noqa: E501

        :return: The asics_count of this Farm.  # noqa: E501
        :rtype: int
        """
        return self._asics_count

    @asics_count.setter
    def asics_count(self, asics_count):
        """Sets the asics_count of this Farm.

        Total amount of ASICs in farm  # noqa: E501

        :param asics_count: The asics_count of this Farm.  # noqa: E501
        :type: int
        """

        self._asics_count = asics_count

    @property
    def disabled_rigs_count(self):
        """Gets the disabled_rigs_count of this Farm.  # noqa: E501

        Amount of disabled Rigs in farm  # noqa: E501

        :return: The disabled_rigs_count of this Farm.  # noqa: E501
        :rtype: int
        """
        return self._disabled_rigs_count

    @disabled_rigs_count.setter
    def disabled_rigs_count(self, disabled_rigs_count):
        """Sets the disabled_rigs_count of this Farm.

        Amount of disabled Rigs in farm  # noqa: E501

        :param disabled_rigs_count: The disabled_rigs_count of this Farm.  # noqa: E501
        :type: int
        """

        self._disabled_rigs_count = disabled_rigs_count

    @property
    def disabled_asics_count(self):
        """Gets the disabled_asics_count of this Farm.  # noqa: E501

        Amount of disabled ASICs in farm  # noqa: E501

        :return: The disabled_asics_count of this Farm.  # noqa: E501
        :rtype: int
        """
        return self._disabled_asics_count

    @disabled_asics_count.setter
    def disabled_asics_count(self, disabled_asics_count):
        """Sets the disabled_asics_count of this Farm.

        Amount of disabled ASICs in farm  # noqa: E501

        :param disabled_asics_count: The disabled_asics_count of this Farm.  # noqa: E501
        :type: int
        """

        self._disabled_asics_count = disabled_asics_count

    @property
    def money(self):
        """Gets the money of this Farm.  # noqa: E501


        :return: The money of this Farm.  # noqa: E501
        :rtype: object
        """
        return self._money

    @money.setter
    def money(self, money):
        """Sets the money of this Farm.


        :param money: The money of this Farm.  # noqa: E501
        :type: object
        """

        self._money = money

    @property
    def stats(self):
        """Gets the stats of this Farm.  # noqa: E501


        :return: The stats of this Farm.  # noqa: E501
        :rtype: FarmStats
        """
        return self._stats

    @stats.setter
    def stats(self, stats):
        """Sets the stats of this Farm.


        :param stats: The stats of this Farm.  # noqa: E501
        :type: FarmStats
        """

        self._stats = stats

    @property
    def hashrates(self):
        """Gets the hashrates of this Farm.  # noqa: E501


        :return: The hashrates of this Farm.  # noqa: E501
        :rtype: list[object]
        """
        return self._hashrates

    @hashrates.setter
    def hashrates(self, hashrates):
        """Sets the hashrates of this Farm.


        :param hashrates: The hashrates of this Farm.  # noqa: E501
        :type: list[object]
        """

        self._hashrates = hashrates

    @property
    def hashrates_by_coin(self):
        """Gets the hashrates_by_coin of this Farm.  # noqa: E501

        Summary hashrates per coin  # noqa: E501

        :return: The hashrates_by_coin of this Farm.  # noqa: E501
        :rtype: list[object]
        """
        return self._hashrates_by_coin

    @hashrates_by_coin.setter
    def hashrates_by_coin(self, hashrates_by_coin):
        """Sets the hashrates_by_coin of this Farm.

        Summary hashrates per coin  # noqa: E501

        :param hashrates_by_coin: The hashrates_by_coin of this Farm.  # noqa: E501
        :type: list[object]
        """

        self._hashrates_by_coin = hashrates_by_coin

    @property
    def tag_ids(self):
        """Gets the tag_ids of this Farm.  # noqa: E501


        :return: The tag_ids of this Farm.  # noqa: E501
        :rtype: list[int]
        """
        return self._tag_ids

    @tag_ids.setter
    def tag_ids(self, tag_ids):
        """Sets the tag_ids of this Farm.


        :param tag_ids: The tag_ids of this Farm.  # noqa: E501
        :type: list[int]
        """

        self._tag_ids = tag_ids

    @property
    def hardware_power_draw(self):
        """Gets the hardware_power_draw of this Farm.  # noqa: E501

        Power consumption of worker's hardware, watts  # noqa: E501

        :return: The hardware_power_draw of this Farm.  # noqa: E501
        :rtype: int
        """
        return self._hardware_power_draw

    @hardware_power_draw.setter
    def hardware_power_draw(self, hardware_power_draw):
        """Sets the hardware_power_draw of this Farm.

        Power consumption of worker's hardware, watts  # noqa: E501

        :param hardware_power_draw: The hardware_power_draw of this Farm.  # noqa: E501
        :type: int
        """

        self._hardware_power_draw = hardware_power_draw

    @property
    def psu_efficiency(self):
        """Gets the psu_efficiency of this Farm.  # noqa: E501

        Efficiency of power supply unit, %  # noqa: E501

        :return: The psu_efficiency of this Farm.  # noqa: E501
        :rtype: int
        """
        return self._psu_efficiency

    @psu_efficiency.setter
    def psu_efficiency(self, psu_efficiency):
        """Sets the psu_efficiency of this Farm.

        Efficiency of power supply unit, %  # noqa: E501

        :param psu_efficiency: The psu_efficiency of this Farm.  # noqa: E501
        :type: int
        """

        self._psu_efficiency = psu_efficiency

    @property
    def octofan_correct_power(self):
        """Gets the octofan_correct_power of this Farm.  # noqa: E501

        Apply power correction settings to power consumption value from Octominer fan controller. Default is false.  # noqa: E501

        :return: The octofan_correct_power of this Farm.  # noqa: E501
        :rtype: bool
        """
        return self._octofan_correct_power

    @octofan_correct_power.setter
    def octofan_correct_power(self, octofan_correct_power):
        """Sets the octofan_correct_power of this Farm.

        Apply power correction settings to power consumption value from Octominer fan controller. Default is false.  # noqa: E501

        :param octofan_correct_power: The octofan_correct_power of this Farm.  # noqa: E501
        :type: bool
        """

        self._octofan_correct_power = octofan_correct_power

    @property
    def auto_tags(self):
        """Gets the auto_tags of this Farm.  # noqa: E501

        Auto-tags feature. If enabled - all workers inside the farm are automatically tagged. Rigs are tagged by GPU information such as model name, memory size, OEM, etc. ASICs are tagged by model name.   # noqa: E501

        :return: The auto_tags of this Farm.  # noqa: E501
        :rtype: bool
        """
        return self._auto_tags

    @auto_tags.setter
    def auto_tags(self, auto_tags):
        """Sets the auto_tags of this Farm.

        Auto-tags feature. If enabled - all workers inside the farm are automatically tagged. Rigs are tagged by GPU information such as model name, memory size, OEM, etc. ASICs are tagged by model name.   # noqa: E501

        :param auto_tags: The auto_tags of this Farm.  # noqa: E501
        :type: bool
        """

        self._auto_tags = auto_tags

    @property
    def default_fs(self):
        """Gets the default_fs of this Farm.  # noqa: E501

        Default flight sheets keyed by platform (1 - rig, 2 - asic). These flight sheets will be automatically attached to newly created workers.   # noqa: E501

        :return: The default_fs of this Farm.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._default_fs

    @default_fs.setter
    def default_fs(self, default_fs):
        """Sets the default_fs of this Farm.

        Default flight sheets keyed by platform (1 - rig, 2 - asic). These flight sheets will be automatically attached to newly created workers.   # noqa: E501

        :param default_fs: The default_fs of this Farm.  # noqa: E501
        :type: dict(str, int)
        """

        self._default_fs = default_fs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Farm, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Farm):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Farm):
            return True

        return self.to_dict() != other.to_dict()
