# coding: utf-8

"""
    Hive OS API

    App API for Hive OS 2.0  # noqa: E501

    OpenAPI spec version: 2.1-beta
    Contact: brain@hiveos.farm
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class BenchmarkResultItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'algo': 'AlgoName',
        'miner': 'MinerName',
        'hashrate': 'float',
        'power': 'float'
    }

    attribute_map = {
        'algo': 'algo',
        'miner': 'miner',
        'hashrate': 'hashrate',
        'power': 'power'
    }

    def __init__(self, algo=None, miner=None, hashrate=None, power=None, _configuration=None):  # noqa: E501
        """BenchmarkResultItem - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._algo = None
        self._miner = None
        self._hashrate = None
        self._power = None
        self.discriminator = None

        if algo is not None:
            self.algo = algo
        if miner is not None:
            self.miner = miner
        if hashrate is not None:
            self.hashrate = hashrate
        if power is not None:
            self.power = power

    @property
    def algo(self):
        """Gets the algo of this BenchmarkResultItem.  # noqa: E501


        :return: The algo of this BenchmarkResultItem.  # noqa: E501
        :rtype: AlgoName
        """
        return self._algo

    @algo.setter
    def algo(self, algo):
        """Sets the algo of this BenchmarkResultItem.


        :param algo: The algo of this BenchmarkResultItem.  # noqa: E501
        :type: AlgoName
        """

        self._algo = algo

    @property
    def miner(self):
        """Gets the miner of this BenchmarkResultItem.  # noqa: E501


        :return: The miner of this BenchmarkResultItem.  # noqa: E501
        :rtype: MinerName
        """
        return self._miner

    @miner.setter
    def miner(self, miner):
        """Sets the miner of this BenchmarkResultItem.


        :param miner: The miner of this BenchmarkResultItem.  # noqa: E501
        :type: MinerName
        """

        self._miner = miner

    @property
    def hashrate(self):
        """Gets the hashrate of this BenchmarkResultItem.  # noqa: E501

        Average hashrate, kH/s  # noqa: E501

        :return: The hashrate of this BenchmarkResultItem.  # noqa: E501
        :rtype: float
        """
        return self._hashrate

    @hashrate.setter
    def hashrate(self, hashrate):
        """Sets the hashrate of this BenchmarkResultItem.

        Average hashrate, kH/s  # noqa: E501

        :param hashrate: The hashrate of this BenchmarkResultItem.  # noqa: E501
        :type: float
        """

        self._hashrate = hashrate

    @property
    def power(self):
        """Gets the power of this BenchmarkResultItem.  # noqa: E501

        Average power draw, watts  # noqa: E501

        :return: The power of this BenchmarkResultItem.  # noqa: E501
        :rtype: float
        """
        return self._power

    @power.setter
    def power(self, power):
        """Sets the power of this BenchmarkResultItem.

        Average power draw, watts  # noqa: E501

        :param power: The power of this BenchmarkResultItem.  # noqa: E501
        :type: float
        """

        self._power = power

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BenchmarkResultItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BenchmarkResultItem):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BenchmarkResultItem):
            return True

        return self.to_dict() != other.to_dict()
