# coding: utf-8

"""
    Hive OS API

    App API for Hive OS 2.0  # noqa: E501

    OpenAPI spec version: 2.1-beta
    Contact: brain@hiveos.farm
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class TransactionAccount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'timestamp': 'int',
        'type_id': 'TransactionTypeAccount',
        'amount': 'float',
        'currency': 'str',
        'amount_fiat': 'float',
        'cost_details': 'list[TransactionCostItem]',
        'referral_user': 'object',
        'comment': 'str',
        'txid': 'str',
        'txurl': 'str',
        'target_user': 'object',
        'source_user': 'object',
        'target_farm': 'object'
    }

    attribute_map = {
        'id': 'id',
        'timestamp': 'timestamp',
        'type_id': 'type_id',
        'amount': 'amount',
        'currency': 'currency',
        'amount_fiat': 'amount_fiat',
        'cost_details': 'cost_details',
        'referral_user': 'referral_user',
        'comment': 'comment',
        'txid': 'txid',
        'txurl': 'txurl',
        'target_user': 'target_user',
        'source_user': 'source_user',
        'target_farm': 'target_farm'
    }

    def __init__(self, id=None, timestamp=None, type_id=None, amount=None, currency=None, amount_fiat=None, cost_details=None, referral_user=None, comment=None, txid=None, txurl=None, target_user=None, source_user=None, target_farm=None, _configuration=None):  # noqa: E501
        """TransactionAccount - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._timestamp = None
        self._type_id = None
        self._amount = None
        self._currency = None
        self._amount_fiat = None
        self._cost_details = None
        self._referral_user = None
        self._comment = None
        self._txid = None
        self._txurl = None
        self._target_user = None
        self._source_user = None
        self._target_farm = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if timestamp is not None:
            self.timestamp = timestamp
        if type_id is not None:
            self.type_id = type_id
        if amount is not None:
            self.amount = amount
        if currency is not None:
            self.currency = currency
        if amount_fiat is not None:
            self.amount_fiat = amount_fiat
        if cost_details is not None:
            self.cost_details = cost_details
        if referral_user is not None:
            self.referral_user = referral_user
        if comment is not None:
            self.comment = comment
        if txid is not None:
            self.txid = txid
        if txurl is not None:
            self.txurl = txurl
        if target_user is not None:
            self.target_user = target_user
        if source_user is not None:
            self.source_user = source_user
        if target_farm is not None:
            self.target_farm = target_farm

    @property
    def id(self):
        """Gets the id of this TransactionAccount.  # noqa: E501

        Transaction ID  # noqa: E501

        :return: The id of this TransactionAccount.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TransactionAccount.

        Transaction ID  # noqa: E501

        :param id: The id of this TransactionAccount.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def timestamp(self):
        """Gets the timestamp of this TransactionAccount.  # noqa: E501

        Transaction timestamp  # noqa: E501

        :return: The timestamp of this TransactionAccount.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this TransactionAccount.

        Transaction timestamp  # noqa: E501

        :param timestamp: The timestamp of this TransactionAccount.  # noqa: E501
        :type: int
        """

        self._timestamp = timestamp

    @property
    def type_id(self):
        """Gets the type_id of this TransactionAccount.  # noqa: E501


        :return: The type_id of this TransactionAccount.  # noqa: E501
        :rtype: TransactionTypeAccount
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this TransactionAccount.


        :param type_id: The type_id of this TransactionAccount.  # noqa: E501
        :type: TransactionTypeAccount
        """

        self._type_id = type_id

    @property
    def amount(self):
        """Gets the amount of this TransactionAccount.  # noqa: E501

        Transaction amount  # noqa: E501

        :return: The amount of this TransactionAccount.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this TransactionAccount.

        Transaction amount  # noqa: E501

        :param amount: The amount of this TransactionAccount.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def currency(self):
        """Gets the currency of this TransactionAccount.  # noqa: E501

        Transaction currency  # noqa: E501

        :return: The currency of this TransactionAccount.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this TransactionAccount.

        Transaction currency  # noqa: E501

        :param currency: The currency of this TransactionAccount.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def amount_fiat(self):
        """Gets the amount_fiat of this TransactionAccount.  # noqa: E501

        Transaction amount in fiat currency  # noqa: E501

        :return: The amount_fiat of this TransactionAccount.  # noqa: E501
        :rtype: float
        """
        return self._amount_fiat

    @amount_fiat.setter
    def amount_fiat(self, amount_fiat):
        """Sets the amount_fiat of this TransactionAccount.

        Transaction amount in fiat currency  # noqa: E501

        :param amount_fiat: The amount_fiat of this TransactionAccount.  # noqa: E501
        :type: float
        """

        self._amount_fiat = amount_fiat

    @property
    def cost_details(self):
        """Gets the cost_details of this TransactionAccount.  # noqa: E501

        Cost details for type 2.  # noqa: E501

        :return: The cost_details of this TransactionAccount.  # noqa: E501
        :rtype: list[TransactionCostItem]
        """
        return self._cost_details

    @cost_details.setter
    def cost_details(self, cost_details):
        """Sets the cost_details of this TransactionAccount.

        Cost details for type 2.  # noqa: E501

        :param cost_details: The cost_details of this TransactionAccount.  # noqa: E501
        :type: list[TransactionCostItem]
        """

        self._cost_details = cost_details

    @property
    def referral_user(self):
        """Gets the referral_user of this TransactionAccount.  # noqa: E501

        Referral user for type 3  # noqa: E501

        :return: The referral_user of this TransactionAccount.  # noqa: E501
        :rtype: object
        """
        return self._referral_user

    @referral_user.setter
    def referral_user(self, referral_user):
        """Sets the referral_user of this TransactionAccount.

        Referral user for type 3  # noqa: E501

        :param referral_user: The referral_user of this TransactionAccount.  # noqa: E501
        :type: object
        """

        self._referral_user = referral_user

    @property
    def comment(self):
        """Gets the comment of this TransactionAccount.  # noqa: E501

        Comment for type 4  # noqa: E501

        :return: The comment of this TransactionAccount.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this TransactionAccount.

        Comment for type 4  # noqa: E501

        :param comment: The comment of this TransactionAccount.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def txid(self):
        """Gets the txid of this TransactionAccount.  # noqa: E501

        Coinpayments transaction ID for type 1, or blockchain transaction ID for type 5   # noqa: E501

        :return: The txid of this TransactionAccount.  # noqa: E501
        :rtype: str
        """
        return self._txid

    @txid.setter
    def txid(self, txid):
        """Sets the txid of this TransactionAccount.

        Coinpayments transaction ID for type 1, or blockchain transaction ID for type 5   # noqa: E501

        :param txid: The txid of this TransactionAccount.  # noqa: E501
        :type: str
        """

        self._txid = txid

    @property
    def txurl(self):
        """Gets the txurl of this TransactionAccount.  # noqa: E501

        Blockchain transaction explore URL for type 5  # noqa: E501

        :return: The txurl of this TransactionAccount.  # noqa: E501
        :rtype: str
        """
        return self._txurl

    @txurl.setter
    def txurl(self, txurl):
        """Sets the txurl of this TransactionAccount.

        Blockchain transaction explore URL for type 5  # noqa: E501

        :param txurl: The txurl of this TransactionAccount.  # noqa: E501
        :type: str
        """

        self._txurl = txurl

    @property
    def target_user(self):
        """Gets the target_user of this TransactionAccount.  # noqa: E501

        Target user for type 6  # noqa: E501

        :return: The target_user of this TransactionAccount.  # noqa: E501
        :rtype: object
        """
        return self._target_user

    @target_user.setter
    def target_user(self, target_user):
        """Sets the target_user of this TransactionAccount.

        Target user for type 6  # noqa: E501

        :param target_user: The target_user of this TransactionAccount.  # noqa: E501
        :type: object
        """

        self._target_user = target_user

    @property
    def source_user(self):
        """Gets the source_user of this TransactionAccount.  # noqa: E501

        Source user for type 7  # noqa: E501

        :return: The source_user of this TransactionAccount.  # noqa: E501
        :rtype: object
        """
        return self._source_user

    @source_user.setter
    def source_user(self, source_user):
        """Sets the source_user of this TransactionAccount.

        Source user for type 7  # noqa: E501

        :param source_user: The source_user of this TransactionAccount.  # noqa: E501
        :type: object
        """

        self._source_user = source_user

    @property
    def target_farm(self):
        """Gets the target_farm of this TransactionAccount.  # noqa: E501

        Target farm for types 2, 10  # noqa: E501

        :return: The target_farm of this TransactionAccount.  # noqa: E501
        :rtype: object
        """
        return self._target_farm

    @target_farm.setter
    def target_farm(self, target_farm):
        """Sets the target_farm of this TransactionAccount.

        Target farm for types 2, 10  # noqa: E501

        :param target_farm: The target_farm of this TransactionAccount.  # noqa: E501
        :type: object
        """

        self._target_farm = target_farm

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TransactionAccount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransactionAccount):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TransactionAccount):
            return True

        return self.to_dict() != other.to_dict()
